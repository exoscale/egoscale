package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"path"
	"strings"
	"time"

	"github.com/urfave/cli"
)

const frontmatter = `---
date: %s
title: %q
description: %q
slug: %q
type: command
---
`

func writeFlag(buffer *bytes.Buffer, flag cli.Flag) {
	doc := strings.SplitN(flag.String(), "\t", 2)
	if len(doc) != 2 {
		doc = []string{flag.GetName(), ""}
	} else {
		d := strings.Replace(doc[1], "[required]", "(**required**)", 1)
		doc[1] = " -- " + d
	}
	buffer.WriteString(fmt.Sprintf("`%s`%s\n", doc[0], doc[1]))
}

// generateDocs generates markdown documentation for the commands in app
func generateDocs(app *cli.App, docPath string) {
	buffer := bytes.Buffer{}

	if len(app.VisibleFlags()) > 0 {
		buffer.WriteString("## Global Flags\n\n")
		for _, flag := range app.VisibleFlags() {
			writeFlag(&buffer, flag)
		}
	}

	globalFlag := buffer.String()

	now := time.Now().Format(time.RFC3339)

	for _, command := range app.Commands {
		base := command.Name
		title := app.Name + " " + base

		buffer := bytes.Buffer{}
		buffer.WriteString(fmt.Sprintf(frontmatter, now, title, command.Description, base))

		if command.UsageText != "" {
			buffer.WriteString(command.UsageText)
			buffer.WriteString("\n\n")
		}

		buffer.WriteString("<!--more-->\n\n")

		if command.Usage != "" {
			buffer.WriteString("## Usage\n\n")
			buffer.WriteString("```")
			buffer.WriteString(command.Usage)
			buffer.WriteString("```\n\n")
		}

		if len(command.VisibleFlags()) > 0 {
			buffer.WriteString("## Flags\n\n")
			for _, flag := range command.VisibleFlags() {
				writeFlag(&buffer, flag)
			}

			buffer.WriteString("\n")
			buffer.WriteString(globalFlag)

			buffer.WriteString("\n\n###### Auto generated by urfave/cli on ")
			buffer.WriteString(time.Now().Format("2-Jan-2006"))
			buffer.WriteString("\n")

			filepath := path.Join(docPath, base+".md")

			log.Printf("create file: %s", filepath)
			if err := ioutil.WriteFile(filepath, buffer.Bytes(), 0644); err != nil {
				log.Fatalf("doc could not be written. %s", err)
			}
		}
	}
}
