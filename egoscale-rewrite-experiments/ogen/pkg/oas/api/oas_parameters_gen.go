// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AddExternalSourceToSecurityGroupParams is parameters of add-external-source-to-security-group operation.
type AddExternalSourceToSecurityGroupParams struct {
	ID uuid.UUID
}

func unpackAddExternalSourceToSecurityGroupParams(packed middleware.Parameters) (params AddExternalSourceToSecurityGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddExternalSourceToSecurityGroupParams(args [1]string, argsEscaped bool, r *http.Request) (params AddExternalSourceToSecurityGroupParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AddInstanceProtectionParams is parameters of add-instance-protection operation.
type AddInstanceProtectionParams struct {
	ID uuid.UUID
}

func unpackAddInstanceProtectionParams(packed middleware.Parameters) (params AddInstanceProtectionParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddInstanceProtectionParams(args [1]string, argsEscaped bool, r *http.Request) (params AddInstanceProtectionParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AddRuleToSecurityGroupParams is parameters of add-rule-to-security-group operation.
type AddRuleToSecurityGroupParams struct {
	ID uuid.UUID
}

func unpackAddRuleToSecurityGroupParams(packed middleware.Parameters) (params AddRuleToSecurityGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAddRuleToSecurityGroupParams(args [1]string, argsEscaped bool, r *http.Request) (params AddRuleToSecurityGroupParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AttachInstanceToPrivateNetworkParams is parameters of attach-instance-to-private-network operation.
type AttachInstanceToPrivateNetworkParams struct {
	ID uuid.UUID
}

func unpackAttachInstanceToPrivateNetworkParams(packed middleware.Parameters) (params AttachInstanceToPrivateNetworkParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeAttachInstanceToPrivateNetworkParams(args [1]string, argsEscaped bool, r *http.Request) (params AttachInstanceToPrivateNetworkParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CopyTemplateParams is parameters of copy-template operation.
type CopyTemplateParams struct {
	ID uuid.UUID
}

func unpackCopyTemplateParams(packed middleware.Parameters) (params CopyTemplateParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCopyTemplateParams(args [1]string, argsEscaped bool, r *http.Request) (params CopyTemplateParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDNSDomainRecordParams is parameters of create-dns-domain-record operation.
type CreateDNSDomainRecordParams struct {
	DomainID uuid.UUID
}

func unpackCreateDNSDomainRecordParams(packed middleware.Parameters) (params CreateDNSDomainRecordParams) {
	{
		key := middleware.ParameterKey{
			Name: "domain-id",
			In:   "path",
		}
		params.DomainID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateDNSDomainRecordParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDNSDomainRecordParams, _ error) {
	// Decode path: domain-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domain-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.DomainID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domain-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasKafkaSchemaRegistryACLConfigParams is parameters of create-dbaas-kafka-schema-registry-acl-config operation.
type CreateDbaasKafkaSchemaRegistryACLConfigParams struct {
	Name DbaasServiceName
}

func unpackCreateDbaasKafkaSchemaRegistryACLConfigParams(packed middleware.Parameters) (params CreateDbaasKafkaSchemaRegistryACLConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasKafkaSchemaRegistryACLConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasKafkaSchemaRegistryACLConfigParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasKafkaTopicACLConfigParams is parameters of create-dbaas-kafka-topic-acl-config operation.
type CreateDbaasKafkaTopicACLConfigParams struct {
	Name DbaasServiceName
}

func unpackCreateDbaasKafkaTopicACLConfigParams(packed middleware.Parameters) (params CreateDbaasKafkaTopicACLConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasKafkaTopicACLConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasKafkaTopicACLConfigParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasKafkaUserParams is parameters of create-dbaas-kafka-user operation.
type CreateDbaasKafkaUserParams struct {
	ServiceName DbaasServiceName
}

func unpackCreateDbaasKafkaUserParams(packed middleware.Parameters) (params CreateDbaasKafkaUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasKafkaUserParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasKafkaUserParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ServiceName = DbaasServiceName(paramsDotServiceNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ServiceName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasPostgresUserParams is parameters of create-dbaas-postgres-user operation.
type CreateDbaasPostgresUserParams struct {
	ServiceName DbaasServiceName
}

func unpackCreateDbaasPostgresUserParams(packed middleware.Parameters) (params CreateDbaasPostgresUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasPostgresUserParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasPostgresUserParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ServiceName = DbaasServiceName(paramsDotServiceNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ServiceName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasServiceKafkaParams is parameters of create-dbaas-service-kafka operation.
type CreateDbaasServiceKafkaParams struct {
	Name DbaasServiceName
}

func unpackCreateDbaasServiceKafkaParams(packed middleware.Parameters) (params CreateDbaasServiceKafkaParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasServiceKafkaParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasServiceKafkaParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasServiceMysqlParams is parameters of create-dbaas-service-mysql operation.
type CreateDbaasServiceMysqlParams struct {
	Name DbaasServiceName
}

func unpackCreateDbaasServiceMysqlParams(packed middleware.Parameters) (params CreateDbaasServiceMysqlParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasServiceMysqlParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasServiceMysqlParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasServiceOpensearchParams is parameters of create-dbaas-service-opensearch operation.
type CreateDbaasServiceOpensearchParams struct {
	Name DbaasServiceName
}

func unpackCreateDbaasServiceOpensearchParams(packed middleware.Parameters) (params CreateDbaasServiceOpensearchParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasServiceOpensearchParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasServiceOpensearchParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasServicePgParams is parameters of create-dbaas-service-pg operation.
type CreateDbaasServicePgParams struct {
	Name DbaasServiceName
}

func unpackCreateDbaasServicePgParams(packed middleware.Parameters) (params CreateDbaasServicePgParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasServicePgParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasServicePgParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasServiceRedisParams is parameters of create-dbaas-service-redis operation.
type CreateDbaasServiceRedisParams struct {
	Name DbaasServiceName
}

func unpackCreateDbaasServiceRedisParams(packed middleware.Parameters) (params CreateDbaasServiceRedisParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasServiceRedisParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasServiceRedisParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateDbaasTaskMigrationCheckParams is parameters of create-dbaas-task-migration-check operation.
type CreateDbaasTaskMigrationCheckParams struct {
	Service DbaasServiceName
}

func unpackCreateDbaasTaskMigrationCheckParams(packed middleware.Parameters) (params CreateDbaasTaskMigrationCheckParams) {
	{
		key := middleware.ParameterKey{
			Name: "service",
			In:   "path",
		}
		params.Service = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeCreateDbaasTaskMigrationCheckParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateDbaasTaskMigrationCheckParams, _ error) {
	// Decode path: service.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Service = DbaasServiceName(paramsDotServiceVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Service.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateSnapshotParams is parameters of create-snapshot operation.
type CreateSnapshotParams struct {
	ID uuid.UUID
}

func unpackCreateSnapshotParams(packed middleware.Parameters) (params CreateSnapshotParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeCreateSnapshotParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateSnapshotParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteAPIKeyParams is parameters of delete-api-key operation.
type DeleteAPIKeyParams struct {
	ID string
}

func unpackDeleteAPIKeyParams(packed middleware.Parameters) (params DeleteAPIKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeDeleteAPIKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteAPIKeyParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteAntiAffinityGroupParams is parameters of delete-anti-affinity-group operation.
type DeleteAntiAffinityGroupParams struct {
	ID uuid.UUID
}

func unpackDeleteAntiAffinityGroupParams(packed middleware.Parameters) (params DeleteAntiAffinityGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteAntiAffinityGroupParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteAntiAffinityGroupParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDNSDomainParams is parameters of delete-dns-domain operation.
type DeleteDNSDomainParams struct {
	ID uuid.UUID
}

func unpackDeleteDNSDomainParams(packed middleware.Parameters) (params DeleteDNSDomainParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteDNSDomainParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteDNSDomainParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDNSDomainRecordParams is parameters of delete-dns-domain-record operation.
type DeleteDNSDomainRecordParams struct {
	DomainID uuid.UUID
	RecordID uuid.UUID
}

func unpackDeleteDNSDomainRecordParams(packed middleware.Parameters) (params DeleteDNSDomainRecordParams) {
	{
		key := middleware.ParameterKey{
			Name: "domain-id",
			In:   "path",
		}
		params.DomainID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "record-id",
			In:   "path",
		}
		params.RecordID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteDNSDomainRecordParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteDNSDomainRecordParams, _ error) {
	// Decode path: domain-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domain-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.DomainID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domain-id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: record-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "record-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.RecordID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "record-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDbaasIntegrationParams is parameters of delete-dbaas-integration operation.
type DeleteDbaasIntegrationParams struct {
	ID uuid.UUID
}

func unpackDeleteDbaasIntegrationParams(packed middleware.Parameters) (params DeleteDbaasIntegrationParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteDbaasIntegrationParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteDbaasIntegrationParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDbaasKafkaSchemaRegistryACLConfigParams is parameters of delete-dbaas-kafka-schema-registry-acl-config operation.
type DeleteDbaasKafkaSchemaRegistryACLConfigParams struct {
	Name  DbaasServiceName
	ACLID DbaasKafkaACLID
}

func unpackDeleteDbaasKafkaSchemaRegistryACLConfigParams(packed middleware.Parameters) (params DeleteDbaasKafkaSchemaRegistryACLConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "acl-id",
			In:   "path",
		}
		params.ACLID = packed[key].(DbaasKafkaACLID)
	}
	return params
}

func decodeDeleteDbaasKafkaSchemaRegistryACLConfigParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteDbaasKafkaSchemaRegistryACLConfigParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: acl-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "acl-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotACLIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotACLIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ACLID = DbaasKafkaACLID(paramsDotACLIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ACLID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "acl-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDbaasKafkaTopicACLConfigParams is parameters of delete-dbaas-kafka-topic-acl-config operation.
type DeleteDbaasKafkaTopicACLConfigParams struct {
	Name  DbaasServiceName
	ACLID DbaasKafkaACLID
}

func unpackDeleteDbaasKafkaTopicACLConfigParams(packed middleware.Parameters) (params DeleteDbaasKafkaTopicACLConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "acl-id",
			In:   "path",
		}
		params.ACLID = packed[key].(DbaasKafkaACLID)
	}
	return params
}

func decodeDeleteDbaasKafkaTopicACLConfigParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteDbaasKafkaTopicACLConfigParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: acl-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "acl-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotACLIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotACLIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ACLID = DbaasKafkaACLID(paramsDotACLIDVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ACLID.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "acl-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDbaasKafkaUserParams is parameters of delete-dbaas-kafka-user operation.
type DeleteDbaasKafkaUserParams struct {
	ServiceName DbaasServiceName
	Username    DbaasUserUsername
}

func unpackDeleteDbaasKafkaUserParams(packed middleware.Parameters) (params DeleteDbaasKafkaUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(DbaasUserUsername)
	}
	return params
}

func decodeDeleteDbaasKafkaUserParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteDbaasKafkaUserParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ServiceName = DbaasServiceName(paramsDotServiceNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ServiceName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = DbaasUserUsername(paramsDotUsernameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Username.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDbaasPostgresUserParams is parameters of delete-dbaas-postgres-user operation.
type DeleteDbaasPostgresUserParams struct {
	ServiceName DbaasServiceName
	Username    DbaasUserUsername
}

func unpackDeleteDbaasPostgresUserParams(packed middleware.Parameters) (params DeleteDbaasPostgresUserParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(DbaasUserUsername)
	}
	return params
}

func decodeDeleteDbaasPostgresUserParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteDbaasPostgresUserParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ServiceName = DbaasServiceName(paramsDotServiceNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ServiceName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = DbaasUserUsername(paramsDotUsernameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Username.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDbaasServiceParams is parameters of delete-dbaas-service operation.
type DeleteDbaasServiceParams struct {
	Name string
}

func unpackDeleteDbaasServiceParams(packed middleware.Parameters) (params DeleteDbaasServiceParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeDeleteDbaasServiceParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteDbaasServiceParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteElasticIPParams is parameters of delete-elastic-ip operation.
type DeleteElasticIPParams struct {
	ID uuid.UUID
}

func unpackDeleteElasticIPParams(packed middleware.Parameters) (params DeleteElasticIPParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteElasticIPParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteElasticIPParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteIamRoleParams is parameters of delete-iam-role operation.
type DeleteIamRoleParams struct {
	ID uuid.UUID
}

func unpackDeleteIamRoleParams(packed middleware.Parameters) (params DeleteIamRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteIamRoleParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteIamRoleParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteInstanceParams is parameters of delete-instance operation.
type DeleteInstanceParams struct {
	ID uuid.UUID
}

func unpackDeleteInstanceParams(packed middleware.Parameters) (params DeleteInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteInstancePoolParams is parameters of delete-instance-pool operation.
type DeleteInstancePoolParams struct {
	ID uuid.UUID
}

func unpackDeleteInstancePoolParams(packed middleware.Parameters) (params DeleteInstancePoolParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteInstancePoolParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteInstancePoolParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteLoadBalancerParams is parameters of delete-load-balancer operation.
type DeleteLoadBalancerParams struct {
	ID uuid.UUID
}

func unpackDeleteLoadBalancerParams(packed middleware.Parameters) (params DeleteLoadBalancerParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteLoadBalancerParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteLoadBalancerParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteLoadBalancerServiceParams is parameters of delete-load-balancer-service operation.
type DeleteLoadBalancerServiceParams struct {
	ID        uuid.UUID
	ServiceID uuid.UUID
}

func unpackDeleteLoadBalancerServiceParams(packed middleware.Parameters) (params DeleteLoadBalancerServiceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "service-id",
			In:   "path",
		}
		params.ServiceID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteLoadBalancerServiceParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteLoadBalancerServiceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: service-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ServiceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeletePrivateNetworkParams is parameters of delete-private-network operation.
type DeletePrivateNetworkParams struct {
	ID uuid.UUID
}

func unpackDeletePrivateNetworkParams(packed middleware.Parameters) (params DeletePrivateNetworkParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeletePrivateNetworkParams(args [1]string, argsEscaped bool, r *http.Request) (params DeletePrivateNetworkParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteReverseDNSElasticIPParams is parameters of delete-reverse-dns-elastic-ip operation.
type DeleteReverseDNSElasticIPParams struct {
	ID uuid.UUID
}

func unpackDeleteReverseDNSElasticIPParams(packed middleware.Parameters) (params DeleteReverseDNSElasticIPParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteReverseDNSElasticIPParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteReverseDNSElasticIPParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteReverseDNSInstanceParams is parameters of delete-reverse-dns-instance operation.
type DeleteReverseDNSInstanceParams struct {
	ID uuid.UUID
}

func unpackDeleteReverseDNSInstanceParams(packed middleware.Parameters) (params DeleteReverseDNSInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteReverseDNSInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteReverseDNSInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteRuleFromSecurityGroupParams is parameters of delete-rule-from-security-group operation.
type DeleteRuleFromSecurityGroupParams struct {
	ID     uuid.UUID
	RuleID uuid.UUID
}

func unpackDeleteRuleFromSecurityGroupParams(packed middleware.Parameters) (params DeleteRuleFromSecurityGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "rule-id",
			In:   "path",
		}
		params.RuleID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteRuleFromSecurityGroupParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteRuleFromSecurityGroupParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: rule-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "rule-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.RuleID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "rule-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSSHKeyParams is parameters of delete-ssh-key operation.
type DeleteSSHKeyParams struct {
	Name string
}

func unpackDeleteSSHKeyParams(packed middleware.Parameters) (params DeleteSSHKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeDeleteSSHKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteSSHKeyParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSecurityGroupParams is parameters of delete-security-group operation.
type DeleteSecurityGroupParams struct {
	ID uuid.UUID
}

func unpackDeleteSecurityGroupParams(packed middleware.Parameters) (params DeleteSecurityGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteSecurityGroupParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteSecurityGroupParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSksClusterParams is parameters of delete-sks-cluster operation.
type DeleteSksClusterParams struct {
	ID uuid.UUID
}

func unpackDeleteSksClusterParams(packed middleware.Parameters) (params DeleteSksClusterParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteSksClusterParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteSksClusterParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSksNodepoolParams is parameters of delete-sks-nodepool operation.
type DeleteSksNodepoolParams struct {
	ID            uuid.UUID
	SksNodepoolID uuid.UUID
}

func unpackDeleteSksNodepoolParams(packed middleware.Parameters) (params DeleteSksNodepoolParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "sks-nodepool-id",
			In:   "path",
		}
		params.SksNodepoolID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteSksNodepoolParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteSksNodepoolParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: sks-nodepool-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sks-nodepool-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.SksNodepoolID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sks-nodepool-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSnapshotParams is parameters of delete-snapshot operation.
type DeleteSnapshotParams struct {
	ID uuid.UUID
}

func unpackDeleteSnapshotParams(packed middleware.Parameters) (params DeleteSnapshotParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteSnapshotParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteSnapshotParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteTemplateParams is parameters of delete-template operation.
type DeleteTemplateParams struct {
	ID uuid.UUID
}

func unpackDeleteTemplateParams(packed middleware.Parameters) (params DeleteTemplateParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeDeleteTemplateParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteTemplateParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// EvictInstancePoolMembersParams is parameters of evict-instance-pool-members operation.
type EvictInstancePoolMembersParams struct {
	ID uuid.UUID
}

func unpackEvictInstancePoolMembersParams(packed middleware.Parameters) (params EvictInstancePoolMembersParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeEvictInstancePoolMembersParams(args [1]string, argsEscaped bool, r *http.Request) (params EvictInstancePoolMembersParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// EvictSksNodepoolMembersParams is parameters of evict-sks-nodepool-members operation.
type EvictSksNodepoolMembersParams struct {
	ID            uuid.UUID
	SksNodepoolID uuid.UUID
}

func unpackEvictSksNodepoolMembersParams(packed middleware.Parameters) (params EvictSksNodepoolMembersParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "sks-nodepool-id",
			In:   "path",
		}
		params.SksNodepoolID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeEvictSksNodepoolMembersParams(args [2]string, argsEscaped bool, r *http.Request) (params EvictSksNodepoolMembersParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: sks-nodepool-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sks-nodepool-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.SksNodepoolID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sks-nodepool-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ExportSnapshotParams is parameters of export-snapshot operation.
type ExportSnapshotParams struct {
	ID uuid.UUID
}

func unpackExportSnapshotParams(packed middleware.Parameters) (params ExportSnapshotParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeExportSnapshotParams(args [1]string, argsEscaped bool, r *http.Request) (params ExportSnapshotParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GenerateSksClusterKubeconfigParams is parameters of generate-sks-cluster-kubeconfig operation.
type GenerateSksClusterKubeconfigParams struct {
	ID uuid.UUID
}

func unpackGenerateSksClusterKubeconfigParams(packed middleware.Parameters) (params GenerateSksClusterKubeconfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGenerateSksClusterKubeconfigParams(args [1]string, argsEscaped bool, r *http.Request) (params GenerateSksClusterKubeconfigParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAPIKeyParams is parameters of get-api-key operation.
type GetAPIKeyParams struct {
	ID string
}

func unpackGetAPIKeyParams(packed middleware.Parameters) (params GetAPIKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(string)
	}
	return params
}

func decodeGetAPIKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAPIKeyParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAccessKeyParams is parameters of get-access-key operation.
type GetAccessKeyParams struct {
	Key string
}

func unpackGetAccessKeyParams(packed middleware.Parameters) (params GetAccessKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "path",
		}
		params.Key = packed[key].(string)
	}
	return params
}

func decodeGetAccessKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAccessKeyParams, _ error) {
	// Decode path: key.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Key = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDNSDomainParams is parameters of get-dns-domain operation.
type GetDNSDomainParams struct {
	ID uuid.UUID
}

func unpackGetDNSDomainParams(packed middleware.Parameters) (params GetDNSDomainParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetDNSDomainParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDNSDomainParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDNSDomainRecordParams is parameters of get-dns-domain-record operation.
type GetDNSDomainRecordParams struct {
	DomainID uuid.UUID
	RecordID uuid.UUID
}

func unpackGetDNSDomainRecordParams(packed middleware.Parameters) (params GetDNSDomainRecordParams) {
	{
		key := middleware.ParameterKey{
			Name: "domain-id",
			In:   "path",
		}
		params.DomainID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "record-id",
			In:   "path",
		}
		params.RecordID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetDNSDomainRecordParams(args [2]string, argsEscaped bool, r *http.Request) (params GetDNSDomainRecordParams, _ error) {
	// Decode path: domain-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domain-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.DomainID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domain-id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: record-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "record-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.RecordID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "record-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDNSDomainZoneFileParams is parameters of get-dns-domain-zone-file operation.
type GetDNSDomainZoneFileParams struct {
	ID uuid.UUID
}

func unpackGetDNSDomainZoneFileParams(packed middleware.Parameters) (params GetDNSDomainZoneFileParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetDNSDomainZoneFileParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDNSDomainZoneFileParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasIntegrationParams is parameters of get-dbaas-integration operation.
type GetDbaasIntegrationParams struct {
	ID uuid.UUID
}

func unpackGetDbaasIntegrationParams(packed middleware.Parameters) (params GetDbaasIntegrationParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetDbaasIntegrationParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasIntegrationParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasKafkaACLConfigParams is parameters of get-dbaas-kafka-acl-config operation.
type GetDbaasKafkaACLConfigParams struct {
	Name DbaasServiceName
}

func unpackGetDbaasKafkaACLConfigParams(packed middleware.Parameters) (params GetDbaasKafkaACLConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeGetDbaasKafkaACLConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasKafkaACLConfigParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasMigrationStatusParams is parameters of get-dbaas-migration-status operation.
type GetDbaasMigrationStatusParams struct {
	Name DbaasServiceName
}

func unpackGetDbaasMigrationStatusParams(packed middleware.Parameters) (params GetDbaasMigrationStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeGetDbaasMigrationStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasMigrationStatusParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServiceKafkaParams is parameters of get-dbaas-service-kafka operation.
type GetDbaasServiceKafkaParams struct {
	Name DbaasServiceName
}

func unpackGetDbaasServiceKafkaParams(packed middleware.Parameters) (params GetDbaasServiceKafkaParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeGetDbaasServiceKafkaParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServiceKafkaParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServiceLogsParams is parameters of get-dbaas-service-logs operation.
type GetDbaasServiceLogsParams struct {
	ServiceName string
}

func unpackGetDbaasServiceLogsParams(packed middleware.Parameters) (params GetDbaasServiceLogsParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(string)
	}
	return params
}

func decodeGetDbaasServiceLogsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServiceLogsParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServiceName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServiceMetricsParams is parameters of get-dbaas-service-metrics operation.
type GetDbaasServiceMetricsParams struct {
	ServiceName string
}

func unpackGetDbaasServiceMetricsParams(packed middleware.Parameters) (params GetDbaasServiceMetricsParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(string)
	}
	return params
}

func decodeGetDbaasServiceMetricsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServiceMetricsParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServiceName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServiceMysqlParams is parameters of get-dbaas-service-mysql operation.
type GetDbaasServiceMysqlParams struct {
	Name DbaasServiceName
}

func unpackGetDbaasServiceMysqlParams(packed middleware.Parameters) (params GetDbaasServiceMysqlParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeGetDbaasServiceMysqlParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServiceMysqlParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServiceOpensearchParams is parameters of get-dbaas-service-opensearch operation.
type GetDbaasServiceOpensearchParams struct {
	Name DbaasServiceName
}

func unpackGetDbaasServiceOpensearchParams(packed middleware.Parameters) (params GetDbaasServiceOpensearchParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeGetDbaasServiceOpensearchParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServiceOpensearchParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServicePgParams is parameters of get-dbaas-service-pg operation.
type GetDbaasServicePgParams struct {
	Name DbaasServiceName
}

func unpackGetDbaasServicePgParams(packed middleware.Parameters) (params GetDbaasServicePgParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeGetDbaasServicePgParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServicePgParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServiceRedisParams is parameters of get-dbaas-service-redis operation.
type GetDbaasServiceRedisParams struct {
	Name DbaasServiceName
}

func unpackGetDbaasServiceRedisParams(packed middleware.Parameters) (params GetDbaasServiceRedisParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeGetDbaasServiceRedisParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServiceRedisParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasServiceTypeParams is parameters of get-dbaas-service-type operation.
type GetDbaasServiceTypeParams struct {
	ServiceTypeName string
}

func unpackGetDbaasServiceTypeParams(packed middleware.Parameters) (params GetDbaasServiceTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-type-name",
			In:   "path",
		}
		params.ServiceTypeName = packed[key].(string)
	}
	return params
}

func decodeGetDbaasServiceTypeParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDbaasServiceTypeParams, _ error) {
	// Decode path: service-type-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-type-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServiceTypeName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-type-name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDbaasTaskParams is parameters of get-dbaas-task operation.
type GetDbaasTaskParams struct {
	Service DbaasServiceName
	ID      uuid.UUID
}

func unpackGetDbaasTaskParams(packed middleware.Parameters) (params GetDbaasTaskParams) {
	{
		key := middleware.ParameterKey{
			Name: "service",
			In:   "path",
		}
		params.Service = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetDbaasTaskParams(args [2]string, argsEscaped bool, r *http.Request) (params GetDbaasTaskParams, _ error) {
	// Decode path: service.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Service = DbaasServiceName(paramsDotServiceVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Service.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDeployTargetParams is parameters of get-deploy-target operation.
type GetDeployTargetParams struct {
	ID uuid.UUID
}

func unpackGetDeployTargetParams(packed middleware.Parameters) (params GetDeployTargetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetDeployTargetParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDeployTargetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetElasticIPParams is parameters of get-elastic-ip operation.
type GetElasticIPParams struct {
	ID uuid.UUID
}

func unpackGetElasticIPParams(packed middleware.Parameters) (params GetElasticIPParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetElasticIPParams(args [1]string, argsEscaped bool, r *http.Request) (params GetElasticIPParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetIamRoleParams is parameters of get-iam-role operation.
type GetIamRoleParams struct {
	ID uuid.UUID
}

func unpackGetIamRoleParams(packed middleware.Parameters) (params GetIamRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetIamRoleParams(args [1]string, argsEscaped bool, r *http.Request) (params GetIamRoleParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetInstanceTypeParams is parameters of get-instance-type operation.
type GetInstanceTypeParams struct {
	ID uuid.UUID
}

func unpackGetInstanceTypeParams(packed middleware.Parameters) (params GetInstanceTypeParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetInstanceTypeParams(args [1]string, argsEscaped bool, r *http.Request) (params GetInstanceTypeParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetOperationParams is parameters of get-operation operation.
type GetOperationParams struct {
	ID uuid.UUID
}

func unpackGetOperationParams(packed middleware.Parameters) (params GetOperationParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetOperationParams(args [1]string, argsEscaped bool, r *http.Request) (params GetOperationParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPrivateNetworkParams is parameters of get-private-network operation.
type GetPrivateNetworkParams struct {
	ID uuid.UUID
}

func unpackGetPrivateNetworkParams(packed middleware.Parameters) (params GetPrivateNetworkParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetPrivateNetworkParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPrivateNetworkParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetQuotaParams is parameters of get-quota operation.
type GetQuotaParams struct {
	Entity string
}

func unpackGetQuotaParams(packed middleware.Parameters) (params GetQuotaParams) {
	{
		key := middleware.ParameterKey{
			Name: "entity",
			In:   "path",
		}
		params.Entity = packed[key].(string)
	}
	return params
}

func decodeGetQuotaParams(args [1]string, argsEscaped bool, r *http.Request) (params GetQuotaParams, _ error) {
	// Decode path: entity.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "entity",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Entity = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "entity",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetReverseDNSElasticIPParams is parameters of get-reverse-dns-elastic-ip operation.
type GetReverseDNSElasticIPParams struct {
	ID uuid.UUID
}

func unpackGetReverseDNSElasticIPParams(packed middleware.Parameters) (params GetReverseDNSElasticIPParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetReverseDNSElasticIPParams(args [1]string, argsEscaped bool, r *http.Request) (params GetReverseDNSElasticIPParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetReverseDNSInstanceParams is parameters of get-reverse-dns-instance operation.
type GetReverseDNSInstanceParams struct {
	ID uuid.UUID
}

func unpackGetReverseDNSInstanceParams(packed middleware.Parameters) (params GetReverseDNSInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetReverseDNSInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params GetReverseDNSInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSSHKeyParams is parameters of get-ssh-key operation.
type GetSSHKeyParams struct {
	Name string
}

func unpackGetSSHKeyParams(packed middleware.Parameters) (params GetSSHKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(string)
	}
	return params
}

func decodeGetSSHKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSSHKeyParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Name = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSksClusterAuthorityCertParams is parameters of get-sks-cluster-authority-cert operation.
type GetSksClusterAuthorityCertParams struct {
	ID        uuid.UUID
	Authority GetSksClusterAuthorityCertAuthority
}

func unpackGetSksClusterAuthorityCertParams(packed middleware.Parameters) (params GetSksClusterAuthorityCertParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "authority",
			In:   "path",
		}
		params.Authority = packed[key].(GetSksClusterAuthorityCertAuthority)
	}
	return params
}

func decodeGetSksClusterAuthorityCertParams(args [2]string, argsEscaped bool, r *http.Request) (params GetSksClusterAuthorityCertParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: authority.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "authority",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Authority = GetSksClusterAuthorityCertAuthority(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Authority.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "authority",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSosPresignedURLParams is parameters of get-sos-presigned-url operation.
type GetSosPresignedURLParams struct {
	Bucket string
	Key    OptString
}

func unpackGetSosPresignedURLParams(packed middleware.Parameters) (params GetSosPresignedURLParams) {
	{
		key := middleware.ParameterKey{
			Name: "bucket",
			In:   "path",
		}
		params.Bucket = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Key = v.(OptString)
		}
	}
	return params
}

func decodeGetSosPresignedURLParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSosPresignedURLParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: bucket.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "bucket",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Bucket = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "bucket",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: key.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "key",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotKeyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotKeyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Key.SetTo(paramsDotKeyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetTemplateParams is parameters of get-template operation.
type GetTemplateParams struct {
	ID uuid.UUID
}

func unpackGetTemplateParams(packed middleware.Parameters) (params GetTemplateParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeGetTemplateParams(args [1]string, argsEscaped bool, r *http.Request) (params GetTemplateParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListDNSDomainRecordsParams is parameters of list-dns-domain-records operation.
type ListDNSDomainRecordsParams struct {
	DomainID uuid.UUID
}

func unpackListDNSDomainRecordsParams(packed middleware.Parameters) (params ListDNSDomainRecordsParams) {
	{
		key := middleware.ParameterKey{
			Name: "domain-id",
			In:   "path",
		}
		params.DomainID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeListDNSDomainRecordsParams(args [1]string, argsEscaped bool, r *http.Request) (params ListDNSDomainRecordsParams, _ error) {
	// Decode path: domain-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domain-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.DomainID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domain-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListDbaasIntegrationSettingsParams is parameters of list-dbaas-integration-settings operation.
type ListDbaasIntegrationSettingsParams struct {
	IntegrationType string
	SourceType      string
	DestType        string
}

func unpackListDbaasIntegrationSettingsParams(packed middleware.Parameters) (params ListDbaasIntegrationSettingsParams) {
	{
		key := middleware.ParameterKey{
			Name: "integration-type",
			In:   "path",
		}
		params.IntegrationType = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "source-type",
			In:   "path",
		}
		params.SourceType = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "dest-type",
			In:   "path",
		}
		params.DestType = packed[key].(string)
	}
	return params
}

func decodeListDbaasIntegrationSettingsParams(args [3]string, argsEscaped bool, r *http.Request) (params ListDbaasIntegrationSettingsParams, _ error) {
	// Decode path: integration-type.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "integration-type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.IntegrationType = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "integration-type",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: source-type.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "source-type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SourceType = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "source-type",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: dest-type.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "dest-type",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.DestType = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "dest-type",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListEventsParams is parameters of list-events operation.
type ListEventsParams struct {
	From OptDateTime
	To   OptDateTime
}

func unpackListEventsParams(packed middleware.Parameters) (params ListEventsParams) {
	{
		key := middleware.ParameterKey{
			Name: "from",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.From = v.(OptDateTime)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "to",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.To = v.(OptDateTime)
		}
	}
	return params
}

func decodeListEventsParams(args [0]string, argsEscaped bool, r *http.Request) (params ListEventsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: from.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "from",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFromVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotFromVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.From.SetTo(paramsDotFromVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "from",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: to.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "to",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotToVal time.Time
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToDateTime(val)
					if err != nil {
						return err
					}

					paramsDotToVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.To.SetTo(paramsDotToVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "to",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListSksClusterDeprecatedResourcesParams is parameters of list-sks-cluster-deprecated-resources operation.
type ListSksClusterDeprecatedResourcesParams struct {
	ID uuid.UUID
}

func unpackListSksClusterDeprecatedResourcesParams(packed middleware.Parameters) (params ListSksClusterDeprecatedResourcesParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeListSksClusterDeprecatedResourcesParams(args [1]string, argsEscaped bool, r *http.Request) (params ListSksClusterDeprecatedResourcesParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListSksClusterVersionsParams is parameters of list-sks-cluster-versions operation.
type ListSksClusterVersionsParams struct {
	IncludeDeprecated OptString
}

func unpackListSksClusterVersionsParams(packed middleware.Parameters) (params ListSksClusterVersionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "include-deprecated",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.IncludeDeprecated = v.(OptString)
		}
	}
	return params
}

func decodeListSksClusterVersionsParams(args [0]string, argsEscaped bool, r *http.Request) (params ListSksClusterVersionsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: include-deprecated.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "include-deprecated",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotIncludeDeprecatedVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotIncludeDeprecatedVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.IncludeDeprecated.SetTo(paramsDotIncludeDeprecatedVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "include-deprecated",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ListTemplatesParams is parameters of list-templates operation.
type ListTemplatesParams struct {
	Visibility OptListTemplatesVisibility
	Family     OptString
}

func unpackListTemplatesParams(packed middleware.Parameters) (params ListTemplatesParams) {
	{
		key := middleware.ParameterKey{
			Name: "visibility",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Visibility = v.(OptListTemplatesVisibility)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "family",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Family = v.(OptString)
		}
	}
	return params
}

func decodeListTemplatesParams(args [0]string, argsEscaped bool, r *http.Request) (params ListTemplatesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: visibility.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "visibility",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotVisibilityVal ListTemplatesVisibility
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotVisibilityVal = ListTemplatesVisibility(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Visibility.SetTo(paramsDotVisibilityVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Visibility.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "visibility",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: family.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "family",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotFamilyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotFamilyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Family.SetTo(paramsDotFamilyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "family",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// PromoteSnapshotToTemplateParams is parameters of promote-snapshot-to-template operation.
type PromoteSnapshotToTemplateParams struct {
	ID uuid.UUID
}

func unpackPromoteSnapshotToTemplateParams(packed middleware.Parameters) (params PromoteSnapshotToTemplateParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodePromoteSnapshotToTemplateParams(args [1]string, argsEscaped bool, r *http.Request) (params PromoteSnapshotToTemplateParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RebootInstanceParams is parameters of reboot-instance operation.
type RebootInstanceParams struct {
	ID uuid.UUID
}

func unpackRebootInstanceParams(packed middleware.Parameters) (params RebootInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRebootInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params RebootInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveExternalSourceFromSecurityGroupParams is parameters of remove-external-source-from-security-group operation.
type RemoveExternalSourceFromSecurityGroupParams struct {
	ID uuid.UUID
}

func unpackRemoveExternalSourceFromSecurityGroupParams(packed middleware.Parameters) (params RemoveExternalSourceFromSecurityGroupParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRemoveExternalSourceFromSecurityGroupParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveExternalSourceFromSecurityGroupParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveInstanceProtectionParams is parameters of remove-instance-protection operation.
type RemoveInstanceProtectionParams struct {
	ID uuid.UUID
}

func unpackRemoveInstanceProtectionParams(packed middleware.Parameters) (params RemoveInstanceProtectionParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRemoveInstanceProtectionParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveInstanceProtectionParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetDbaasKafkaUserPasswordParams is parameters of reset-dbaas-kafka-user-password operation.
type ResetDbaasKafkaUserPasswordParams struct {
	ServiceName DbaasServiceName
	Username    DbaasUserUsername
}

func unpackResetDbaasKafkaUserPasswordParams(packed middleware.Parameters) (params ResetDbaasKafkaUserPasswordParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(DbaasUserUsername)
	}
	return params
}

func decodeResetDbaasKafkaUserPasswordParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetDbaasKafkaUserPasswordParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ServiceName = DbaasServiceName(paramsDotServiceNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ServiceName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = DbaasUserUsername(paramsDotUsernameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Username.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetDbaasPostgresUserPasswordParams is parameters of reset-dbaas-postgres-user-password operation.
type ResetDbaasPostgresUserPasswordParams struct {
	ServiceName DbaasServiceName
	Username    DbaasUserUsername
}

func unpackResetDbaasPostgresUserPasswordParams(packed middleware.Parameters) (params ResetDbaasPostgresUserPasswordParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(DbaasUserUsername)
	}
	return params
}

func decodeResetDbaasPostgresUserPasswordParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetDbaasPostgresUserPasswordParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ServiceName = DbaasServiceName(paramsDotServiceNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ServiceName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = DbaasUserUsername(paramsDotUsernameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Username.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetElasticIPFieldParams is parameters of reset-elastic-ip-field operation.
type ResetElasticIPFieldParams struct {
	ID    uuid.UUID
	Field ResetElasticIPFieldField
}

func unpackResetElasticIPFieldParams(packed middleware.Parameters) (params ResetElasticIPFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetElasticIPFieldField)
	}
	return params
}

func decodeResetElasticIPFieldParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetElasticIPFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetElasticIPFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetInstanceParams is parameters of reset-instance operation.
type ResetInstanceParams struct {
	ID uuid.UUID
}

func unpackResetInstanceParams(packed middleware.Parameters) (params ResetInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeResetInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params ResetInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetInstanceFieldParams is parameters of reset-instance-field operation.
type ResetInstanceFieldParams struct {
	ID    uuid.UUID
	Field ResetInstanceFieldField
}

func unpackResetInstanceFieldParams(packed middleware.Parameters) (params ResetInstanceFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetInstanceFieldField)
	}
	return params
}

func decodeResetInstanceFieldParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetInstanceFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetInstanceFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetInstancePoolFieldParams is parameters of reset-instance-pool-field operation.
type ResetInstancePoolFieldParams struct {
	ID    uuid.UUID
	Field ResetInstancePoolFieldField
}

func unpackResetInstancePoolFieldParams(packed middleware.Parameters) (params ResetInstancePoolFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetInstancePoolFieldField)
	}
	return params
}

func decodeResetInstancePoolFieldParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetInstancePoolFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetInstancePoolFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetLoadBalancerFieldParams is parameters of reset-load-balancer-field operation.
type ResetLoadBalancerFieldParams struct {
	ID    uuid.UUID
	Field ResetLoadBalancerFieldField
}

func unpackResetLoadBalancerFieldParams(packed middleware.Parameters) (params ResetLoadBalancerFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetLoadBalancerFieldField)
	}
	return params
}

func decodeResetLoadBalancerFieldParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetLoadBalancerFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetLoadBalancerFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetLoadBalancerServiceFieldParams is parameters of reset-load-balancer-service-field operation.
type ResetLoadBalancerServiceFieldParams struct {
	ID        uuid.UUID
	ServiceID uuid.UUID
	Field     ResetLoadBalancerServiceFieldField
}

func unpackResetLoadBalancerServiceFieldParams(packed middleware.Parameters) (params ResetLoadBalancerServiceFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "service-id",
			In:   "path",
		}
		params.ServiceID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetLoadBalancerServiceFieldField)
	}
	return params
}

func decodeResetLoadBalancerServiceFieldParams(args [3]string, argsEscaped bool, r *http.Request) (params ResetLoadBalancerServiceFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: service-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ServiceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetLoadBalancerServiceFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetPrivateNetworkFieldParams is parameters of reset-private-network-field operation.
type ResetPrivateNetworkFieldParams struct {
	ID    uuid.UUID
	Field ResetPrivateNetworkFieldField
}

func unpackResetPrivateNetworkFieldParams(packed middleware.Parameters) (params ResetPrivateNetworkFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetPrivateNetworkFieldField)
	}
	return params
}

func decodeResetPrivateNetworkFieldParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetPrivateNetworkFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetPrivateNetworkFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetSksClusterFieldParams is parameters of reset-sks-cluster-field operation.
type ResetSksClusterFieldParams struct {
	ID    uuid.UUID
	Field ResetSksClusterFieldField
}

func unpackResetSksClusterFieldParams(packed middleware.Parameters) (params ResetSksClusterFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetSksClusterFieldField)
	}
	return params
}

func decodeResetSksClusterFieldParams(args [2]string, argsEscaped bool, r *http.Request) (params ResetSksClusterFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetSksClusterFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResetSksNodepoolFieldParams is parameters of reset-sks-nodepool-field operation.
type ResetSksNodepoolFieldParams struct {
	ID            uuid.UUID
	SksNodepoolID uuid.UUID
	Field         ResetSksNodepoolFieldField
}

func unpackResetSksNodepoolFieldParams(packed middleware.Parameters) (params ResetSksNodepoolFieldParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "sks-nodepool-id",
			In:   "path",
		}
		params.SksNodepoolID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "field",
			In:   "path",
		}
		params.Field = packed[key].(ResetSksNodepoolFieldField)
	}
	return params
}

func decodeResetSksNodepoolFieldParams(args [3]string, argsEscaped bool, r *http.Request) (params ResetSksNodepoolFieldParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: sks-nodepool-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sks-nodepool-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.SksNodepoolID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sks-nodepool-id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: field.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "field",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Field = ResetSksNodepoolFieldField(c)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Field.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "field",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ResizeInstanceDiskParams is parameters of resize-instance-disk operation.
type ResizeInstanceDiskParams struct {
	ID uuid.UUID
}

func unpackResizeInstanceDiskParams(packed middleware.Parameters) (params ResizeInstanceDiskParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeResizeInstanceDiskParams(args [1]string, argsEscaped bool, r *http.Request) (params ResizeInstanceDiskParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RevealInstancePasswordParams is parameters of reveal-instance-password operation.
type RevealInstancePasswordParams struct {
	ID uuid.UUID
}

func unpackRevealInstancePasswordParams(packed middleware.Parameters) (params RevealInstancePasswordParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRevealInstancePasswordParams(args [1]string, argsEscaped bool, r *http.Request) (params RevealInstancePasswordParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RevertInstanceToSnapshotParams is parameters of revert-instance-to-snapshot operation.
type RevertInstanceToSnapshotParams struct {
	InstanceID uuid.UUID
}

func unpackRevertInstanceToSnapshotParams(packed middleware.Parameters) (params RevertInstanceToSnapshotParams) {
	{
		key := middleware.ParameterKey{
			Name: "instance-id",
			In:   "path",
		}
		params.InstanceID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRevertInstanceToSnapshotParams(args [1]string, argsEscaped bool, r *http.Request) (params RevertInstanceToSnapshotParams, _ error) {
	// Decode path: instance-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "instance-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.InstanceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "instance-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RevokeAccessKeyParams is parameters of revoke-access-key operation.
type RevokeAccessKeyParams struct {
	Key string
}

func unpackRevokeAccessKeyParams(packed middleware.Parameters) (params RevokeAccessKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "path",
		}
		params.Key = packed[key].(string)
	}
	return params
}

func decodeRevokeAccessKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params RevokeAccessKeyParams, _ error) {
	// Decode path: key.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Key = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RotateSksCcmCredentialsParams is parameters of rotate-sks-ccm-credentials operation.
type RotateSksCcmCredentialsParams struct {
	ID uuid.UUID
}

func unpackRotateSksCcmCredentialsParams(packed middleware.Parameters) (params RotateSksCcmCredentialsParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRotateSksCcmCredentialsParams(args [1]string, argsEscaped bool, r *http.Request) (params RotateSksCcmCredentialsParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RotateSksOperatorsCaParams is parameters of rotate-sks-operators-ca operation.
type RotateSksOperatorsCaParams struct {
	ID uuid.UUID
}

func unpackRotateSksOperatorsCaParams(packed middleware.Parameters) (params RotateSksOperatorsCaParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeRotateSksOperatorsCaParams(args [1]string, argsEscaped bool, r *http.Request) (params RotateSksOperatorsCaParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ScaleInstanceParams is parameters of scale-instance operation.
type ScaleInstanceParams struct {
	ID uuid.UUID
}

func unpackScaleInstanceParams(packed middleware.Parameters) (params ScaleInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeScaleInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params ScaleInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ScaleInstancePoolParams is parameters of scale-instance-pool operation.
type ScaleInstancePoolParams struct {
	ID uuid.UUID
}

func unpackScaleInstancePoolParams(packed middleware.Parameters) (params ScaleInstancePoolParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeScaleInstancePoolParams(args [1]string, argsEscaped bool, r *http.Request) (params ScaleInstancePoolParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ScaleSksNodepoolParams is parameters of scale-sks-nodepool operation.
type ScaleSksNodepoolParams struct {
	ID            uuid.UUID
	SksNodepoolID uuid.UUID
}

func unpackScaleSksNodepoolParams(packed middleware.Parameters) (params ScaleSksNodepoolParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "sks-nodepool-id",
			In:   "path",
		}
		params.SksNodepoolID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeScaleSksNodepoolParams(args [2]string, argsEscaped bool, r *http.Request) (params ScaleSksNodepoolParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: sks-nodepool-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "sks-nodepool-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.SksNodepoolID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sks-nodepool-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartDbaasKafkaMaintenanceParams is parameters of start-dbaas-kafka-maintenance operation.
type StartDbaasKafkaMaintenanceParams struct {
	Name DbaasServiceName
}

func unpackStartDbaasKafkaMaintenanceParams(packed middleware.Parameters) (params StartDbaasKafkaMaintenanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStartDbaasKafkaMaintenanceParams(args [1]string, argsEscaped bool, r *http.Request) (params StartDbaasKafkaMaintenanceParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartDbaasMysqlMaintenanceParams is parameters of start-dbaas-mysql-maintenance operation.
type StartDbaasMysqlMaintenanceParams struct {
	Name DbaasServiceName
}

func unpackStartDbaasMysqlMaintenanceParams(packed middleware.Parameters) (params StartDbaasMysqlMaintenanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStartDbaasMysqlMaintenanceParams(args [1]string, argsEscaped bool, r *http.Request) (params StartDbaasMysqlMaintenanceParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartDbaasOpensearchMaintenanceParams is parameters of start-dbaas-opensearch-maintenance operation.
type StartDbaasOpensearchMaintenanceParams struct {
	Name DbaasServiceName
}

func unpackStartDbaasOpensearchMaintenanceParams(packed middleware.Parameters) (params StartDbaasOpensearchMaintenanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStartDbaasOpensearchMaintenanceParams(args [1]string, argsEscaped bool, r *http.Request) (params StartDbaasOpensearchMaintenanceParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartDbaasPgMaintenanceParams is parameters of start-dbaas-pg-maintenance operation.
type StartDbaasPgMaintenanceParams struct {
	Name DbaasServiceName
}

func unpackStartDbaasPgMaintenanceParams(packed middleware.Parameters) (params StartDbaasPgMaintenanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStartDbaasPgMaintenanceParams(args [1]string, argsEscaped bool, r *http.Request) (params StartDbaasPgMaintenanceParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartDbaasRedisMaintenanceParams is parameters of start-dbaas-redis-maintenance operation.
type StartDbaasRedisMaintenanceParams struct {
	Name DbaasServiceName
}

func unpackStartDbaasRedisMaintenanceParams(packed middleware.Parameters) (params StartDbaasRedisMaintenanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStartDbaasRedisMaintenanceParams(args [1]string, argsEscaped bool, r *http.Request) (params StartDbaasRedisMaintenanceParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StartInstanceParams is parameters of start-instance operation.
type StartInstanceParams struct {
	ID uuid.UUID
}

func unpackStartInstanceParams(packed middleware.Parameters) (params StartInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeStartInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params StartInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StopDbaasMysqlMigrationParams is parameters of stop-dbaas-mysql-migration operation.
type StopDbaasMysqlMigrationParams struct {
	Name DbaasServiceName
}

func unpackStopDbaasMysqlMigrationParams(packed middleware.Parameters) (params StopDbaasMysqlMigrationParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStopDbaasMysqlMigrationParams(args [1]string, argsEscaped bool, r *http.Request) (params StopDbaasMysqlMigrationParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StopDbaasPgMigrationParams is parameters of stop-dbaas-pg-migration operation.
type StopDbaasPgMigrationParams struct {
	Name DbaasServiceName
}

func unpackStopDbaasPgMigrationParams(packed middleware.Parameters) (params StopDbaasPgMigrationParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStopDbaasPgMigrationParams(args [1]string, argsEscaped bool, r *http.Request) (params StopDbaasPgMigrationParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StopDbaasRedisMigrationParams is parameters of stop-dbaas-redis-migration operation.
type StopDbaasRedisMigrationParams struct {
	Name DbaasServiceName
}

func unpackStopDbaasRedisMigrationParams(packed middleware.Parameters) (params StopDbaasRedisMigrationParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeStopDbaasRedisMigrationParams(args [1]string, argsEscaped bool, r *http.Request) (params StopDbaasRedisMigrationParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StopInstanceParams is parameters of stop-instance operation.
type StopInstanceParams struct {
	ID uuid.UUID
}

func unpackStopInstanceParams(packed middleware.Parameters) (params StopInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeStopInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params StopInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDNSDomainRecordParams is parameters of update-dns-domain-record operation.
type UpdateDNSDomainRecordParams struct {
	DomainID uuid.UUID
	RecordID uuid.UUID
}

func unpackUpdateDNSDomainRecordParams(packed middleware.Parameters) (params UpdateDNSDomainRecordParams) {
	{
		key := middleware.ParameterKey{
			Name: "domain-id",
			In:   "path",
		}
		params.DomainID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "record-id",
			In:   "path",
		}
		params.RecordID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateDNSDomainRecordParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateDNSDomainRecordParams, _ error) {
	// Decode path: domain-id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "domain-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.DomainID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "domain-id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: record-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "record-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.RecordID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "record-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDbaasIntegrationParams is parameters of update-dbaas-integration operation.
type UpdateDbaasIntegrationParams struct {
	ID uuid.UUID
}

func unpackUpdateDbaasIntegrationParams(packed middleware.Parameters) (params UpdateDbaasIntegrationParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateDbaasIntegrationParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateDbaasIntegrationParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDbaasPostgresAllowReplicationParams is parameters of update-dbaas-postgres-allow-replication operation.
type UpdateDbaasPostgresAllowReplicationParams struct {
	ServiceName DbaasServiceName
	Username    DbaasUserUsername
}

func unpackUpdateDbaasPostgresAllowReplicationParams(packed middleware.Parameters) (params UpdateDbaasPostgresAllowReplicationParams) {
	{
		key := middleware.ParameterKey{
			Name: "service-name",
			In:   "path",
		}
		params.ServiceName = packed[key].(DbaasServiceName)
	}
	{
		key := middleware.ParameterKey{
			Name: "username",
			In:   "path",
		}
		params.Username = packed[key].(DbaasUserUsername)
	}
	return params
}

func decodeUpdateDbaasPostgresAllowReplicationParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateDbaasPostgresAllowReplicationParams, _ error) {
	// Decode path: service-name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotServiceNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotServiceNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ServiceName = DbaasServiceName(paramsDotServiceNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.ServiceName.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-name",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: username.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "username",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotUsernameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotUsernameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Username = DbaasUserUsername(paramsDotUsernameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Username.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "username",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDbaasServiceKafkaParams is parameters of update-dbaas-service-kafka operation.
type UpdateDbaasServiceKafkaParams struct {
	Name DbaasServiceName
}

func unpackUpdateDbaasServiceKafkaParams(packed middleware.Parameters) (params UpdateDbaasServiceKafkaParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeUpdateDbaasServiceKafkaParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateDbaasServiceKafkaParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDbaasServiceMysqlParams is parameters of update-dbaas-service-mysql operation.
type UpdateDbaasServiceMysqlParams struct {
	Name DbaasServiceName
}

func unpackUpdateDbaasServiceMysqlParams(packed middleware.Parameters) (params UpdateDbaasServiceMysqlParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeUpdateDbaasServiceMysqlParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateDbaasServiceMysqlParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDbaasServiceOpensearchParams is parameters of update-dbaas-service-opensearch operation.
type UpdateDbaasServiceOpensearchParams struct {
	Name DbaasServiceName
}

func unpackUpdateDbaasServiceOpensearchParams(packed middleware.Parameters) (params UpdateDbaasServiceOpensearchParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeUpdateDbaasServiceOpensearchParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateDbaasServiceOpensearchParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDbaasServicePgParams is parameters of update-dbaas-service-pg operation.
type UpdateDbaasServicePgParams struct {
	Name DbaasServiceName
}

func unpackUpdateDbaasServicePgParams(packed middleware.Parameters) (params UpdateDbaasServicePgParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeUpdateDbaasServicePgParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateDbaasServicePgParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDbaasServiceRedisParams is parameters of update-dbaas-service-redis operation.
type UpdateDbaasServiceRedisParams struct {
	Name DbaasServiceName
}

func unpackUpdateDbaasServiceRedisParams(packed middleware.Parameters) (params UpdateDbaasServiceRedisParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "path",
		}
		params.Name = packed[key].(DbaasServiceName)
	}
	return params
}

func decodeUpdateDbaasServiceRedisParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateDbaasServiceRedisParams, _ error) {
	// Decode path: name.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "name",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name = DbaasServiceName(paramsDotNameVal)
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := params.Name.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateElasticIPParams is parameters of update-elastic-ip operation.
type UpdateElasticIPParams struct {
	ID uuid.UUID
}

func unpackUpdateElasticIPParams(packed middleware.Parameters) (params UpdateElasticIPParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateElasticIPParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateElasticIPParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateIamRoleParams is parameters of update-iam-role operation.
type UpdateIamRoleParams struct {
	ID uuid.UUID
}

func unpackUpdateIamRoleParams(packed middleware.Parameters) (params UpdateIamRoleParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateIamRoleParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateIamRoleParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateIamRolePolicyParams is parameters of update-iam-role-policy operation.
type UpdateIamRolePolicyParams struct {
	ID uuid.UUID
}

func unpackUpdateIamRolePolicyParams(packed middleware.Parameters) (params UpdateIamRolePolicyParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateIamRolePolicyParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateIamRolePolicyParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateInstanceParams is parameters of update-instance operation.
type UpdateInstanceParams struct {
	ID uuid.UUID
}

func unpackUpdateInstanceParams(packed middleware.Parameters) (params UpdateInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateLoadBalancerParams is parameters of update-load-balancer operation.
type UpdateLoadBalancerParams struct {
	ID uuid.UUID
}

func unpackUpdateLoadBalancerParams(packed middleware.Parameters) (params UpdateLoadBalancerParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateLoadBalancerParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateLoadBalancerParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateLoadBalancerServiceParams is parameters of update-load-balancer-service operation.
type UpdateLoadBalancerServiceParams struct {
	ID        uuid.UUID
	ServiceID uuid.UUID
}

func unpackUpdateLoadBalancerServiceParams(packed middleware.Parameters) (params UpdateLoadBalancerServiceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	{
		key := middleware.ParameterKey{
			Name: "service-id",
			In:   "path",
		}
		params.ServiceID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateLoadBalancerServiceParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateLoadBalancerServiceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: service-id.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "service-id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ServiceID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "service-id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdatePrivateNetworkParams is parameters of update-private-network operation.
type UpdatePrivateNetworkParams struct {
	ID uuid.UUID
}

func unpackUpdatePrivateNetworkParams(packed middleware.Parameters) (params UpdatePrivateNetworkParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdatePrivateNetworkParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdatePrivateNetworkParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateReverseDNSElasticIPParams is parameters of update-reverse-dns-elastic-ip operation.
type UpdateReverseDNSElasticIPParams struct {
	ID uuid.UUID
}

func unpackUpdateReverseDNSElasticIPParams(packed middleware.Parameters) (params UpdateReverseDNSElasticIPParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateReverseDNSElasticIPParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateReverseDNSElasticIPParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateReverseDNSInstanceParams is parameters of update-reverse-dns-instance operation.
type UpdateReverseDNSInstanceParams struct {
	ID uuid.UUID
}

func unpackUpdateReverseDNSInstanceParams(packed middleware.Parameters) (params UpdateReverseDNSInstanceParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateReverseDNSInstanceParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateReverseDNSInstanceParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateSksClusterParams is parameters of update-sks-cluster operation.
type UpdateSksClusterParams struct {
	ID uuid.UUID
}

func unpackUpdateSksClusterParams(packed middleware.Parameters) (params UpdateSksClusterParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateSksClusterParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateSksClusterParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateTemplateParams is parameters of update-template operation.
type UpdateTemplateParams struct {
	ID uuid.UUID
}

func unpackUpdateTemplateParams(packed middleware.Parameters) (params UpdateTemplateParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpdateTemplateParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateTemplateParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpgradeSksClusterParams is parameters of upgrade-sks-cluster operation.
type UpgradeSksClusterParams struct {
	ID uuid.UUID
}

func unpackUpgradeSksClusterParams(packed middleware.Parameters) (params UpgradeSksClusterParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpgradeSksClusterParams(args [1]string, argsEscaped bool, r *http.Request) (params UpgradeSksClusterParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpgradeSksClusterServiceLevelParams is parameters of upgrade-sks-cluster-service-level operation.
type UpgradeSksClusterServiceLevelParams struct {
	ID uuid.UUID
}

func unpackUpgradeSksClusterServiceLevelParams(packed middleware.Parameters) (params UpgradeSksClusterServiceLevelParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(uuid.UUID)
	}
	return params
}

func decodeUpgradeSksClusterServiceLevelParams(args [1]string, argsEscaped bool, r *http.Request) (params UpgradeSksClusterServiceLevelParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToUUID(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
