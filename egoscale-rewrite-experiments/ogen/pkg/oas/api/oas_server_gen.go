// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddExternalSourceToSecurityGroup implements add-external-source-to-security-group operation.
	//
	// Add an external source as a member of a Security Group.
	//
	// PUT /security-group/{id}:add-source
	AddExternalSourceToSecurityGroup(ctx context.Context, req *AddExternalSourceToSecurityGroupReq, params AddExternalSourceToSecurityGroupParams) (*Operation, error)
	// AddInstanceProtection implements add-instance-protection operation.
	//
	// Set instance destruction protection.
	//
	// PUT /instance/{id}:add-protection
	AddInstanceProtection(ctx context.Context, params AddInstanceProtectionParams) error
	// AddRuleToSecurityGroup implements add-rule-to-security-group operation.
	//
	// Create a Security Group rule.
	//
	// POST /security-group/{id}/rules
	AddRuleToSecurityGroup(ctx context.Context, req *AddRuleToSecurityGroupReq, params AddRuleToSecurityGroupParams) (*Operation, error)
	// AttachInstanceToPrivateNetwork implements attach-instance-to-private-network operation.
	//
	// Attach a Compute instance to a Private Network.
	//
	// PUT /private-network/{id}:attach
	AttachInstanceToPrivateNetwork(ctx context.Context, req *AttachInstanceToPrivateNetworkReq, params AttachInstanceToPrivateNetworkParams) (*Operation, error)
	// CopyTemplate implements copy-template operation.
	//
	// Copy a Template from a zone to another.
	//
	// POST /template/{id}
	CopyTemplate(ctx context.Context, req *CopyTemplateReq, params CopyTemplateParams) (*Operation, error)
	// CreateAPIKey implements create-api-key operation.
	//
	// Create a new v3 API key.
	//
	// POST /api-key
	CreateAPIKey(ctx context.Context, req *CreateAPIKeyReq) (*IamAPIKeyCreated, error)
	// CreateAccessKey implements create-access-key operation.
	//
	// This operation creates a new IAM Access Key, which can either be restricted to specific API
	// operations or unrestricted. The corresponding secret is only available in the response returned by
	// this operation, the caller must take care of storing it safely as there is no other way to
	// retrieve it.
	//
	// POST /access-key
	CreateAccessKey(ctx context.Context, req *CreateAccessKeyReq) (*AccessKey, error)
	// CreateAntiAffinityGroup implements create-anti-affinity-group operation.
	//
	// Create an Anti-affinity Group.
	//
	// POST /anti-affinity-group
	CreateAntiAffinityGroup(ctx context.Context, req *CreateAntiAffinityGroupReq) (*Operation, error)
	// CreateDNSDomain implements create-dns-domain operation.
	//
	// Create DNS domain.
	//
	// POST /dns-domain
	CreateDNSDomain(ctx context.Context, req *CreateDNSDomainReq) (*DNSDomain, error)
	// CreateDNSDomainRecord implements create-dns-domain-record operation.
	//
	// Create DNS domain record.
	//
	// POST /dns-domain/{domain-id}/record
	CreateDNSDomainRecord(ctx context.Context, req *CreateDNSDomainRecordReq, params CreateDNSDomainRecordParams) (*Operation, error)
	// CreateDbaasIntegration implements create-dbaas-integration operation.
	//
	// Create a new DBaaS integration between two services.
	//
	// POST /dbaas-integration
	CreateDbaasIntegration(ctx context.Context, req *CreateDbaasIntegrationReq) (*Operation, error)
	// CreateDbaasKafkaSchemaRegistryACLConfig implements create-dbaas-kafka-schema-registry-acl-config operation.
	//
	// Add a Kafka Schema Registry ACL entry.
	//
	// POST /dbaas-kafka/{name}/schema-registry/acl-config
	CreateDbaasKafkaSchemaRegistryACLConfig(ctx context.Context, req *DbaasKafkaSchemaRegistryACLEntry, params CreateDbaasKafkaSchemaRegistryACLConfigParams) (*Operation, error)
	// CreateDbaasKafkaTopicACLConfig implements create-dbaas-kafka-topic-acl-config operation.
	//
	// Add a Kafka topic ACL entry.
	//
	// POST /dbaas-kafka/{name}/topic/acl-config
	CreateDbaasKafkaTopicACLConfig(ctx context.Context, req *DbaasKafkaTopicACLEntry, params CreateDbaasKafkaTopicACLConfigParams) (*Operation, error)
	// CreateDbaasKafkaUser implements create-dbaas-kafka-user operation.
	//
	// Create a DBaaS Kafka user.
	//
	// POST /dbaas-kafka/{service-name}/user
	CreateDbaasKafkaUser(ctx context.Context, req *CreateDbaasKafkaUserReq, params CreateDbaasKafkaUserParams) (*Operation, error)
	// CreateDbaasPostgresUser implements create-dbaas-postgres-user operation.
	//
	// Create a DBaaS Postgres user.
	//
	// POST /dbaas-postgres/{service-name}/user
	CreateDbaasPostgresUser(ctx context.Context, req *CreateDbaasPostgresUserReq, params CreateDbaasPostgresUserParams) (*Operation, error)
	// CreateDbaasServiceKafka implements create-dbaas-service-kafka operation.
	//
	// Create a DBaaS Kafka service.
	//
	// POST /dbaas-kafka/{name}
	CreateDbaasServiceKafka(ctx context.Context, req *CreateDbaasServiceKafkaReq, params CreateDbaasServiceKafkaParams) (*Operation, error)
	// CreateDbaasServiceMysql implements create-dbaas-service-mysql operation.
	//
	// Create a DBaaS MySQL service.
	//
	// POST /dbaas-mysql/{name}
	CreateDbaasServiceMysql(ctx context.Context, req *CreateDbaasServiceMysqlReq, params CreateDbaasServiceMysqlParams) (*Operation, error)
	// CreateDbaasServiceOpensearch implements create-dbaas-service-opensearch operation.
	//
	// Create a DBaaS OpenSearch service.
	//
	// POST /dbaas-opensearch/{name}
	CreateDbaasServiceOpensearch(ctx context.Context, req *CreateDbaasServiceOpensearchReq, params CreateDbaasServiceOpensearchParams) (*Operation, error)
	// CreateDbaasServicePg implements create-dbaas-service-pg operation.
	//
	// Create a DBaaS PostgreSQL service.
	//
	// POST /dbaas-postgres/{name}
	CreateDbaasServicePg(ctx context.Context, req *CreateDbaasServicePgReq, params CreateDbaasServicePgParams) (*Operation, error)
	// CreateDbaasServiceRedis implements create-dbaas-service-redis operation.
	//
	// Create a DBaaS Redis service.
	//
	// POST /dbaas-redis/{name}
	CreateDbaasServiceRedis(ctx context.Context, req *CreateDbaasServiceRedisReq, params CreateDbaasServiceRedisParams) (*Operation, error)
	// CreateDbaasTaskMigrationCheck implements create-dbaas-task-migration-check operation.
	//
	// Create a DBaaS task to check migration.
	//
	// POST /dbaas-task-migration-check/{service}
	CreateDbaasTaskMigrationCheck(ctx context.Context, req *CreateDbaasTaskMigrationCheckReq, params CreateDbaasTaskMigrationCheckParams) (*Operation, error)
	// CreateElasticIP implements create-elastic-ip operation.
	//
	// Create an Elastic IP.
	//
	// POST /elastic-ip
	CreateElasticIP(ctx context.Context, req *CreateElasticIPReq) (*Operation, error)
	// CreateIamRole implements create-iam-role operation.
	//
	// Create IAM Role.
	//
	// POST /iam-role
	CreateIamRole(ctx context.Context, req *CreateIamRoleReq) (*Operation, error)
	// CreateLoadBalancer implements create-load-balancer operation.
	//
	// Create a Load Balancer.
	//
	// POST /load-balancer
	CreateLoadBalancer(ctx context.Context, req *CreateLoadBalancerReq) (*Operation, error)
	// CreatePrivateNetwork implements create-private-network operation.
	//
	// Create a Private Network.
	//
	// POST /private-network
	CreatePrivateNetwork(ctx context.Context, req *CreatePrivateNetworkReq) (*Operation, error)
	// CreateSecurityGroup implements create-security-group operation.
	//
	// Create a Security Group.
	//
	// POST /security-group
	CreateSecurityGroup(ctx context.Context, req *CreateSecurityGroupReq) (*Operation, error)
	// CreateSksCluster implements create-sks-cluster operation.
	//
	// Create an SKS cluster.
	//
	// POST /sks-cluster
	CreateSksCluster(ctx context.Context, req *CreateSksClusterReq) (*Operation, error)
	// CreateSnapshot implements create-snapshot operation.
	//
	// Create a Snapshot of a Compute instance.
	//
	// POST /instance/{id}:create-snapshot
	CreateSnapshot(ctx context.Context, params CreateSnapshotParams) (*Operation, error)
	// DeleteAPIKey implements delete-api-key operation.
	//
	// Delete a v3 API key.
	//
	// DELETE /api-key/{id}
	DeleteAPIKey(ctx context.Context, params DeleteAPIKeyParams) (*Operation, error)
	// DeleteAntiAffinityGroup implements delete-anti-affinity-group operation.
	//
	// Delete an Anti-affinity Group.
	//
	// DELETE /anti-affinity-group/{id}
	DeleteAntiAffinityGroup(ctx context.Context, params DeleteAntiAffinityGroupParams) (*Operation, error)
	// DeleteDNSDomain implements delete-dns-domain operation.
	//
	// Delete DNS Domain.
	//
	// DELETE /dns-domain/{id}
	DeleteDNSDomain(ctx context.Context, params DeleteDNSDomainParams) (*Operation, error)
	// DeleteDNSDomainRecord implements delete-dns-domain-record operation.
	//
	// Delete DNS domain record.
	//
	// DELETE /dns-domain/{domain-id}/record/{record-id}
	DeleteDNSDomainRecord(ctx context.Context, params DeleteDNSDomainRecordParams) (*Operation, error)
	// DeleteDbaasIntegration implements delete-dbaas-integration operation.
	//
	// Delete a DBaaS Integration.
	//
	// DELETE /dbaas-integration/{id}
	DeleteDbaasIntegration(ctx context.Context, params DeleteDbaasIntegrationParams) (*Operation, error)
	// DeleteDbaasKafkaSchemaRegistryACLConfig implements delete-dbaas-kafka-schema-registry-acl-config operation.
	//
	// Delete a Kafka ACL entry.
	//
	// DELETE /dbaas-kafka/{name}/schema-registry/acl-config/{acl-id}
	DeleteDbaasKafkaSchemaRegistryACLConfig(ctx context.Context, params DeleteDbaasKafkaSchemaRegistryACLConfigParams) (*Operation, error)
	// DeleteDbaasKafkaTopicACLConfig implements delete-dbaas-kafka-topic-acl-config operation.
	//
	// Delete a Kafka ACL entry.
	//
	// DELETE /dbaas-kafka/{name}/topic/acl-config/{acl-id}
	DeleteDbaasKafkaTopicACLConfig(ctx context.Context, params DeleteDbaasKafkaTopicACLConfigParams) (*Operation, error)
	// DeleteDbaasKafkaUser implements delete-dbaas-kafka-user operation.
	//
	// Delete a DBaaS kafka user.
	//
	// DELETE /dbaas-kafka/{service-name}/user/{username}
	DeleteDbaasKafkaUser(ctx context.Context, params DeleteDbaasKafkaUserParams) (*Operation, error)
	// DeleteDbaasPostgresUser implements delete-dbaas-postgres-user operation.
	//
	// Delete a DBaaS Postgres user.
	//
	// DELETE /dbaas-postgres/{service-name}/user/{username}
	DeleteDbaasPostgresUser(ctx context.Context, params DeleteDbaasPostgresUserParams) (*Operation, error)
	// DeleteDbaasService implements delete-dbaas-service operation.
	//
	// Delete a DBaaS service.
	//
	// DELETE /dbaas-service/{name}
	DeleteDbaasService(ctx context.Context, params DeleteDbaasServiceParams) (*Operation, error)
	// DeleteElasticIP implements delete-elastic-ip operation.
	//
	// Delete an Elastic IP.
	//
	// DELETE /elastic-ip/{id}
	DeleteElasticIP(ctx context.Context, params DeleteElasticIPParams) (*Operation, error)
	// DeleteIamRole implements delete-iam-role operation.
	//
	// Delete IAM Role.
	//
	// DELETE /iam-role/{id}
	DeleteIamRole(ctx context.Context, params DeleteIamRoleParams) (*Operation, error)
	// DeleteInstance implements delete-instance operation.
	//
	// Delete a Compute instance.
	//
	// DELETE /instance/{id}
	DeleteInstance(ctx context.Context, params DeleteInstanceParams) (*Operation, error)
	// DeleteInstancePool implements delete-instance-pool operation.
	//
	// Delete an Instance Pool.
	//
	// DELETE /instance-pool/{id}
	DeleteInstancePool(ctx context.Context, params DeleteInstancePoolParams) (*Operation, error)
	// DeleteLoadBalancer implements delete-load-balancer operation.
	//
	// Delete a Load Balancer.
	//
	// DELETE /load-balancer/{id}
	DeleteLoadBalancer(ctx context.Context, params DeleteLoadBalancerParams) (*Operation, error)
	// DeleteLoadBalancerService implements delete-load-balancer-service operation.
	//
	// Delete a Load Balancer Service.
	//
	// DELETE /load-balancer/{id}/service/{service-id}
	DeleteLoadBalancerService(ctx context.Context, params DeleteLoadBalancerServiceParams) (*Operation, error)
	// DeletePrivateNetwork implements delete-private-network operation.
	//
	// Delete a Private Network.
	//
	// DELETE /private-network/{id}
	DeletePrivateNetwork(ctx context.Context, params DeletePrivateNetworkParams) (*Operation, error)
	// DeleteReverseDNSElasticIP implements delete-reverse-dns-elastic-ip operation.
	//
	// Delete the PTR DNS record for an elastic IP.
	//
	// DELETE /reverse-dns/elastic-ip/{id}
	DeleteReverseDNSElasticIP(ctx context.Context, params DeleteReverseDNSElasticIPParams) (*Operation, error)
	// DeleteReverseDNSInstance implements delete-reverse-dns-instance operation.
	//
	// Delete the PTR DNS record for an instance.
	//
	// DELETE /reverse-dns/instance/{id}
	DeleteReverseDNSInstance(ctx context.Context, params DeleteReverseDNSInstanceParams) (*Operation, error)
	// DeleteRuleFromSecurityGroup implements delete-rule-from-security-group operation.
	//
	// Delete a Security Group rule.
	//
	// DELETE /security-group/{id}/rules/{rule-id}
	DeleteRuleFromSecurityGroup(ctx context.Context, params DeleteRuleFromSecurityGroupParams) (*Operation, error)
	// DeleteSSHKey implements delete-ssh-key operation.
	//
	// Delete a SSH key.
	//
	// DELETE /ssh-key/{name}
	DeleteSSHKey(ctx context.Context, params DeleteSSHKeyParams) (*Operation, error)
	// DeleteSecurityGroup implements delete-security-group operation.
	//
	// Delete a Security Group.
	//
	// DELETE /security-group/{id}
	DeleteSecurityGroup(ctx context.Context, params DeleteSecurityGroupParams) (*Operation, error)
	// DeleteSksCluster implements delete-sks-cluster operation.
	//
	// Delete an SKS cluster.
	//
	// DELETE /sks-cluster/{id}
	DeleteSksCluster(ctx context.Context, params DeleteSksClusterParams) (*Operation, error)
	// DeleteSksNodepool implements delete-sks-nodepool operation.
	//
	// Delete an SKS Nodepool.
	//
	// DELETE /sks-cluster/{id}/nodepool/{sks-nodepool-id}
	DeleteSksNodepool(ctx context.Context, params DeleteSksNodepoolParams) (*Operation, error)
	// DeleteSnapshot implements delete-snapshot operation.
	//
	// Delete a Snapshot.
	//
	// DELETE /snapshot/{id}
	DeleteSnapshot(ctx context.Context, params DeleteSnapshotParams) (*Operation, error)
	// DeleteTemplate implements delete-template operation.
	//
	// Delete a Template.
	//
	// DELETE /template/{id}
	DeleteTemplate(ctx context.Context, params DeleteTemplateParams) (*Operation, error)
	// EvictInstancePoolMembers implements evict-instance-pool-members operation.
	//
	// This operation evicts the specified Compute instances member from the Instance Pool, shrinking it
	// to `&lt;current pool size&gt; - &lt;# evicted members&gt;`.
	//
	// PUT /instance-pool/{id}:evict
	EvictInstancePoolMembers(ctx context.Context, req *EvictInstancePoolMembersReq, params EvictInstancePoolMembersParams) (*Operation, error)
	// EvictSksNodepoolMembers implements evict-sks-nodepool-members operation.
	//
	// This operation evicts the specified Compute instances member from the Nodepool, shrinking it to
	// `&lt;current nodepool size&gt; - &lt;# evicted members&gt;`.
	//
	// PUT /sks-cluster/{id}/nodepool/{sks-nodepool-id}:evict
	EvictSksNodepoolMembers(ctx context.Context, req *EvictSksNodepoolMembersReq, params EvictSksNodepoolMembersParams) (*Operation, error)
	// ExportSnapshot implements export-snapshot operation.
	//
	// Export a Snapshot.
	//
	// POST /snapshot/{id}:export
	ExportSnapshot(ctx context.Context, params ExportSnapshotParams) (*Operation, error)
	// GenerateSksClusterKubeconfig implements generate-sks-cluster-kubeconfig operation.
	//
	// This operation returns a Kubeconfig file encoded in base64.
	//
	// POST /sks-cluster-kubeconfig/{id}
	GenerateSksClusterKubeconfig(ctx context.Context, req *SksKubeconfigRequest, params GenerateSksClusterKubeconfigParams) (*GenerateSksClusterKubeconfigOK, error)
	// GetAPIKey implements get-api-key operation.
	//
	// Get v3 API key.
	//
	// GET /api-key/{id}
	GetAPIKey(ctx context.Context, params GetAPIKeyParams) (*IamAPIKey, error)
	// GetAccessKey implements get-access-key operation.
	//
	// Retrieve IAM Access Key details.
	//
	// GET /access-key/{key}
	GetAccessKey(ctx context.Context, params GetAccessKeyParams) (*AccessKey, error)
	// GetDNSDomain implements get-dns-domain operation.
	//
	// Retrieve DNS domain details.
	//
	// GET /dns-domain/{id}
	GetDNSDomain(ctx context.Context, params GetDNSDomainParams) (*DNSDomain, error)
	// GetDNSDomainRecord implements get-dns-domain-record operation.
	//
	// Retrieve DNS domain record details.
	//
	// GET /dns-domain/{domain-id}/record/{record-id}
	GetDNSDomainRecord(ctx context.Context, params GetDNSDomainRecordParams) (*DNSDomainRecord, error)
	// GetDNSDomainZoneFile implements get-dns-domain-zone-file operation.
	//
	// Retrieve DNS domain zone file.
	//
	// GET /dns-domain/{id}/zone
	GetDNSDomainZoneFile(ctx context.Context, params GetDNSDomainZoneFileParams) (*GetDNSDomainZoneFileOK, error)
	// GetDbaasCaCertificate implements get-dbaas-ca-certificate operation.
	//
	// Returns a CA Certificate required to reach a DBaaS service through a TLS-protected connection.
	//
	// GET /dbaas-ca-certificate
	GetDbaasCaCertificate(ctx context.Context) (*GetDbaasCaCertificateOK, error)
	// GetDbaasIntegration implements get-dbaas-integration operation.
	//
	// Get a DBaaS Integration.
	//
	// GET /dbaas-integration/{id}
	GetDbaasIntegration(ctx context.Context, params GetDbaasIntegrationParams) (*DbaasIntegration, error)
	// GetDbaasKafkaACLConfig implements get-dbaas-kafka-acl-config operation.
	//
	// Get DBaaS kafka ACL configuration.
	//
	// GET /dbaas-kafka/{name}/acl-config
	GetDbaasKafkaACLConfig(ctx context.Context, params GetDbaasKafkaACLConfigParams) (*DbaasKafkaAcls, error)
	// GetDbaasMigrationStatus implements get-dbaas-migration-status operation.
	//
	// Get a DBaaS migration status.
	//
	// GET /dbaas-migration-status/{name}
	GetDbaasMigrationStatus(ctx context.Context, params GetDbaasMigrationStatusParams) (*DbaasMigrationStatus, error)
	// GetDbaasServiceKafka implements get-dbaas-service-kafka operation.
	//
	// Get a DBaaS Kafka service.
	//
	// GET /dbaas-kafka/{name}
	GetDbaasServiceKafka(ctx context.Context, params GetDbaasServiceKafkaParams) (*DbaasServiceKafka, error)
	// GetDbaasServiceLogs implements get-dbaas-service-logs operation.
	//
	// Get logs of DBaaS service.
	//
	// POST /dbaas-service-logs/{service-name}
	GetDbaasServiceLogs(ctx context.Context, req *GetDbaasServiceLogsReq, params GetDbaasServiceLogsParams) (*DbaasServiceLogs, error)
	// GetDbaasServiceMetrics implements get-dbaas-service-metrics operation.
	//
	// Get metrics of DBaaS service.
	//
	// POST /dbaas-service-metrics/{service-name}
	GetDbaasServiceMetrics(ctx context.Context, req *GetDbaasServiceMetricsReq, params GetDbaasServiceMetricsParams) (*GetDbaasServiceMetricsOK, error)
	// GetDbaasServiceMysql implements get-dbaas-service-mysql operation.
	//
	// Get a DBaaS MySQL service.
	//
	// GET /dbaas-mysql/{name}
	GetDbaasServiceMysql(ctx context.Context, params GetDbaasServiceMysqlParams) (*DbaasServiceMysql, error)
	// GetDbaasServiceOpensearch implements get-dbaas-service-opensearch operation.
	//
	// Get a DBaaS OpenSearch service.
	//
	// GET /dbaas-opensearch/{name}
	GetDbaasServiceOpensearch(ctx context.Context, params GetDbaasServiceOpensearchParams) (*DbaasServiceOpensearch, error)
	// GetDbaasServicePg implements get-dbaas-service-pg operation.
	//
	// Get a DBaaS PostgreSQL service.
	//
	// GET /dbaas-postgres/{name}
	GetDbaasServicePg(ctx context.Context, params GetDbaasServicePgParams) (*DbaasServicePg, error)
	// GetDbaasServiceRedis implements get-dbaas-service-redis operation.
	//
	// Get a DBaaS Redis service.
	//
	// GET /dbaas-redis/{name}
	GetDbaasServiceRedis(ctx context.Context, params GetDbaasServiceRedisParams) (*DbaasServiceRedis, error)
	// GetDbaasServiceType implements get-dbaas-service-type operation.
	//
	// Get a DBaaS service type.
	//
	// GET /dbaas-service-type/{service-type-name}
	GetDbaasServiceType(ctx context.Context, params GetDbaasServiceTypeParams) (*DbaasServiceType, error)
	// GetDbaasSettingsKafka implements get-dbaas-settings-kafka operation.
	//
	// Get DBaaS Kafka settings.
	//
	// GET /dbaas-settings-kafka
	GetDbaasSettingsKafka(ctx context.Context) (*GetDbaasSettingsKafkaOK, error)
	// GetDbaasSettingsMysql implements get-dbaas-settings-mysql operation.
	//
	// Get DBaaS MySQL settings.
	//
	// GET /dbaas-settings-mysql
	GetDbaasSettingsMysql(ctx context.Context) (*GetDbaasSettingsMysqlOK, error)
	// GetDbaasSettingsOpensearch implements get-dbaas-settings-opensearch operation.
	//
	// Get DBaaS OpenSearch settings.
	//
	// GET /dbaas-settings-opensearch
	GetDbaasSettingsOpensearch(ctx context.Context) (*GetDbaasSettingsOpensearchOK, error)
	// GetDbaasSettingsPg implements get-dbaas-settings-pg operation.
	//
	// Get DBaaS PostgreSQL settings.
	//
	// GET /dbaas-settings-pg
	GetDbaasSettingsPg(ctx context.Context) (*GetDbaasSettingsPgOK, error)
	// GetDbaasSettingsRedis implements get-dbaas-settings-redis operation.
	//
	// Returns the default settings for Redis.
	//
	// GET /dbaas-settings-redis
	GetDbaasSettingsRedis(ctx context.Context) (*GetDbaasSettingsRedisOK, error)
	// GetDbaasTask implements get-dbaas-task operation.
	//
	// Get a DBaaS task.
	//
	// GET /dbaas-task/{service}/{id}
	GetDbaasTask(ctx context.Context, params GetDbaasTaskParams) (*GetDbaasTaskOK, error)
	// GetDeployTarget implements get-deploy-target operation.
	//
	// Retrieve Deploy Target details.
	//
	// GET /deploy-target/{id}
	GetDeployTarget(ctx context.Context, params GetDeployTargetParams) (*DeployTarget, error)
	// GetElasticIP implements get-elastic-ip operation.
	//
	// Retrieve Elastic IP details.
	//
	// GET /elastic-ip/{id}
	GetElasticIP(ctx context.Context, params GetElasticIPParams) (*ElasticIP, error)
	// GetIamOrganizationPolicy implements get-iam-organization-policy operation.
	//
	// Retrieve IAM Organization Policy.
	//
	// GET /iam-organization-policy
	GetIamOrganizationPolicy(ctx context.Context) ([]IamPolicy, error)
	// GetIamRole implements get-iam-role operation.
	//
	// Retrieve IAM Role.
	//
	// GET /iam-role/{id}
	GetIamRole(ctx context.Context, params GetIamRoleParams) (*IamRole, error)
	// GetInstanceType implements get-instance-type operation.
	//
	// Retrieve Instance Type details.
	//
	// GET /instance-type/{id}
	GetInstanceType(ctx context.Context, params GetInstanceTypeParams) (*InstanceType, error)
	// GetOperation implements get-operation operation.
	//
	// Retrieve Operation details.
	//
	// GET /operation/{id}
	GetOperation(ctx context.Context, params GetOperationParams) (*Operation, error)
	// GetPrivateNetwork implements get-private-network operation.
	//
	// Retrieve Private Network details.
	//
	// GET /private-network/{id}
	GetPrivateNetwork(ctx context.Context, params GetPrivateNetworkParams) (*PrivateNetwork, error)
	// GetQuota implements get-quota operation.
	//
	// Retrieve Resource Quota.
	//
	// GET /quota/{entity}
	GetQuota(ctx context.Context, params GetQuotaParams) (*Quota, error)
	// GetReverseDNSElasticIP implements get-reverse-dns-elastic-ip operation.
	//
	// Query the PTR DNS records for an elastic IP.
	//
	// GET /reverse-dns/elastic-ip/{id}
	GetReverseDNSElasticIP(ctx context.Context, params GetReverseDNSElasticIPParams) (*ReverseDNSRecord, error)
	// GetReverseDNSInstance implements get-reverse-dns-instance operation.
	//
	// Query the PTR DNS records for an instance.
	//
	// GET /reverse-dns/instance/{id}
	GetReverseDNSInstance(ctx context.Context, params GetReverseDNSInstanceParams) (*ReverseDNSRecord, error)
	// GetSSHKey implements get-ssh-key operation.
	//
	// Retrieve SSH key details.
	//
	// GET /ssh-key/{name}
	GetSSHKey(ctx context.Context, params GetSSHKeyParams) (*SSHKey, error)
	// GetSksClusterAuthorityCert implements get-sks-cluster-authority-cert operation.
	//
	// This operation returns the certificate for the given SKS cluster authority encoded in base64.
	//
	// GET /sks-cluster/{id}/authority/{authority}/cert
	GetSksClusterAuthorityCert(ctx context.Context, params GetSksClusterAuthorityCertParams) (*GetSksClusterAuthorityCertOK, error)
	// GetSosPresignedURL implements get-sos-presigned-url operation.
	//
	// Generates Presigned Download URL for SOS object.
	//
	// GET /sos/{bucket}/presigned-url
	GetSosPresignedURL(ctx context.Context, params GetSosPresignedURLParams) (*GetSosPresignedURLOK, error)
	// GetTemplate implements get-template operation.
	//
	// Retrieve Template details.
	//
	// GET /template/{id}
	GetTemplate(ctx context.Context, params GetTemplateParams) (*Template, error)
	// ListAPIKeys implements list-api-keys operation.
	//
	// List v3 API keys.
	//
	// GET /api-key
	ListAPIKeys(ctx context.Context) (*ListAPIKeysOK, error)
	// ListAccessKeyKnownOperations implements list-access-key-known-operations operation.
	//
	// Retrieve all known available IAM Access Key operations and associated tags.
	//
	// GET /access-key-known-operations
	ListAccessKeyKnownOperations(ctx context.Context) (*ListAccessKeyKnownOperationsOK, error)
	// ListAccessKeyOperations implements list-access-key-operations operation.
	//
	// Retrieve IAM Access Key operations and associated tags for the signing key.
	//
	// GET /access-key-operations
	ListAccessKeyOperations(ctx context.Context) (*ListAccessKeyOperationsOK, error)
	// ListAccessKeys implements list-access-keys operation.
	//
	// List IAM Access Keys.
	//
	// GET /access-key
	ListAccessKeys(ctx context.Context) (*ListAccessKeysOK, error)
	// ListDNSDomainRecords implements list-dns-domain-records operation.
	//
	// List DNS domain records.
	//
	// GET /dns-domain/{domain-id}/record
	ListDNSDomainRecords(ctx context.Context, params ListDNSDomainRecordsParams) (*ListDNSDomainRecordsOK, error)
	// ListDNSDomains implements list-dns-domains operation.
	//
	// List DNS domains.
	//
	// GET /dns-domain
	ListDNSDomains(ctx context.Context) (*ListDNSDomainsOK, error)
	// ListDbaasIntegrationSettings implements list-dbaas-integration-settings operation.
	//
	// Get DBaaS integration settings.
	//
	// GET /dbaas-integration-settings/{integration-type}/{source-type}/{dest-type}
	ListDbaasIntegrationSettings(ctx context.Context, params ListDbaasIntegrationSettingsParams) (*ListDbaasIntegrationSettingsOK, error)
	// ListDbaasIntegrationTypes implements list-dbaas-integration-types operation.
	//
	// Get DBaaS integration types.
	//
	// GET /dbaas-integration-types
	ListDbaasIntegrationTypes(ctx context.Context) (*ListDbaasIntegrationTypesOK, error)
	// ListDbaasServiceTypes implements list-dbaas-service-types operation.
	//
	// List available service types for DBaaS.
	//
	// GET /dbaas-service-type
	ListDbaasServiceTypes(ctx context.Context) (*ListDbaasServiceTypesOK, error)
	// ListDbaasServices implements list-dbaas-services operation.
	//
	// List DBaaS services.
	//
	// GET /dbaas-service
	ListDbaasServices(ctx context.Context) (*ListDbaasServicesOK, error)
	// ListDeployTargets implements list-deploy-targets operation.
	//
	// List Deploy Targets.
	//
	// GET /deploy-target
	ListDeployTargets(ctx context.Context) (*ListDeployTargetsOK, error)
	// ListElasticIps implements list-elastic-ips operation.
	//
	// List Elastic IPs.
	//
	// GET /elastic-ip
	ListElasticIps(ctx context.Context) (*ListElasticIpsOK, error)
	// ListEvents implements list-events operation.
	//
	// Retrieve Mutation Events for a given date range. Defaults to retrieving Events for the past 24
	// hours.
	// Both a `from` and `to` arguments can be specified to filter Events over a specific period.
	// Events will be the the most descriptive possible but not all fields are mandatory.
	//
	// GET /event
	ListEvents(ctx context.Context, params ListEventsParams) ([]Event, error)
	// ListIamRoles implements list-iam-roles operation.
	//
	// List IAM Roles.
	//
	// GET /iam-role
	ListIamRoles(ctx context.Context) (*ListIamRolesOK, error)
	// ListInstanceTypes implements list-instance-types operation.
	//
	// List Compute instance Types.
	//
	// GET /instance-type
	ListInstanceTypes(ctx context.Context) (*ListInstanceTypesOK, error)
	// ListPrivateNetworks implements list-private-networks operation.
	//
	// List Private Networks.
	//
	// GET /private-network
	ListPrivateNetworks(ctx context.Context) (*ListPrivateNetworksOK, error)
	// ListQuotas implements list-quotas operation.
	//
	// List Organization Quotas.
	//
	// GET /quota
	ListQuotas(ctx context.Context) (*ListQuotasOK, error)
	// ListSSHKeys implements list-ssh-keys operation.
	//
	// List SSH keys.
	//
	// GET /ssh-key
	ListSSHKeys(ctx context.Context) (*ListSSHKeysOK, error)
	// ListSksClusterDeprecatedResources implements list-sks-cluster-deprecated-resources operation.
	//
	// This operation returns the deprecated resources for a given cluster.
	//
	// GET /sks-cluster-deprecated-resources/{id}
	ListSksClusterDeprecatedResources(ctx context.Context, params ListSksClusterDeprecatedResourcesParams) ([]SksClusterDeprecatedResource, error)
	// ListSksClusterVersions implements list-sks-cluster-versions operation.
	//
	// List available versions for SKS clusters.
	//
	// GET /sks-cluster-version
	ListSksClusterVersions(ctx context.Context, params ListSksClusterVersionsParams) (*ListSksClusterVersionsOK, error)
	// ListSosBucketsUsage implements list-sos-buckets-usage operation.
	//
	// List SOS Buckets Usage.
	//
	// GET /sos-buckets-usage
	ListSosBucketsUsage(ctx context.Context) (*ListSosBucketsUsageOK, error)
	// ListTemplates implements list-templates operation.
	//
	// List Templates.
	//
	// GET /template
	ListTemplates(ctx context.Context, params ListTemplatesParams) (*ListTemplatesOK, error)
	// ListZones implements list-zones operation.
	//
	// List Zones.
	//
	// GET /zone
	ListZones(ctx context.Context) (*ListZonesOK, error)
	// PromoteSnapshotToTemplate implements promote-snapshot-to-template operation.
	//
	// Promote a Snapshot to a Template.
	//
	// POST /snapshot/{id}:promote
	PromoteSnapshotToTemplate(ctx context.Context, req *PromoteSnapshotToTemplateReq, params PromoteSnapshotToTemplateParams) (*Operation, error)
	// RebootInstance implements reboot-instance operation.
	//
	// Reboot a Compute instance.
	//
	// PUT /instance/{id}:reboot
	RebootInstance(ctx context.Context, params RebootInstanceParams) (*Operation, error)
	// RegisterSSHKey implements register-ssh-key operation.
	//
	// Import SSH key.
	//
	// POST /ssh-key
	RegisterSSHKey(ctx context.Context, req *RegisterSSHKeyReq) (*Operation, error)
	// RegisterTemplate implements register-template operation.
	//
	// Register a Template.
	//
	// POST /template
	RegisterTemplate(ctx context.Context, req *RegisterTemplateReq) (*Operation, error)
	// RemoveExternalSourceFromSecurityGroup implements remove-external-source-from-security-group operation.
	//
	// Remove an external source from a Security Group.
	//
	// PUT /security-group/{id}:remove-source
	RemoveExternalSourceFromSecurityGroup(ctx context.Context, req *RemoveExternalSourceFromSecurityGroupReq, params RemoveExternalSourceFromSecurityGroupParams) (*Operation, error)
	// RemoveInstanceProtection implements remove-instance-protection operation.
	//
	// Remove instance destruction protection.
	//
	// PUT /instance/{id}:remove-protection
	RemoveInstanceProtection(ctx context.Context, params RemoveInstanceProtectionParams) error
	// ResetDbaasKafkaUserPassword implements reset-dbaas-kafka-user-password operation.
	//
	// If no password is provided one will be generated automatically.
	//
	// PUT /dbaas-kafka/{service-name}/user/{username}/password/reset
	ResetDbaasKafkaUserPassword(ctx context.Context, req *ResetDbaasKafkaUserPasswordReq, params ResetDbaasKafkaUserPasswordParams) (*Operation, error)
	// ResetDbaasPostgresUserPassword implements reset-dbaas-postgres-user-password operation.
	//
	// If no password is provided one will be generated automatically.
	//
	// PUT /dbaas-postgres/{service-name}/user/{username}/password/reset
	ResetDbaasPostgresUserPassword(ctx context.Context, req *ResetDbaasPostgresUserPasswordReq, params ResetDbaasPostgresUserPasswordParams) (*Operation, error)
	// ResetElasticIPField implements reset-elastic-ip-field operation.
	//
	// Reset an Elastic IP field to its default value.
	//
	// DELETE /elastic-ip/{id}/{field}
	ResetElasticIPField(ctx context.Context, params ResetElasticIPFieldParams) (*Operation, error)
	// ResetInstance implements reset-instance operation.
	//
	// This operation re-installs a Compute instance to a base template. If target template is provided
	// it will be used to recreated instance from. Warning: the operation wipes all data stored on the
	// disk.
	//
	// PUT /instance/{id}:reset
	ResetInstance(ctx context.Context, req *ResetInstanceReq, params ResetInstanceParams) (*Operation, error)
	// ResetInstanceField implements reset-instance-field operation.
	//
	// Reset Instance field.
	//
	// DELETE /instance/{id}/{field}
	ResetInstanceField(ctx context.Context, params ResetInstanceFieldParams) (*Operation, error)
	// ResetInstancePoolField implements reset-instance-pool-field operation.
	//
	// Reset an Instance Pool field to its default value.
	//
	// DELETE /instance-pool/{id}/{field}
	ResetInstancePoolField(ctx context.Context, params ResetInstancePoolFieldParams) (*Operation, error)
	// ResetLoadBalancerField implements reset-load-balancer-field operation.
	//
	// Reset a Load Balancer field to its default value.
	//
	// DELETE /load-balancer/{id}/{field}
	ResetLoadBalancerField(ctx context.Context, params ResetLoadBalancerFieldParams) (*Operation, error)
	// ResetLoadBalancerServiceField implements reset-load-balancer-service-field operation.
	//
	// Reset a Load Balancer Service field to its default value.
	//
	// DELETE /load-balancer/{id}/service/{service-id}/{field}
	ResetLoadBalancerServiceField(ctx context.Context, params ResetLoadBalancerServiceFieldParams) (*Operation, error)
	// ResetPrivateNetworkField implements reset-private-network-field operation.
	//
	// Reset Private Network field.
	//
	// DELETE /private-network/{id}/{field}
	ResetPrivateNetworkField(ctx context.Context, params ResetPrivateNetworkFieldParams) (*Operation, error)
	// ResetSksClusterField implements reset-sks-cluster-field operation.
	//
	// Reset an SKS cluster field to its default value.
	//
	// DELETE /sks-cluster/{id}/{field}
	ResetSksClusterField(ctx context.Context, params ResetSksClusterFieldParams) (*Operation, error)
	// ResetSksNodepoolField implements reset-sks-nodepool-field operation.
	//
	// Reset an SKS Nodepool field to its default value.
	//
	// DELETE /sks-cluster/{id}/nodepool/{sks-nodepool-id}/{field}
	ResetSksNodepoolField(ctx context.Context, params ResetSksNodepoolFieldParams) (*Operation, error)
	// ResizeInstanceDisk implements resize-instance-disk operation.
	//
	// This operation resizes a Compute instance's disk volume. Note: the disk can only grow, cannot be
	// shrunk.
	//
	// PUT /instance/{id}:resize-disk
	ResizeInstanceDisk(ctx context.Context, req *ResizeInstanceDiskReq, params ResizeInstanceDiskParams) (*Operation, error)
	// RevealInstancePassword implements reveal-instance-password operation.
	//
	// Reveal the password used during instance creation or the latest password reset.
	// This is only available for VMs created against templates having the `password-enabled`
	// property set to `true`.
	// Passwords are transiently stored for at most 24 hours and intended to be retrieved shortly after
	// creation or resets.
	//
	// GET /instance/{id}:password
	RevealInstancePassword(ctx context.Context, params RevealInstancePasswordParams) (*InstancePassword, error)
	// RevertInstanceToSnapshot implements revert-instance-to-snapshot operation.
	//
	// This operation reverts the snapshot to the Compute instance volume, restoring stored data as it
	// was at the time of the snapshot.
	// The Compute instance must be previously stopped.
	//
	// POST /instance/{instance-id}:revert-snapshot
	RevertInstanceToSnapshot(ctx context.Context, req *RevertInstanceToSnapshotReq, params RevertInstanceToSnapshotParams) (*Operation, error)
	// RevokeAccessKey implements revoke-access-key operation.
	//
	// This operation revokes the specified IAM Access Key. Access Keys created by the revoked Access Key
	// will not be revoked.
	//
	// DELETE /access-key/{key}
	RevokeAccessKey(ctx context.Context, params RevokeAccessKeyParams) (*Operation, error)
	// RotateSksCcmCredentials implements rotate-sks-ccm-credentials operation.
	//
	// Rotate Exoscale CCM credentials.
	//
	// PUT /sks-cluster/{id}/rotate-ccm-credentials
	RotateSksCcmCredentials(ctx context.Context, params RotateSksCcmCredentialsParams) (*Operation, error)
	// RotateSksOperatorsCa implements rotate-sks-operators-ca operation.
	//
	// Rotate operators certificate authority.
	//
	// PUT /sks-cluster/{id}/rotate-operators-ca
	RotateSksOperatorsCa(ctx context.Context, params RotateSksOperatorsCaParams) (*Operation, error)
	// ScaleInstance implements scale-instance operation.
	//
	// This operation changes the Compute instance's type. Note: the new Instance Type must be within the
	// same family (e.g. a standard instance cannot be scaled to gpu2 or storage).
	//
	// PUT /instance/{id}:scale
	ScaleInstance(ctx context.Context, req *ScaleInstanceReq, params ScaleInstanceParams) (*Operation, error)
	// ScaleInstancePool implements scale-instance-pool operation.
	//
	// Scale an Instance Pool.
	//
	// PUT /instance-pool/{id}:scale
	ScaleInstancePool(ctx context.Context, req *ScaleInstancePoolReq, params ScaleInstancePoolParams) (*Operation, error)
	// ScaleSksNodepool implements scale-sks-nodepool operation.
	//
	// Scale a SKS Nodepool.
	//
	// PUT /sks-cluster/{id}/nodepool/{sks-nodepool-id}:scale
	ScaleSksNodepool(ctx context.Context, req *ScaleSksNodepoolReq, params ScaleSksNodepoolParams) (*Operation, error)
	// StartDbaasKafkaMaintenance implements start-dbaas-kafka-maintenance operation.
	//
	// Initiate Kafka maintenance update.
	//
	// PUT /dbaas-kafka/{name}/maintenance/start
	StartDbaasKafkaMaintenance(ctx context.Context, params StartDbaasKafkaMaintenanceParams) (*Operation, error)
	// StartDbaasMysqlMaintenance implements start-dbaas-mysql-maintenance operation.
	//
	// Initiate MySQL maintenance update.
	//
	// PUT /dbaas-mysql/{name}/maintenance/start
	StartDbaasMysqlMaintenance(ctx context.Context, params StartDbaasMysqlMaintenanceParams) (*Operation, error)
	// StartDbaasOpensearchMaintenance implements start-dbaas-opensearch-maintenance operation.
	//
	// Initiate OpenSearch maintenance update.
	//
	// PUT /dbaas-opensearch/{name}/maintenance/start
	StartDbaasOpensearchMaintenance(ctx context.Context, params StartDbaasOpensearchMaintenanceParams) (*Operation, error)
	// StartDbaasPgMaintenance implements start-dbaas-pg-maintenance operation.
	//
	// Initiate PostgreSQL maintenance update.
	//
	// PUT /dbaas-postgres/{name}/maintenance/start
	StartDbaasPgMaintenance(ctx context.Context, params StartDbaasPgMaintenanceParams) (*Operation, error)
	// StartDbaasRedisMaintenance implements start-dbaas-redis-maintenance operation.
	//
	// Initiate Redis maintenance update.
	//
	// PUT /dbaas-redis/{name}/maintenance/start
	StartDbaasRedisMaintenance(ctx context.Context, params StartDbaasRedisMaintenanceParams) (*Operation, error)
	// StartInstance implements start-instance operation.
	//
	// This operation starts a virtual machine, potentially using a rescue profile if specified.
	//
	// PUT /instance/{id}:start
	StartInstance(ctx context.Context, req *StartInstanceReq, params StartInstanceParams) (*Operation, error)
	// StopDbaasMysqlMigration implements stop-dbaas-mysql-migration operation.
	//
	// Stop a DBaaS MySQL migration.
	//
	// POST /dbaas-mysql/{name}/migration/stop
	StopDbaasMysqlMigration(ctx context.Context, params StopDbaasMysqlMigrationParams) (*Operation, error)
	// StopDbaasPgMigration implements stop-dbaas-pg-migration operation.
	//
	// Stop a DBaaS PostgreSQL migration.
	//
	// POST /dbaas-postgres/{name}/migration/stop
	StopDbaasPgMigration(ctx context.Context, params StopDbaasPgMigrationParams) (*Operation, error)
	// StopDbaasRedisMigration implements stop-dbaas-redis-migration operation.
	//
	// Stop a DBaaS Redis migration.
	//
	// POST /dbaas-redis/{name}/migration/stop
	StopDbaasRedisMigration(ctx context.Context, params StopDbaasRedisMigrationParams) (*Operation, error)
	// StopInstance implements stop-instance operation.
	//
	// Stop a Compute instance.
	//
	// PUT /instance/{id}:stop
	StopInstance(ctx context.Context, params StopInstanceParams) (*Operation, error)
	// UpdateDNSDomainRecord implements update-dns-domain-record operation.
	//
	// Update DNS domain record.
	//
	// PUT /dns-domain/{domain-id}/record/{record-id}
	UpdateDNSDomainRecord(ctx context.Context, req *UpdateDNSDomainRecordReq, params UpdateDNSDomainRecordParams) (*Operation, error)
	// UpdateDbaasIntegration implements update-dbaas-integration operation.
	//
	// Update a existing DBaaS integration.
	//
	// PUT /dbaas-integration/{id}
	UpdateDbaasIntegration(ctx context.Context, req *UpdateDbaasIntegrationReq, params UpdateDbaasIntegrationParams) (*Operation, error)
	// UpdateDbaasPostgresAllowReplication implements update-dbaas-postgres-allow-replication operation.
	//
	// Update access control for one service user.
	//
	// PUT /dbaas-postgres/{service-name}/user/{username}/allow-replication
	UpdateDbaasPostgresAllowReplication(ctx context.Context, req *UpdateDbaasPostgresAllowReplicationReq, params UpdateDbaasPostgresAllowReplicationParams) (*DbaasPostgresUsers, error)
	// UpdateDbaasServiceKafka implements update-dbaas-service-kafka operation.
	//
	// Update a DBaaS Kafka service.
	//
	// PUT /dbaas-kafka/{name}
	UpdateDbaasServiceKafka(ctx context.Context, req *UpdateDbaasServiceKafkaReq, params UpdateDbaasServiceKafkaParams) (*Operation, error)
	// UpdateDbaasServiceMysql implements update-dbaas-service-mysql operation.
	//
	// Update a DBaaS MySQL service.
	//
	// PUT /dbaas-mysql/{name}
	UpdateDbaasServiceMysql(ctx context.Context, req *UpdateDbaasServiceMysqlReq, params UpdateDbaasServiceMysqlParams) (*Operation, error)
	// UpdateDbaasServiceOpensearch implements update-dbaas-service-opensearch operation.
	//
	// Update a DBaaS OpenSearch service.
	//
	// PUT /dbaas-opensearch/{name}
	UpdateDbaasServiceOpensearch(ctx context.Context, req *UpdateDbaasServiceOpensearchReq, params UpdateDbaasServiceOpensearchParams) (*Operation, error)
	// UpdateDbaasServicePg implements update-dbaas-service-pg operation.
	//
	// Update a DBaaS PostgreSQL service.
	//
	// PUT /dbaas-postgres/{name}
	UpdateDbaasServicePg(ctx context.Context, req *UpdateDbaasServicePgReq, params UpdateDbaasServicePgParams) (*Operation, error)
	// UpdateDbaasServiceRedis implements update-dbaas-service-redis operation.
	//
	// Update a DBaaS Redis service.
	//
	// PUT /dbaas-redis/{name}
	UpdateDbaasServiceRedis(ctx context.Context, req *UpdateDbaasServiceRedisReq, params UpdateDbaasServiceRedisParams) (*Operation, error)
	// UpdateElasticIP implements update-elastic-ip operation.
	//
	// Update an Elastic IP.
	//
	// PUT /elastic-ip/{id}
	UpdateElasticIP(ctx context.Context, req *UpdateElasticIPReq, params UpdateElasticIPParams) (*Operation, error)
	// UpdateIamOrganizationPolicy implements update-iam-organization-policy operation.
	//
	// Update IAM Organization Policy.
	//
	// PUT /iam-organization-policy
	UpdateIamOrganizationPolicy(ctx context.Context, req *IamPolicy) (*Operation, error)
	// UpdateIamRole implements update-iam-role operation.
	//
	// Update IAM Role.
	//
	// PUT /iam-role/{id}
	UpdateIamRole(ctx context.Context, req *UpdateIamRoleReq, params UpdateIamRoleParams) (*Operation, error)
	// UpdateIamRolePolicy implements update-iam-role-policy operation.
	//
	// Update IAM Role Policy.
	//
	// PUT /iam-role/{id}:policy
	UpdateIamRolePolicy(ctx context.Context, req *IamPolicy, params UpdateIamRolePolicyParams) (*Operation, error)
	// UpdateInstance implements update-instance operation.
	//
	// Update a Compute instance.
	//
	// PUT /instance/{id}
	UpdateInstance(ctx context.Context, req *UpdateInstanceReq, params UpdateInstanceParams) (*Operation, error)
	// UpdateLoadBalancer implements update-load-balancer operation.
	//
	// Update a Load Balancer.
	//
	// PUT /load-balancer/{id}
	UpdateLoadBalancer(ctx context.Context, req *UpdateLoadBalancerReq, params UpdateLoadBalancerParams) (*Operation, error)
	// UpdateLoadBalancerService implements update-load-balancer-service operation.
	//
	// Update a Load Balancer Service.
	//
	// PUT /load-balancer/{id}/service/{service-id}
	UpdateLoadBalancerService(ctx context.Context, req *UpdateLoadBalancerServiceReq, params UpdateLoadBalancerServiceParams) (*Operation, error)
	// UpdatePrivateNetwork implements update-private-network operation.
	//
	// Update a Private Network.
	//
	// PUT /private-network/{id}
	UpdatePrivateNetwork(ctx context.Context, req *UpdatePrivateNetworkReq, params UpdatePrivateNetworkParams) (*Operation, error)
	// UpdateReverseDNSElasticIP implements update-reverse-dns-elastic-ip operation.
	//
	// Update/Create the PTR DNS record for an elastic IP.
	//
	// POST /reverse-dns/elastic-ip/{id}
	UpdateReverseDNSElasticIP(ctx context.Context, req *UpdateReverseDNSElasticIPReq, params UpdateReverseDNSElasticIPParams) (*Operation, error)
	// UpdateReverseDNSInstance implements update-reverse-dns-instance operation.
	//
	// Update/Create the PTR DNS record for an instance.
	//
	// POST /reverse-dns/instance/{id}
	UpdateReverseDNSInstance(ctx context.Context, req *UpdateReverseDNSInstanceReq, params UpdateReverseDNSInstanceParams) (*Operation, error)
	// UpdateSksCluster implements update-sks-cluster operation.
	//
	// Update an SKS cluster.
	//
	// PUT /sks-cluster/{id}
	UpdateSksCluster(ctx context.Context, req *UpdateSksClusterReq, params UpdateSksClusterParams) (*Operation, error)
	// UpdateTemplate implements update-template operation.
	//
	// Update template attributes.
	//
	// PUT /template/{id}
	UpdateTemplate(ctx context.Context, req *UpdateTemplateReq, params UpdateTemplateParams) (*Operation, error)
	// UpgradeSksCluster implements upgrade-sks-cluster operation.
	//
	// Upgrade an SKS cluster.
	//
	// PUT /sks-cluster/{id}/upgrade
	UpgradeSksCluster(ctx context.Context, req *UpgradeSksClusterReq, params UpgradeSksClusterParams) (*Operation, error)
	// UpgradeSksClusterServiceLevel implements upgrade-sks-cluster-service-level operation.
	//
	// Upgrade a SKS cluster to pro.
	//
	// PUT /sks-cluster/{id}/upgrade-service-level
	UpgradeSksClusterServiceLevel(ctx context.Context, params UpgradeSksClusterServiceLevelParams) (*Operation, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
