// Code generated by v3/generator; DO NOT EDIT.
package iam

import (
	"context"

	"github.com/exoscale/egoscale/v3/oapi"
	"github.com/exoscale/egoscale/v3/utils"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

type RolesIface interface {

   List(ctx context.Context) ([]oapi.IamRole, error)

   Get(ctx context.Context, id openapi_types.UUID) (*oapi.IamRole, error)

   Create(ctx context.Context, body oapi.CreateIamRoleJSONRequestBody) (*oapi.Operation, error)

   Delete(ctx context.Context, id openapi_types.UUID) (*oapi.Operation, error)

   Update(ctx context.Context, id openapi_types.UUID, body oapi.UpdateIamRoleJSONRequestBody) (*oapi.Operation, error)

   UpdatePolicy(ctx context.Context, id openapi_types.UUID, body oapi.UpdateIamRolePolicyJSONRequestBody) (*oapi.Operation, error)

}

type Roles struct {
	oapiClient *oapi.ClientWithResponses
}

func NewRoles(c *oapi.ClientWithResponses) RolesIface {
	return &Roles{c}
}

func (a *Roles) List(ctx context.Context) ([]oapi.IamRole, error) {
	resp, err := a.oapiClient.ListIamRolesWithResponse(ctx)
	if err != nil {
		return nil, err
	}

    err = utils.WriteTestdata(nil, resp.JSON200, resp.StatusCode())
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return *resp.JSON200.IamRoles, nil
}

func (a *Roles) Get(ctx context.Context, id openapi_types.UUID) (*oapi.IamRole, error) {
	resp, err := a.oapiClient.GetIamRoleWithResponse(ctx, id)
	if err != nil {
		return nil, err
	}

    err = utils.WriteTestdata(nil, resp.JSON200, resp.StatusCode())
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *Roles) Create(ctx context.Context, body oapi.CreateIamRoleJSONRequestBody) (*oapi.Operation, error) {
	resp, err := a.oapiClient.CreateIamRoleWithResponse(ctx, body)
	if err != nil {
		return nil, err
	}

    err = utils.WriteTestdata(nil, resp.JSON200, resp.StatusCode())
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *Roles) Delete(ctx context.Context, id openapi_types.UUID) (*oapi.Operation, error) {
	resp, err := a.oapiClient.DeleteIamRoleWithResponse(ctx, id)
	if err != nil {
		return nil, err
	}

    err = utils.WriteTestdata(nil, resp.JSON200, resp.StatusCode())
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *Roles) Update(ctx context.Context, id openapi_types.UUID, body oapi.UpdateIamRoleJSONRequestBody) (*oapi.Operation, error) {
	resp, err := a.oapiClient.UpdateIamRoleWithResponse(ctx, id, body)
	if err != nil {
		return nil, err
	}

    err = utils.WriteTestdata(nil, resp.JSON200, resp.StatusCode())
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *Roles) UpdatePolicy(ctx context.Context, id openapi_types.UUID, body oapi.UpdateIamRolePolicyJSONRequestBody) (*oapi.Operation, error) {
	resp, err := a.oapiClient.UpdateIamRolePolicyWithResponse(ctx, id, body)
	if err != nil {
		return nil, err
	}

    err = utils.WriteTestdata(nil, resp.JSON200, resp.StatusCode())
	if err != nil {
		return nil, err
	}

	err = utils.ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}


type MockRoles struct {
     CallCount int
}

func NewMockRoles() *MockRoles {
	return &MockRoles{}
}

func (a *MockRoles) List(ctx context.Context) ([]oapi.IamRole, error) {
    a.CallCount++

	resp := struct {
		JSON200 struct {
			IamRoles *[]oapi.IamRole
		}
	}{}
    err := utils.GetTestCall(a.CallCount, &resp.JSON200)
	if err != nil {
		return nil, err
	}

	return *resp.JSON200.IamRoles, nil
}

func (a *MockRoles) Get(ctx context.Context, id openapi_types.UUID) (*oapi.IamRole, error) {
    a.CallCount++

	resp := struct {
		JSON200 *oapi.IamRole
	}{}
    err := utils.GetTestCall(a.CallCount, &resp.JSON200)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *MockRoles) Create(ctx context.Context, body oapi.CreateIamRoleJSONRequestBody) (*oapi.Operation, error) {
    a.CallCount++

	resp := struct {
		JSON200 *oapi.Operation
	}{}
    err := utils.GetTestCall(a.CallCount, &resp.JSON200)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *MockRoles) Delete(ctx context.Context, id openapi_types.UUID) (*oapi.Operation, error) {
    a.CallCount++

	resp := struct {
		JSON200 *oapi.Operation
	}{}
    err := utils.GetTestCall(a.CallCount, &resp.JSON200)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *MockRoles) Update(ctx context.Context, id openapi_types.UUID, body oapi.UpdateIamRoleJSONRequestBody) (*oapi.Operation, error) {
    a.CallCount++

	resp := struct {
		JSON200 *oapi.Operation
	}{}
    err := utils.GetTestCall(a.CallCount, &resp.JSON200)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *MockRoles) UpdatePolicy(ctx context.Context, id openapi_types.UUID, body oapi.UpdateIamRolePolicyJSONRequestBody) (*oapi.Operation, error) {
    a.CallCount++

	resp := struct {
		JSON200 *oapi.Operation
	}{}
    err := utils.GetTestCall(a.CallCount, &resp.JSON200)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

