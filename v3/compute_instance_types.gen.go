// Code generated by v3/generator; DO NOT EDIT.
package v3

import (
	"context"


	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

type InstanceTypesAPI struct {
	client *Client
}


func (a *InstanceTypesAPI) List(ctx context.Context) ([]InstanceType, error) {
	req, err := newListInstanceTypesRequest(a.client.server)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseListInstanceTypesResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return *resp.JSON200.InstanceTypes, nil
}

func (a *InstanceTypesAPI) Get(ctx context.Context, id openapi_types.UUID) (*InstanceType, error) {
	req, err := newGetInstanceTypeRequest(a.client.server, id)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseGetInstanceTypeResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

