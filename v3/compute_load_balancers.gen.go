// Code generated by v3/generator; DO NOT EDIT.
package v3

import (
	"context"


	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

type LoadBalancersAPI struct {
	client *Client
}


func (a *LoadBalancersAPI) List(ctx context.Context) ([]LoadBalancer, error) {
	req, err := newListLoadBalancersRequest(a.client.server)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseListLoadBalancersResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return *resp.JSON200.LoadBalancers, nil
}

func (a *LoadBalancersAPI) Get(ctx context.Context, id openapi_types.UUID) (*LoadBalancer, error) {
	req, err := newGetLoadBalancerRequest(a.client.server, id)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseGetLoadBalancerResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *LoadBalancersAPI) Create(ctx context.Context, body CreateLoadBalancerJSONRequestBody) (*Operation, error) {
	req, err := newCreateLoadBalancerRequest(a.client.server, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseCreateLoadBalancerResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *LoadBalancersAPI) Update(ctx context.Context, id openapi_types.UUID, body UpdateLoadBalancerJSONRequestBody) (*Operation, error) {
	req, err := newUpdateLoadBalancerRequest(a.client.server, id, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseUpdateLoadBalancerResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *LoadBalancersAPI) Delete(ctx context.Context, id openapi_types.UUID) (*Operation, error) {
	req, err := newDeleteLoadBalancerRequest(a.client.server, id)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseDeleteLoadBalancerResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *LoadBalancersAPI) GetService(ctx context.Context, id openapi_types.UUID, serviceId openapi_types.UUID) (*LoadBalancerService, error) {
	req, err := newGetLoadBalancerServiceRequest(a.client.server, id, serviceId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseGetLoadBalancerServiceResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *LoadBalancersAPI) AddService(ctx context.Context, id openapi_types.UUID, body AddServiceToLoadBalancerJSONRequestBody) (*Operation, error) {
	req, err := newAddServiceToLoadBalancerRequest(a.client.server, id, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseAddServiceToLoadBalancerResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *LoadBalancersAPI) UpdateService(ctx context.Context, id openapi_types.UUID, serviceId openapi_types.UUID, body UpdateLoadBalancerServiceJSONRequestBody) (*Operation, error) {
	req, err := newUpdateLoadBalancerServiceRequest(a.client.server, id, serviceId, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseUpdateLoadBalancerServiceResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *LoadBalancersAPI) DeleteService(ctx context.Context, id openapi_types.UUID, serviceId openapi_types.UUID) (*Operation, error) {
	req, err := newDeleteLoadBalancerServiceRequest(a.client.server, id, serviceId)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseDeleteLoadBalancerServiceResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

