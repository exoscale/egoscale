{{ .Comment }}
func (c Client) {{ .Name }}({{ .Params }}) {{ .ValueReturn }} {
	path := {{ .URLPathBuilder }}

	{{ if .BodyRequest }}
	body, err := prepareJSONBody(req)
	if err != nil {
		return nil, fmt.Errorf("{{ .Name }}: prepare Json body: %w", err)
	}
	{{ end }}

	request, err := http.NewRequestWithContext(ctx, "{{ .HTTPMethod }}", c.serverEndpoint + path, {{ if .BodyRequest }}body{{else}}nil{{end}})
	if err != nil {
		return nil, fmt.Errorf("{{ .Name }}: new request: %w", err)
	}

	{{ if ne .QueryParams nil }}if len(opts) > 0 {
		q := request.URL.Query()
		for _, opt := range opts {
			opt(q)
		}
		request.URL.RawQuery = q.Encode()
	}{{ end }}

	{{ if ne .ContentType "" }}
	request.Header.Add("Content-Type", "{{ .ContentType }}")
	{{ end }}

	if err := c.executeRequestInterceptors(ctx, request); err != nil {
		return nil, fmt.Errorf("{{ .Name }}: execute request editors: %w", err)
	}

	if c.trace {
		dumpRequest(request)
	}

	if err := c.signRequest(request); err != nil {
		return nil, fmt.Errorf("{{ .Name }}: sign request: %w", err)
	}

	response, err := c.httpClient.Do(request)
	if err != nil {
		return nil, fmt.Errorf("{{ .Name }}: http client do: %w", err)
	}

	if c.trace {
		dumpResponse(response)
	}

	if err := handleHTTPErrorResp(response); err != nil {
		return nil, fmt.Errorf("{{ .Name }}: http response: %w", err)
	}

	bodyresp := {{ .BodyRespType }}{}
	if err := prepareJSONResponse(response, bodyresp); err != nil {
		return nil, fmt.Errorf("{{ .Name }}: prepare Json response: %w", err)
	}

	return bodyresp, nil
}
