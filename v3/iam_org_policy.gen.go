// Code generated by v3/generator; DO NOT EDIT.
package v3

import (
	"context"

)

type OrgPolicyAPI struct {
	client *Client
}


func (a *OrgPolicyAPI) Get(ctx context.Context) (*IamPolicy, error) {
	req, err := newGetIamOrganizationPolicyRequest(a.client.server)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseGetIamOrganizationPolicyResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *OrgPolicyAPI) Update(ctx context.Context, body UpdateIamOrganizationPolicyJSONRequestBody) (*Operation, error) {
	req, err := newUpdateIamOrganizationPolicyRequest(a.client.server, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseUpdateIamOrganizationPolicyResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

