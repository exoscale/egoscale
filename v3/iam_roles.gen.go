// Code generated by v3/generator; DO NOT EDIT.
package v3

import (
	"context"


	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

type RolesAPI struct {
	client *Client
}


func (a *RolesAPI) List(ctx context.Context) ([]IamRole, error) {
	req, err := newListIamRolesRequest(a.client.server)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseListIamRolesResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return *resp.JSON200.IamRoles, nil
}

func (a *RolesAPI) Get(ctx context.Context, id openapi_types.UUID) (*IamRole, error) {
	req, err := newGetIamRoleRequest(a.client.server, id)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseGetIamRoleResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *RolesAPI) Create(ctx context.Context, body CreateIamRoleJSONRequestBody) (*Operation, error) {
	req, err := newCreateIamRoleRequest(a.client.server, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseCreateIamRoleResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *RolesAPI) Delete(ctx context.Context, id openapi_types.UUID) (*Operation, error) {
	req, err := newDeleteIamRoleRequest(a.client.server, id)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseDeleteIamRoleResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *RolesAPI) Update(ctx context.Context, id openapi_types.UUID, body UpdateIamRoleJSONRequestBody) (*Operation, error) {
	req, err := newUpdateIamRoleRequest(a.client.server, id, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseUpdateIamRoleResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

func (a *RolesAPI) UpdatePolicy(ctx context.Context, id openapi_types.UUID, body UpdateIamRolePolicyJSONRequestBody) (*Operation, error) {
	req, err := newUpdateIamRolePolicyRequest(a.client.server, id, body)
	if err != nil {
		return nil, err
	}

	req = req.WithContext(ctx)

	for _, e := range a.client.reqEditors {
		err = e(ctx, req)
		if err != nil {
			return nil, err
		}
	}

	r, err := a.client.httpClient.Do(req)
	if err != nil {
		return nil, err
	}

	resp, err := parseUpdateIamRolePolicyResponse(r)
	if err != nil {
		return nil, err
	}

	err = ParseResponseError(resp.StatusCode(), resp.Body)
	if err != nil {
		return nil, err
	}

	return resp.JSON200, nil
}

