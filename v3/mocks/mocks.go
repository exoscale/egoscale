// Code generated by MockGen. DO NOT EDIT.
// Source: ../operations.go
//
// Generated by this command:
//
//	mockgen -package=mocks -source=../operations.go -destination=../mocks/mocks.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	v3 "github.com/exoscale/egoscale/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddExternalSourceToSecurityGroup mocks base method.
func (m *MockClient) AddExternalSourceToSecurityGroup(ctx context.Context, id v3.UUID, req v3.AddExternalSourceToSecurityGroupRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExternalSourceToSecurityGroup", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExternalSourceToSecurityGroup indicates an expected call of AddExternalSourceToSecurityGroup.
func (mr *MockClientMockRecorder) AddExternalSourceToSecurityGroup(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExternalSourceToSecurityGroup", reflect.TypeOf((*MockClient)(nil).AddExternalSourceToSecurityGroup), ctx, id, req)
}

// AddInstanceProtection mocks base method.
func (m *MockClient) AddInstanceProtection(ctx context.Context, id v3.UUID) (*v3.AddInstanceProtectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInstanceProtection", ctx, id)
	ret0, _ := ret[0].(*v3.AddInstanceProtectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddInstanceProtection indicates an expected call of AddInstanceProtection.
func (mr *MockClientMockRecorder) AddInstanceProtection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstanceProtection", reflect.TypeOf((*MockClient)(nil).AddInstanceProtection), ctx, id)
}

// AddRuleToSecurityGroup mocks base method.
func (m *MockClient) AddRuleToSecurityGroup(ctx context.Context, id v3.UUID, req v3.AddRuleToSecurityGroupRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRuleToSecurityGroup", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRuleToSecurityGroup indicates an expected call of AddRuleToSecurityGroup.
func (mr *MockClientMockRecorder) AddRuleToSecurityGroup(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRuleToSecurityGroup", reflect.TypeOf((*MockClient)(nil).AddRuleToSecurityGroup), ctx, id, req)
}

// AddServiceToLoadBalancer mocks base method.
func (m *MockClient) AddServiceToLoadBalancer(ctx context.Context, id v3.UUID, req v3.AddServiceToLoadBalancerRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceToLoadBalancer", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceToLoadBalancer indicates an expected call of AddServiceToLoadBalancer.
func (mr *MockClientMockRecorder) AddServiceToLoadBalancer(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceToLoadBalancer", reflect.TypeOf((*MockClient)(nil).AddServiceToLoadBalancer), ctx, id, req)
}

// AttachInstanceToElasticIP mocks base method.
func (m *MockClient) AttachInstanceToElasticIP(ctx context.Context, id v3.UUID, req v3.AttachInstanceToElasticIPRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachInstanceToElasticIP", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachInstanceToElasticIP indicates an expected call of AttachInstanceToElasticIP.
func (mr *MockClientMockRecorder) AttachInstanceToElasticIP(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInstanceToElasticIP", reflect.TypeOf((*MockClient)(nil).AttachInstanceToElasticIP), ctx, id, req)
}

// AttachInstanceToPrivateNetwork mocks base method.
func (m *MockClient) AttachInstanceToPrivateNetwork(ctx context.Context, id v3.UUID, req v3.AttachInstanceToPrivateNetworkRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachInstanceToPrivateNetwork", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachInstanceToPrivateNetwork indicates an expected call of AttachInstanceToPrivateNetwork.
func (mr *MockClientMockRecorder) AttachInstanceToPrivateNetwork(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInstanceToPrivateNetwork", reflect.TypeOf((*MockClient)(nil).AttachInstanceToPrivateNetwork), ctx, id, req)
}

// AttachInstanceToSecurityGroup mocks base method.
func (m *MockClient) AttachInstanceToSecurityGroup(ctx context.Context, id v3.UUID, req v3.AttachInstanceToSecurityGroupRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachInstanceToSecurityGroup", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachInstanceToSecurityGroup indicates an expected call of AttachInstanceToSecurityGroup.
func (mr *MockClientMockRecorder) AttachInstanceToSecurityGroup(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachInstanceToSecurityGroup", reflect.TypeOf((*MockClient)(nil).AttachInstanceToSecurityGroup), ctx, id, req)
}

// CopyTemplate mocks base method.
func (m *MockClient) CopyTemplate(ctx context.Context, id v3.UUID, req v3.CopyTemplateRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyTemplate", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyTemplate indicates an expected call of CopyTemplate.
func (mr *MockClientMockRecorder) CopyTemplate(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTemplate", reflect.TypeOf((*MockClient)(nil).CopyTemplate), ctx, id, req)
}

// CreateAPIKey mocks base method.
func (m *MockClient) CreateAPIKey(ctx context.Context, req v3.CreateAPIKeyRequest) (*v3.IAMAPIKeyCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, req)
	ret0, _ := ret[0].(*v3.IAMAPIKeyCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockClientMockRecorder) CreateAPIKey(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockClient)(nil).CreateAPIKey), ctx, req)
}

// CreateAccessKey mocks base method.
func (m *MockClient) CreateAccessKey(ctx context.Context, req v3.CreateAccessKeyRequest) (*v3.AccessKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccessKey", ctx, req)
	ret0, _ := ret[0].(*v3.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccessKey indicates an expected call of CreateAccessKey.
func (mr *MockClientMockRecorder) CreateAccessKey(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccessKey", reflect.TypeOf((*MockClient)(nil).CreateAccessKey), ctx, req)
}

// CreateAntiAffinityGroup mocks base method.
func (m *MockClient) CreateAntiAffinityGroup(ctx context.Context, req v3.CreateAntiAffinityGroupRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAntiAffinityGroup", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAntiAffinityGroup indicates an expected call of CreateAntiAffinityGroup.
func (mr *MockClientMockRecorder) CreateAntiAffinityGroup(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAntiAffinityGroup", reflect.TypeOf((*MockClient)(nil).CreateAntiAffinityGroup), ctx, req)
}

// CreateDBAASIntegration mocks base method.
func (m *MockClient) CreateDBAASIntegration(ctx context.Context, req v3.CreateDBAASIntegrationRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASIntegration", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASIntegration indicates an expected call of CreateDBAASIntegration.
func (mr *MockClientMockRecorder) CreateDBAASIntegration(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASIntegration", reflect.TypeOf((*MockClient)(nil).CreateDBAASIntegration), ctx, req)
}

// CreateDBAASKafkaSchemaRegistryAclConfig mocks base method.
func (m *MockClient) CreateDBAASKafkaSchemaRegistryAclConfig(ctx context.Context, name string, req v3.DBAASKafkaSchemaRegistryAclEntry) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASKafkaSchemaRegistryAclConfig", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASKafkaSchemaRegistryAclConfig indicates an expected call of CreateDBAASKafkaSchemaRegistryAclConfig.
func (mr *MockClientMockRecorder) CreateDBAASKafkaSchemaRegistryAclConfig(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASKafkaSchemaRegistryAclConfig", reflect.TypeOf((*MockClient)(nil).CreateDBAASKafkaSchemaRegistryAclConfig), ctx, name, req)
}

// CreateDBAASKafkaTopicAclConfig mocks base method.
func (m *MockClient) CreateDBAASKafkaTopicAclConfig(ctx context.Context, name string, req v3.DBAASKafkaTopicAclEntry) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASKafkaTopicAclConfig", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASKafkaTopicAclConfig indicates an expected call of CreateDBAASKafkaTopicAclConfig.
func (mr *MockClientMockRecorder) CreateDBAASKafkaTopicAclConfig(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASKafkaTopicAclConfig", reflect.TypeOf((*MockClient)(nil).CreateDBAASKafkaTopicAclConfig), ctx, name, req)
}

// CreateDBAASKafkaUser mocks base method.
func (m *MockClient) CreateDBAASKafkaUser(ctx context.Context, serviceName string, req v3.CreateDBAASKafkaUserRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASKafkaUser", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASKafkaUser indicates an expected call of CreateDBAASKafkaUser.
func (mr *MockClientMockRecorder) CreateDBAASKafkaUser(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASKafkaUser", reflect.TypeOf((*MockClient)(nil).CreateDBAASKafkaUser), ctx, serviceName, req)
}

// CreateDBAASMysqlDatabase mocks base method.
func (m *MockClient) CreateDBAASMysqlDatabase(ctx context.Context, serviceName string, req v3.CreateDBAASMysqlDatabaseRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASMysqlDatabase", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASMysqlDatabase indicates an expected call of CreateDBAASMysqlDatabase.
func (mr *MockClientMockRecorder) CreateDBAASMysqlDatabase(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASMysqlDatabase", reflect.TypeOf((*MockClient)(nil).CreateDBAASMysqlDatabase), ctx, serviceName, req)
}

// CreateDBAASMysqlUser mocks base method.
func (m *MockClient) CreateDBAASMysqlUser(ctx context.Context, serviceName string, req v3.CreateDBAASMysqlUserRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASMysqlUser", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASMysqlUser indicates an expected call of CreateDBAASMysqlUser.
func (mr *MockClientMockRecorder) CreateDBAASMysqlUser(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASMysqlUser", reflect.TypeOf((*MockClient)(nil).CreateDBAASMysqlUser), ctx, serviceName, req)
}

// CreateDBAASOpensearchUser mocks base method.
func (m *MockClient) CreateDBAASOpensearchUser(ctx context.Context, serviceName string, req v3.CreateDBAASOpensearchUserRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASOpensearchUser", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASOpensearchUser indicates an expected call of CreateDBAASOpensearchUser.
func (mr *MockClientMockRecorder) CreateDBAASOpensearchUser(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASOpensearchUser", reflect.TypeOf((*MockClient)(nil).CreateDBAASOpensearchUser), ctx, serviceName, req)
}

// CreateDBAASPGConnectionPool mocks base method.
func (m *MockClient) CreateDBAASPGConnectionPool(ctx context.Context, serviceName string, req v3.CreateDBAASPGConnectionPoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASPGConnectionPool", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASPGConnectionPool indicates an expected call of CreateDBAASPGConnectionPool.
func (mr *MockClientMockRecorder) CreateDBAASPGConnectionPool(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASPGConnectionPool", reflect.TypeOf((*MockClient)(nil).CreateDBAASPGConnectionPool), ctx, serviceName, req)
}

// CreateDBAASPGDatabase mocks base method.
func (m *MockClient) CreateDBAASPGDatabase(ctx context.Context, serviceName string, req v3.CreateDBAASPGDatabaseRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASPGDatabase", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASPGDatabase indicates an expected call of CreateDBAASPGDatabase.
func (mr *MockClientMockRecorder) CreateDBAASPGDatabase(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASPGDatabase", reflect.TypeOf((*MockClient)(nil).CreateDBAASPGDatabase), ctx, serviceName, req)
}

// CreateDBAASPGUpgradeCheck mocks base method.
func (m *MockClient) CreateDBAASPGUpgradeCheck(ctx context.Context, service string, req v3.CreateDBAASPGUpgradeCheckRequest) (*v3.DBAASTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASPGUpgradeCheck", ctx, service, req)
	ret0, _ := ret[0].(*v3.DBAASTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASPGUpgradeCheck indicates an expected call of CreateDBAASPGUpgradeCheck.
func (mr *MockClientMockRecorder) CreateDBAASPGUpgradeCheck(ctx, service, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASPGUpgradeCheck", reflect.TypeOf((*MockClient)(nil).CreateDBAASPGUpgradeCheck), ctx, service, req)
}

// CreateDBAASPostgresUser mocks base method.
func (m *MockClient) CreateDBAASPostgresUser(ctx context.Context, serviceName string, req v3.CreateDBAASPostgresUserRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASPostgresUser", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASPostgresUser indicates an expected call of CreateDBAASPostgresUser.
func (mr *MockClientMockRecorder) CreateDBAASPostgresUser(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASPostgresUser", reflect.TypeOf((*MockClient)(nil).CreateDBAASPostgresUser), ctx, serviceName, req)
}

// CreateDBAASServiceGrafana mocks base method.
func (m *MockClient) CreateDBAASServiceGrafana(ctx context.Context, name string, req v3.CreateDBAASServiceGrafanaRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASServiceGrafana", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASServiceGrafana indicates an expected call of CreateDBAASServiceGrafana.
func (mr *MockClientMockRecorder) CreateDBAASServiceGrafana(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASServiceGrafana", reflect.TypeOf((*MockClient)(nil).CreateDBAASServiceGrafana), ctx, name, req)
}

// CreateDBAASServiceKafka mocks base method.
func (m *MockClient) CreateDBAASServiceKafka(ctx context.Context, name string, req v3.CreateDBAASServiceKafkaRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASServiceKafka", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASServiceKafka indicates an expected call of CreateDBAASServiceKafka.
func (mr *MockClientMockRecorder) CreateDBAASServiceKafka(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASServiceKafka", reflect.TypeOf((*MockClient)(nil).CreateDBAASServiceKafka), ctx, name, req)
}

// CreateDBAASServiceMysql mocks base method.
func (m *MockClient) CreateDBAASServiceMysql(ctx context.Context, name string, req v3.CreateDBAASServiceMysqlRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASServiceMysql", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASServiceMysql indicates an expected call of CreateDBAASServiceMysql.
func (mr *MockClientMockRecorder) CreateDBAASServiceMysql(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASServiceMysql", reflect.TypeOf((*MockClient)(nil).CreateDBAASServiceMysql), ctx, name, req)
}

// CreateDBAASServiceOpensearch mocks base method.
func (m *MockClient) CreateDBAASServiceOpensearch(ctx context.Context, name string, req v3.CreateDBAASServiceOpensearchRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASServiceOpensearch", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASServiceOpensearch indicates an expected call of CreateDBAASServiceOpensearch.
func (mr *MockClientMockRecorder) CreateDBAASServiceOpensearch(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASServiceOpensearch", reflect.TypeOf((*MockClient)(nil).CreateDBAASServiceOpensearch), ctx, name, req)
}

// CreateDBAASServicePG mocks base method.
func (m *MockClient) CreateDBAASServicePG(ctx context.Context, name string, req v3.CreateDBAASServicePGRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASServicePG", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASServicePG indicates an expected call of CreateDBAASServicePG.
func (mr *MockClientMockRecorder) CreateDBAASServicePG(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASServicePG", reflect.TypeOf((*MockClient)(nil).CreateDBAASServicePG), ctx, name, req)
}

// CreateDBAASServiceRedis mocks base method.
func (m *MockClient) CreateDBAASServiceRedis(ctx context.Context, name string, req v3.CreateDBAASServiceRedisRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASServiceRedis", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASServiceRedis indicates an expected call of CreateDBAASServiceRedis.
func (mr *MockClientMockRecorder) CreateDBAASServiceRedis(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASServiceRedis", reflect.TypeOf((*MockClient)(nil).CreateDBAASServiceRedis), ctx, name, req)
}

// CreateDBAASTaskMigrationCheck mocks base method.
func (m *MockClient) CreateDBAASTaskMigrationCheck(ctx context.Context, service string, req v3.CreateDBAASTaskMigrationCheckRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDBAASTaskMigrationCheck", ctx, service, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDBAASTaskMigrationCheck indicates an expected call of CreateDBAASTaskMigrationCheck.
func (mr *MockClientMockRecorder) CreateDBAASTaskMigrationCheck(ctx, service, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDBAASTaskMigrationCheck", reflect.TypeOf((*MockClient)(nil).CreateDBAASTaskMigrationCheck), ctx, service, req)
}

// CreateDNSDomain mocks base method.
func (m *MockClient) CreateDNSDomain(ctx context.Context, req v3.CreateDNSDomainRequest) (*v3.DNSDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNSDomain", ctx, req)
	ret0, _ := ret[0].(*v3.DNSDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDNSDomain indicates an expected call of CreateDNSDomain.
func (mr *MockClientMockRecorder) CreateDNSDomain(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNSDomain", reflect.TypeOf((*MockClient)(nil).CreateDNSDomain), ctx, req)
}

// CreateDNSDomainRecord mocks base method.
func (m *MockClient) CreateDNSDomainRecord(ctx context.Context, domainID v3.UUID, req v3.CreateDNSDomainRecordRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDNSDomainRecord", ctx, domainID, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDNSDomainRecord indicates an expected call of CreateDNSDomainRecord.
func (mr *MockClientMockRecorder) CreateDNSDomainRecord(ctx, domainID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDNSDomainRecord", reflect.TypeOf((*MockClient)(nil).CreateDNSDomainRecord), ctx, domainID, req)
}

// CreateElasticIP mocks base method.
func (m *MockClient) CreateElasticIP(ctx context.Context, req v3.CreateElasticIPRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateElasticIP", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElasticIP indicates an expected call of CreateElasticIP.
func (mr *MockClientMockRecorder) CreateElasticIP(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElasticIP", reflect.TypeOf((*MockClient)(nil).CreateElasticIP), ctx, req)
}

// CreateIAMRole mocks base method.
func (m *MockClient) CreateIAMRole(ctx context.Context, req v3.CreateIAMRoleRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIAMRole", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIAMRole indicates an expected call of CreateIAMRole.
func (mr *MockClientMockRecorder) CreateIAMRole(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIAMRole", reflect.TypeOf((*MockClient)(nil).CreateIAMRole), ctx, req)
}

// CreateInstance mocks base method.
func (m *MockClient) CreateInstance(ctx context.Context, req v3.CreateInstanceRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockClientMockRecorder) CreateInstance(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockClient)(nil).CreateInstance), ctx, req)
}

// CreateInstancePool mocks base method.
func (m *MockClient) CreateInstancePool(ctx context.Context, req v3.CreateInstancePoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstancePool", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstancePool indicates an expected call of CreateInstancePool.
func (mr *MockClientMockRecorder) CreateInstancePool(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstancePool", reflect.TypeOf((*MockClient)(nil).CreateInstancePool), ctx, req)
}

// CreateLoadBalancer mocks base method.
func (m *MockClient) CreateLoadBalancer(ctx context.Context, req v3.CreateLoadBalancerRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockClientMockRecorder) CreateLoadBalancer(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancer), ctx, req)
}

// CreatePrivateNetwork mocks base method.
func (m *MockClient) CreatePrivateNetwork(ctx context.Context, req v3.CreatePrivateNetworkRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePrivateNetwork", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePrivateNetwork indicates an expected call of CreatePrivateNetwork.
func (mr *MockClientMockRecorder) CreatePrivateNetwork(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePrivateNetwork", reflect.TypeOf((*MockClient)(nil).CreatePrivateNetwork), ctx, req)
}

// CreateSKSCluster mocks base method.
func (m *MockClient) CreateSKSCluster(ctx context.Context, req v3.CreateSKSClusterRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSKSCluster", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSKSCluster indicates an expected call of CreateSKSCluster.
func (mr *MockClientMockRecorder) CreateSKSCluster(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSKSCluster", reflect.TypeOf((*MockClient)(nil).CreateSKSCluster), ctx, req)
}

// CreateSKSNodepool mocks base method.
func (m *MockClient) CreateSKSNodepool(ctx context.Context, id v3.UUID, req v3.CreateSKSNodepoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSKSNodepool", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSKSNodepool indicates an expected call of CreateSKSNodepool.
func (mr *MockClientMockRecorder) CreateSKSNodepool(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSKSNodepool", reflect.TypeOf((*MockClient)(nil).CreateSKSNodepool), ctx, id, req)
}

// CreateSecurityGroup mocks base method.
func (m *MockClient) CreateSecurityGroup(ctx context.Context, req v3.CreateSecurityGroupRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockClientMockRecorder) CreateSecurityGroup(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockClient)(nil).CreateSecurityGroup), ctx, req)
}

// CreateSnapshot mocks base method.
func (m *MockClient) CreateSnapshot(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockClientMockRecorder) CreateSnapshot(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockClient)(nil).CreateSnapshot), ctx, id)
}

// DeleteAPIKey mocks base method.
func (m *MockClient) DeleteAPIKey(ctx context.Context, id string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockClientMockRecorder) DeleteAPIKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockClient)(nil).DeleteAPIKey), ctx, id)
}

// DeleteAntiAffinityGroup mocks base method.
func (m *MockClient) DeleteAntiAffinityGroup(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAntiAffinityGroup", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAntiAffinityGroup indicates an expected call of DeleteAntiAffinityGroup.
func (mr *MockClientMockRecorder) DeleteAntiAffinityGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAntiAffinityGroup", reflect.TypeOf((*MockClient)(nil).DeleteAntiAffinityGroup), ctx, id)
}

// DeleteDBAASIntegration mocks base method.
func (m *MockClient) DeleteDBAASIntegration(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASIntegration", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASIntegration indicates an expected call of DeleteDBAASIntegration.
func (mr *MockClientMockRecorder) DeleteDBAASIntegration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASIntegration", reflect.TypeOf((*MockClient)(nil).DeleteDBAASIntegration), ctx, id)
}

// DeleteDBAASKafkaSchemaRegistryAclConfig mocks base method.
func (m *MockClient) DeleteDBAASKafkaSchemaRegistryAclConfig(ctx context.Context, name, aclID string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASKafkaSchemaRegistryAclConfig", ctx, name, aclID)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASKafkaSchemaRegistryAclConfig indicates an expected call of DeleteDBAASKafkaSchemaRegistryAclConfig.
func (mr *MockClientMockRecorder) DeleteDBAASKafkaSchemaRegistryAclConfig(ctx, name, aclID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASKafkaSchemaRegistryAclConfig", reflect.TypeOf((*MockClient)(nil).DeleteDBAASKafkaSchemaRegistryAclConfig), ctx, name, aclID)
}

// DeleteDBAASKafkaTopicAclConfig mocks base method.
func (m *MockClient) DeleteDBAASKafkaTopicAclConfig(ctx context.Context, name, aclID string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASKafkaTopicAclConfig", ctx, name, aclID)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASKafkaTopicAclConfig indicates an expected call of DeleteDBAASKafkaTopicAclConfig.
func (mr *MockClientMockRecorder) DeleteDBAASKafkaTopicAclConfig(ctx, name, aclID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASKafkaTopicAclConfig", reflect.TypeOf((*MockClient)(nil).DeleteDBAASKafkaTopicAclConfig), ctx, name, aclID)
}

// DeleteDBAASKafkaUser mocks base method.
func (m *MockClient) DeleteDBAASKafkaUser(ctx context.Context, serviceName, username string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASKafkaUser", ctx, serviceName, username)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASKafkaUser indicates an expected call of DeleteDBAASKafkaUser.
func (mr *MockClientMockRecorder) DeleteDBAASKafkaUser(ctx, serviceName, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASKafkaUser", reflect.TypeOf((*MockClient)(nil).DeleteDBAASKafkaUser), ctx, serviceName, username)
}

// DeleteDBAASMysqlDatabase mocks base method.
func (m *MockClient) DeleteDBAASMysqlDatabase(ctx context.Context, serviceName, databaseName string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASMysqlDatabase", ctx, serviceName, databaseName)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASMysqlDatabase indicates an expected call of DeleteDBAASMysqlDatabase.
func (mr *MockClientMockRecorder) DeleteDBAASMysqlDatabase(ctx, serviceName, databaseName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASMysqlDatabase", reflect.TypeOf((*MockClient)(nil).DeleteDBAASMysqlDatabase), ctx, serviceName, databaseName)
}

// DeleteDBAASMysqlUser mocks base method.
func (m *MockClient) DeleteDBAASMysqlUser(ctx context.Context, serviceName, username string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASMysqlUser", ctx, serviceName, username)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASMysqlUser indicates an expected call of DeleteDBAASMysqlUser.
func (mr *MockClientMockRecorder) DeleteDBAASMysqlUser(ctx, serviceName, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASMysqlUser", reflect.TypeOf((*MockClient)(nil).DeleteDBAASMysqlUser), ctx, serviceName, username)
}

// DeleteDBAASOpensearchUser mocks base method.
func (m *MockClient) DeleteDBAASOpensearchUser(ctx context.Context, serviceName, username string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASOpensearchUser", ctx, serviceName, username)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASOpensearchUser indicates an expected call of DeleteDBAASOpensearchUser.
func (mr *MockClientMockRecorder) DeleteDBAASOpensearchUser(ctx, serviceName, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASOpensearchUser", reflect.TypeOf((*MockClient)(nil).DeleteDBAASOpensearchUser), ctx, serviceName, username)
}

// DeleteDBAASPGConnectionPool mocks base method.
func (m *MockClient) DeleteDBAASPGConnectionPool(ctx context.Context, serviceName, connectionPoolName string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASPGConnectionPool", ctx, serviceName, connectionPoolName)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASPGConnectionPool indicates an expected call of DeleteDBAASPGConnectionPool.
func (mr *MockClientMockRecorder) DeleteDBAASPGConnectionPool(ctx, serviceName, connectionPoolName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASPGConnectionPool", reflect.TypeOf((*MockClient)(nil).DeleteDBAASPGConnectionPool), ctx, serviceName, connectionPoolName)
}

// DeleteDBAASPGDatabase mocks base method.
func (m *MockClient) DeleteDBAASPGDatabase(ctx context.Context, serviceName, databaseName string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASPGDatabase", ctx, serviceName, databaseName)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASPGDatabase indicates an expected call of DeleteDBAASPGDatabase.
func (mr *MockClientMockRecorder) DeleteDBAASPGDatabase(ctx, serviceName, databaseName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASPGDatabase", reflect.TypeOf((*MockClient)(nil).DeleteDBAASPGDatabase), ctx, serviceName, databaseName)
}

// DeleteDBAASPostgresUser mocks base method.
func (m *MockClient) DeleteDBAASPostgresUser(ctx context.Context, serviceName, username string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASPostgresUser", ctx, serviceName, username)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASPostgresUser indicates an expected call of DeleteDBAASPostgresUser.
func (mr *MockClientMockRecorder) DeleteDBAASPostgresUser(ctx, serviceName, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASPostgresUser", reflect.TypeOf((*MockClient)(nil).DeleteDBAASPostgresUser), ctx, serviceName, username)
}

// DeleteDBAASService mocks base method.
func (m *MockClient) DeleteDBAASService(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASService", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASService indicates an expected call of DeleteDBAASService.
func (mr *MockClientMockRecorder) DeleteDBAASService(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASService", reflect.TypeOf((*MockClient)(nil).DeleteDBAASService), ctx, name)
}

// DeleteDBAASServiceGrafana mocks base method.
func (m *MockClient) DeleteDBAASServiceGrafana(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASServiceGrafana", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASServiceGrafana indicates an expected call of DeleteDBAASServiceGrafana.
func (mr *MockClientMockRecorder) DeleteDBAASServiceGrafana(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASServiceGrafana", reflect.TypeOf((*MockClient)(nil).DeleteDBAASServiceGrafana), ctx, name)
}

// DeleteDBAASServiceKafka mocks base method.
func (m *MockClient) DeleteDBAASServiceKafka(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASServiceKafka", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASServiceKafka indicates an expected call of DeleteDBAASServiceKafka.
func (mr *MockClientMockRecorder) DeleteDBAASServiceKafka(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASServiceKafka", reflect.TypeOf((*MockClient)(nil).DeleteDBAASServiceKafka), ctx, name)
}

// DeleteDBAASServiceMysql mocks base method.
func (m *MockClient) DeleteDBAASServiceMysql(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASServiceMysql", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASServiceMysql indicates an expected call of DeleteDBAASServiceMysql.
func (mr *MockClientMockRecorder) DeleteDBAASServiceMysql(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASServiceMysql", reflect.TypeOf((*MockClient)(nil).DeleteDBAASServiceMysql), ctx, name)
}

// DeleteDBAASServiceOpensearch mocks base method.
func (m *MockClient) DeleteDBAASServiceOpensearch(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASServiceOpensearch", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASServiceOpensearch indicates an expected call of DeleteDBAASServiceOpensearch.
func (mr *MockClientMockRecorder) DeleteDBAASServiceOpensearch(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASServiceOpensearch", reflect.TypeOf((*MockClient)(nil).DeleteDBAASServiceOpensearch), ctx, name)
}

// DeleteDBAASServicePG mocks base method.
func (m *MockClient) DeleteDBAASServicePG(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASServicePG", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASServicePG indicates an expected call of DeleteDBAASServicePG.
func (mr *MockClientMockRecorder) DeleteDBAASServicePG(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASServicePG", reflect.TypeOf((*MockClient)(nil).DeleteDBAASServicePG), ctx, name)
}

// DeleteDBAASServiceRedis mocks base method.
func (m *MockClient) DeleteDBAASServiceRedis(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDBAASServiceRedis", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDBAASServiceRedis indicates an expected call of DeleteDBAASServiceRedis.
func (mr *MockClientMockRecorder) DeleteDBAASServiceRedis(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDBAASServiceRedis", reflect.TypeOf((*MockClient)(nil).DeleteDBAASServiceRedis), ctx, name)
}

// DeleteDNSDomain mocks base method.
func (m *MockClient) DeleteDNSDomain(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSDomain", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDNSDomain indicates an expected call of DeleteDNSDomain.
func (mr *MockClientMockRecorder) DeleteDNSDomain(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSDomain", reflect.TypeOf((*MockClient)(nil).DeleteDNSDomain), ctx, id)
}

// DeleteDNSDomainRecord mocks base method.
func (m *MockClient) DeleteDNSDomainRecord(ctx context.Context, domainID, recordID v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDNSDomainRecord", ctx, domainID, recordID)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDNSDomainRecord indicates an expected call of DeleteDNSDomainRecord.
func (mr *MockClientMockRecorder) DeleteDNSDomainRecord(ctx, domainID, recordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDNSDomainRecord", reflect.TypeOf((*MockClient)(nil).DeleteDNSDomainRecord), ctx, domainID, recordID)
}

// DeleteElasticIP mocks base method.
func (m *MockClient) DeleteElasticIP(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteElasticIP", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteElasticIP indicates an expected call of DeleteElasticIP.
func (mr *MockClientMockRecorder) DeleteElasticIP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteElasticIP", reflect.TypeOf((*MockClient)(nil).DeleteElasticIP), ctx, id)
}

// DeleteIAMRole mocks base method.
func (m *MockClient) DeleteIAMRole(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIAMRole", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteIAMRole indicates an expected call of DeleteIAMRole.
func (mr *MockClientMockRecorder) DeleteIAMRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIAMRole", reflect.TypeOf((*MockClient)(nil).DeleteIAMRole), ctx, id)
}

// DeleteInstance mocks base method.
func (m *MockClient) DeleteInstance(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockClientMockRecorder) DeleteInstance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockClient)(nil).DeleteInstance), ctx, id)
}

// DeleteInstancePool mocks base method.
func (m *MockClient) DeleteInstancePool(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstancePool", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstancePool indicates an expected call of DeleteInstancePool.
func (mr *MockClientMockRecorder) DeleteInstancePool(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstancePool", reflect.TypeOf((*MockClient)(nil).DeleteInstancePool), ctx, id)
}

// DeleteLoadBalancer mocks base method.
func (m *MockClient) DeleteLoadBalancer(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockClientMockRecorder) DeleteLoadBalancer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancer), ctx, id)
}

// DeleteLoadBalancerService mocks base method.
func (m *MockClient) DeleteLoadBalancerService(ctx context.Context, id, serviceID v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerService", ctx, id, serviceID)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerService indicates an expected call of DeleteLoadBalancerService.
func (mr *MockClientMockRecorder) DeleteLoadBalancerService(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerService", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancerService), ctx, id, serviceID)
}

// DeletePrivateNetwork mocks base method.
func (m *MockClient) DeletePrivateNetwork(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePrivateNetwork", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePrivateNetwork indicates an expected call of DeletePrivateNetwork.
func (mr *MockClientMockRecorder) DeletePrivateNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePrivateNetwork", reflect.TypeOf((*MockClient)(nil).DeletePrivateNetwork), ctx, id)
}

// DeleteReverseDNSElasticIP mocks base method.
func (m *MockClient) DeleteReverseDNSElasticIP(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReverseDNSElasticIP", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReverseDNSElasticIP indicates an expected call of DeleteReverseDNSElasticIP.
func (mr *MockClientMockRecorder) DeleteReverseDNSElasticIP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReverseDNSElasticIP", reflect.TypeOf((*MockClient)(nil).DeleteReverseDNSElasticIP), ctx, id)
}

// DeleteReverseDNSInstance mocks base method.
func (m *MockClient) DeleteReverseDNSInstance(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReverseDNSInstance", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReverseDNSInstance indicates an expected call of DeleteReverseDNSInstance.
func (mr *MockClientMockRecorder) DeleteReverseDNSInstance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReverseDNSInstance", reflect.TypeOf((*MockClient)(nil).DeleteReverseDNSInstance), ctx, id)
}

// DeleteRuleFromSecurityGroup mocks base method.
func (m *MockClient) DeleteRuleFromSecurityGroup(ctx context.Context, id, ruleID v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRuleFromSecurityGroup", ctx, id, ruleID)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRuleFromSecurityGroup indicates an expected call of DeleteRuleFromSecurityGroup.
func (mr *MockClientMockRecorder) DeleteRuleFromSecurityGroup(ctx, id, ruleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRuleFromSecurityGroup", reflect.TypeOf((*MockClient)(nil).DeleteRuleFromSecurityGroup), ctx, id, ruleID)
}

// DeleteSKSCluster mocks base method.
func (m *MockClient) DeleteSKSCluster(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSKSCluster", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSKSCluster indicates an expected call of DeleteSKSCluster.
func (mr *MockClientMockRecorder) DeleteSKSCluster(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSKSCluster", reflect.TypeOf((*MockClient)(nil).DeleteSKSCluster), ctx, id)
}

// DeleteSKSNodepool mocks base method.
func (m *MockClient) DeleteSKSNodepool(ctx context.Context, id, sksNodepoolID v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSKSNodepool", ctx, id, sksNodepoolID)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSKSNodepool indicates an expected call of DeleteSKSNodepool.
func (mr *MockClientMockRecorder) DeleteSKSNodepool(ctx, id, sksNodepoolID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSKSNodepool", reflect.TypeOf((*MockClient)(nil).DeleteSKSNodepool), ctx, id, sksNodepoolID)
}

// DeleteSSHKey mocks base method.
func (m *MockClient) DeleteSSHKey(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSSHKey", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSSHKey indicates an expected call of DeleteSSHKey.
func (mr *MockClientMockRecorder) DeleteSSHKey(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSSHKey", reflect.TypeOf((*MockClient)(nil).DeleteSSHKey), ctx, name)
}

// DeleteSecurityGroup mocks base method.
func (m *MockClient) DeleteSecurityGroup(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockClientMockRecorder) DeleteSecurityGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockClient)(nil).DeleteSecurityGroup), ctx, id)
}

// DeleteSnapshot mocks base method.
func (m *MockClient) DeleteSnapshot(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockClientMockRecorder) DeleteSnapshot(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockClient)(nil).DeleteSnapshot), ctx, id)
}

// DeleteTemplate mocks base method.
func (m *MockClient) DeleteTemplate(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplate", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTemplate indicates an expected call of DeleteTemplate.
func (mr *MockClientMockRecorder) DeleteTemplate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplate", reflect.TypeOf((*MockClient)(nil).DeleteTemplate), ctx, id)
}

// DetachInstanceFromElasticIP mocks base method.
func (m *MockClient) DetachInstanceFromElasticIP(ctx context.Context, id v3.UUID, req v3.DetachInstanceFromElasticIPRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachInstanceFromElasticIP", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachInstanceFromElasticIP indicates an expected call of DetachInstanceFromElasticIP.
func (mr *MockClientMockRecorder) DetachInstanceFromElasticIP(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInstanceFromElasticIP", reflect.TypeOf((*MockClient)(nil).DetachInstanceFromElasticIP), ctx, id, req)
}

// DetachInstanceFromPrivateNetwork mocks base method.
func (m *MockClient) DetachInstanceFromPrivateNetwork(ctx context.Context, id v3.UUID, req v3.DetachInstanceFromPrivateNetworkRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachInstanceFromPrivateNetwork", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachInstanceFromPrivateNetwork indicates an expected call of DetachInstanceFromPrivateNetwork.
func (mr *MockClientMockRecorder) DetachInstanceFromPrivateNetwork(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInstanceFromPrivateNetwork", reflect.TypeOf((*MockClient)(nil).DetachInstanceFromPrivateNetwork), ctx, id, req)
}

// DetachInstanceFromSecurityGroup mocks base method.
func (m *MockClient) DetachInstanceFromSecurityGroup(ctx context.Context, id v3.UUID, req v3.DetachInstanceFromSecurityGroupRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachInstanceFromSecurityGroup", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachInstanceFromSecurityGroup indicates an expected call of DetachInstanceFromSecurityGroup.
func (mr *MockClientMockRecorder) DetachInstanceFromSecurityGroup(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachInstanceFromSecurityGroup", reflect.TypeOf((*MockClient)(nil).DetachInstanceFromSecurityGroup), ctx, id, req)
}

// EvictInstancePoolMembers mocks base method.
func (m *MockClient) EvictInstancePoolMembers(ctx context.Context, id v3.UUID, req v3.EvictInstancePoolMembersRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictInstancePoolMembers", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictInstancePoolMembers indicates an expected call of EvictInstancePoolMembers.
func (mr *MockClientMockRecorder) EvictInstancePoolMembers(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictInstancePoolMembers", reflect.TypeOf((*MockClient)(nil).EvictInstancePoolMembers), ctx, id, req)
}

// EvictSKSNodepoolMembers mocks base method.
func (m *MockClient) EvictSKSNodepoolMembers(ctx context.Context, id, sksNodepoolID v3.UUID, req v3.EvictSKSNodepoolMembersRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvictSKSNodepoolMembers", ctx, id, sksNodepoolID, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EvictSKSNodepoolMembers indicates an expected call of EvictSKSNodepoolMembers.
func (mr *MockClientMockRecorder) EvictSKSNodepoolMembers(ctx, id, sksNodepoolID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvictSKSNodepoolMembers", reflect.TypeOf((*MockClient)(nil).EvictSKSNodepoolMembers), ctx, id, sksNodepoolID, req)
}

// ExportSnapshot mocks base method.
func (m *MockClient) ExportSnapshot(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportSnapshot", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportSnapshot indicates an expected call of ExportSnapshot.
func (mr *MockClientMockRecorder) ExportSnapshot(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportSnapshot", reflect.TypeOf((*MockClient)(nil).ExportSnapshot), ctx, id)
}

// GenerateSKSClusterKubeconfig mocks base method.
func (m *MockClient) GenerateSKSClusterKubeconfig(ctx context.Context, id v3.UUID, req v3.SKSKubeconfigRequest) (*v3.GenerateSKSClusterKubeconfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSKSClusterKubeconfig", ctx, id, req)
	ret0, _ := ret[0].(*v3.GenerateSKSClusterKubeconfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSKSClusterKubeconfig indicates an expected call of GenerateSKSClusterKubeconfig.
func (mr *MockClientMockRecorder) GenerateSKSClusterKubeconfig(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSKSClusterKubeconfig", reflect.TypeOf((*MockClient)(nil).GenerateSKSClusterKubeconfig), ctx, id, req)
}

// GetAPIKey mocks base method.
func (m *MockClient) GetAPIKey(ctx context.Context, id string) (*v3.IAMAPIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKey", ctx, id)
	ret0, _ := ret[0].(*v3.IAMAPIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKey indicates an expected call of GetAPIKey.
func (mr *MockClientMockRecorder) GetAPIKey(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKey", reflect.TypeOf((*MockClient)(nil).GetAPIKey), ctx, id)
}

// GetAccessKey mocks base method.
func (m *MockClient) GetAccessKey(ctx context.Context, key string) (*v3.AccessKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessKey", ctx, key)
	ret0, _ := ret[0].(*v3.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessKey indicates an expected call of GetAccessKey.
func (mr *MockClientMockRecorder) GetAccessKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessKey", reflect.TypeOf((*MockClient)(nil).GetAccessKey), ctx, key)
}

// GetAntiAffinityGroup mocks base method.
func (m *MockClient) GetAntiAffinityGroup(ctx context.Context, id v3.UUID) (*v3.AntiAffinityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAntiAffinityGroup", ctx, id)
	ret0, _ := ret[0].(*v3.AntiAffinityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAntiAffinityGroup indicates an expected call of GetAntiAffinityGroup.
func (mr *MockClientMockRecorder) GetAntiAffinityGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAntiAffinityGroup", reflect.TypeOf((*MockClient)(nil).GetAntiAffinityGroup), ctx, id)
}

// GetDBAASCACertificate mocks base method.
func (m *MockClient) GetDBAASCACertificate(ctx context.Context) (*v3.GetDBAASCACertificateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASCACertificate", ctx)
	ret0, _ := ret[0].(*v3.GetDBAASCACertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASCACertificate indicates an expected call of GetDBAASCACertificate.
func (mr *MockClientMockRecorder) GetDBAASCACertificate(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASCACertificate", reflect.TypeOf((*MockClient)(nil).GetDBAASCACertificate), ctx)
}

// GetDBAASIntegration mocks base method.
func (m *MockClient) GetDBAASIntegration(ctx context.Context, id v3.UUID) (*v3.DBAASIntegration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASIntegration", ctx, id)
	ret0, _ := ret[0].(*v3.DBAASIntegration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASIntegration indicates an expected call of GetDBAASIntegration.
func (mr *MockClientMockRecorder) GetDBAASIntegration(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASIntegration", reflect.TypeOf((*MockClient)(nil).GetDBAASIntegration), ctx, id)
}

// GetDBAASKafkaAclConfig mocks base method.
func (m *MockClient) GetDBAASKafkaAclConfig(ctx context.Context, name string) (*v3.DBAASKafkaAcls, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASKafkaAclConfig", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASKafkaAcls)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASKafkaAclConfig indicates an expected call of GetDBAASKafkaAclConfig.
func (mr *MockClientMockRecorder) GetDBAASKafkaAclConfig(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASKafkaAclConfig", reflect.TypeOf((*MockClient)(nil).GetDBAASKafkaAclConfig), ctx, name)
}

// GetDBAASMigrationStatus mocks base method.
func (m *MockClient) GetDBAASMigrationStatus(ctx context.Context, name string) (*v3.DBAASMigrationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASMigrationStatus", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASMigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASMigrationStatus indicates an expected call of GetDBAASMigrationStatus.
func (mr *MockClientMockRecorder) GetDBAASMigrationStatus(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASMigrationStatus", reflect.TypeOf((*MockClient)(nil).GetDBAASMigrationStatus), ctx, name)
}

// GetDBAASOpensearchAclConfig mocks base method.
func (m *MockClient) GetDBAASOpensearchAclConfig(ctx context.Context, name string) (*v3.DBAASOpensearchAclConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASOpensearchAclConfig", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASOpensearchAclConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASOpensearchAclConfig indicates an expected call of GetDBAASOpensearchAclConfig.
func (mr *MockClientMockRecorder) GetDBAASOpensearchAclConfig(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASOpensearchAclConfig", reflect.TypeOf((*MockClient)(nil).GetDBAASOpensearchAclConfig), ctx, name)
}

// GetDBAASServiceGrafana mocks base method.
func (m *MockClient) GetDBAASServiceGrafana(ctx context.Context, name string) (*v3.DBAASServiceGrafana, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceGrafana", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASServiceGrafana)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceGrafana indicates an expected call of GetDBAASServiceGrafana.
func (mr *MockClientMockRecorder) GetDBAASServiceGrafana(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceGrafana", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceGrafana), ctx, name)
}

// GetDBAASServiceKafka mocks base method.
func (m *MockClient) GetDBAASServiceKafka(ctx context.Context, name string) (*v3.DBAASServiceKafka, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceKafka", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASServiceKafka)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceKafka indicates an expected call of GetDBAASServiceKafka.
func (mr *MockClientMockRecorder) GetDBAASServiceKafka(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceKafka", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceKafka), ctx, name)
}

// GetDBAASServiceLogs mocks base method.
func (m *MockClient) GetDBAASServiceLogs(ctx context.Context, serviceName string, req v3.GetDBAASServiceLogsRequest) (*v3.DBAASServiceLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceLogs", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.DBAASServiceLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceLogs indicates an expected call of GetDBAASServiceLogs.
func (mr *MockClientMockRecorder) GetDBAASServiceLogs(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceLogs", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceLogs), ctx, serviceName, req)
}

// GetDBAASServiceMetrics mocks base method.
func (m *MockClient) GetDBAASServiceMetrics(ctx context.Context, serviceName string, req v3.GetDBAASServiceMetricsRequest) (*v3.GetDBAASServiceMetricsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceMetrics", ctx, serviceName, req)
	ret0, _ := ret[0].(*v3.GetDBAASServiceMetricsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceMetrics indicates an expected call of GetDBAASServiceMetrics.
func (mr *MockClientMockRecorder) GetDBAASServiceMetrics(ctx, serviceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceMetrics", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceMetrics), ctx, serviceName, req)
}

// GetDBAASServiceMysql mocks base method.
func (m *MockClient) GetDBAASServiceMysql(ctx context.Context, name string) (*v3.DBAASServiceMysql, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceMysql", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASServiceMysql)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceMysql indicates an expected call of GetDBAASServiceMysql.
func (mr *MockClientMockRecorder) GetDBAASServiceMysql(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceMysql", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceMysql), ctx, name)
}

// GetDBAASServiceOpensearch mocks base method.
func (m *MockClient) GetDBAASServiceOpensearch(ctx context.Context, name string) (*v3.DBAASServiceOpensearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceOpensearch", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASServiceOpensearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceOpensearch indicates an expected call of GetDBAASServiceOpensearch.
func (mr *MockClientMockRecorder) GetDBAASServiceOpensearch(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceOpensearch", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceOpensearch), ctx, name)
}

// GetDBAASServicePG mocks base method.
func (m *MockClient) GetDBAASServicePG(ctx context.Context, name string) (*v3.DBAASServicePG, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServicePG", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASServicePG)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServicePG indicates an expected call of GetDBAASServicePG.
func (mr *MockClientMockRecorder) GetDBAASServicePG(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServicePG", reflect.TypeOf((*MockClient)(nil).GetDBAASServicePG), ctx, name)
}

// GetDBAASServiceRedis mocks base method.
func (m *MockClient) GetDBAASServiceRedis(ctx context.Context, name string) (*v3.DBAASServiceRedis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceRedis", ctx, name)
	ret0, _ := ret[0].(*v3.DBAASServiceRedis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceRedis indicates an expected call of GetDBAASServiceRedis.
func (mr *MockClientMockRecorder) GetDBAASServiceRedis(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceRedis", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceRedis), ctx, name)
}

// GetDBAASServiceType mocks base method.
func (m *MockClient) GetDBAASServiceType(ctx context.Context, serviceTypeName string) (*v3.DBAASServiceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASServiceType", ctx, serviceTypeName)
	ret0, _ := ret[0].(*v3.DBAASServiceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASServiceType indicates an expected call of GetDBAASServiceType.
func (mr *MockClientMockRecorder) GetDBAASServiceType(ctx, serviceTypeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASServiceType", reflect.TypeOf((*MockClient)(nil).GetDBAASServiceType), ctx, serviceTypeName)
}

// GetDBAASSettingsGrafana mocks base method.
func (m *MockClient) GetDBAASSettingsGrafana(ctx context.Context) (*v3.GetDBAASSettingsGrafanaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASSettingsGrafana", ctx)
	ret0, _ := ret[0].(*v3.GetDBAASSettingsGrafanaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASSettingsGrafana indicates an expected call of GetDBAASSettingsGrafana.
func (mr *MockClientMockRecorder) GetDBAASSettingsGrafana(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASSettingsGrafana", reflect.TypeOf((*MockClient)(nil).GetDBAASSettingsGrafana), ctx)
}

// GetDBAASSettingsKafka mocks base method.
func (m *MockClient) GetDBAASSettingsKafka(ctx context.Context) (*v3.GetDBAASSettingsKafkaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASSettingsKafka", ctx)
	ret0, _ := ret[0].(*v3.GetDBAASSettingsKafkaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASSettingsKafka indicates an expected call of GetDBAASSettingsKafka.
func (mr *MockClientMockRecorder) GetDBAASSettingsKafka(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASSettingsKafka", reflect.TypeOf((*MockClient)(nil).GetDBAASSettingsKafka), ctx)
}

// GetDBAASSettingsMysql mocks base method.
func (m *MockClient) GetDBAASSettingsMysql(ctx context.Context) (*v3.GetDBAASSettingsMysqlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASSettingsMysql", ctx)
	ret0, _ := ret[0].(*v3.GetDBAASSettingsMysqlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASSettingsMysql indicates an expected call of GetDBAASSettingsMysql.
func (mr *MockClientMockRecorder) GetDBAASSettingsMysql(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASSettingsMysql", reflect.TypeOf((*MockClient)(nil).GetDBAASSettingsMysql), ctx)
}

// GetDBAASSettingsOpensearch mocks base method.
func (m *MockClient) GetDBAASSettingsOpensearch(ctx context.Context) (*v3.GetDBAASSettingsOpensearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASSettingsOpensearch", ctx)
	ret0, _ := ret[0].(*v3.GetDBAASSettingsOpensearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASSettingsOpensearch indicates an expected call of GetDBAASSettingsOpensearch.
func (mr *MockClientMockRecorder) GetDBAASSettingsOpensearch(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASSettingsOpensearch", reflect.TypeOf((*MockClient)(nil).GetDBAASSettingsOpensearch), ctx)
}

// GetDBAASSettingsPG mocks base method.
func (m *MockClient) GetDBAASSettingsPG(ctx context.Context) (*v3.GetDBAASSettingsPGResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASSettingsPG", ctx)
	ret0, _ := ret[0].(*v3.GetDBAASSettingsPGResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASSettingsPG indicates an expected call of GetDBAASSettingsPG.
func (mr *MockClientMockRecorder) GetDBAASSettingsPG(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASSettingsPG", reflect.TypeOf((*MockClient)(nil).GetDBAASSettingsPG), ctx)
}

// GetDBAASSettingsRedis mocks base method.
func (m *MockClient) GetDBAASSettingsRedis(ctx context.Context) (*v3.GetDBAASSettingsRedisResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASSettingsRedis", ctx)
	ret0, _ := ret[0].(*v3.GetDBAASSettingsRedisResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASSettingsRedis indicates an expected call of GetDBAASSettingsRedis.
func (mr *MockClientMockRecorder) GetDBAASSettingsRedis(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASSettingsRedis", reflect.TypeOf((*MockClient)(nil).GetDBAASSettingsRedis), ctx)
}

// GetDBAASTask mocks base method.
func (m *MockClient) GetDBAASTask(ctx context.Context, service string, id v3.UUID) (*v3.DBAASTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBAASTask", ctx, service, id)
	ret0, _ := ret[0].(*v3.DBAASTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBAASTask indicates an expected call of GetDBAASTask.
func (mr *MockClientMockRecorder) GetDBAASTask(ctx, service, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBAASTask", reflect.TypeOf((*MockClient)(nil).GetDBAASTask), ctx, service, id)
}

// GetDNSDomain mocks base method.
func (m *MockClient) GetDNSDomain(ctx context.Context, id v3.UUID) (*v3.DNSDomain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSDomain", ctx, id)
	ret0, _ := ret[0].(*v3.DNSDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSDomain indicates an expected call of GetDNSDomain.
func (mr *MockClientMockRecorder) GetDNSDomain(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSDomain", reflect.TypeOf((*MockClient)(nil).GetDNSDomain), ctx, id)
}

// GetDNSDomainRecord mocks base method.
func (m *MockClient) GetDNSDomainRecord(ctx context.Context, domainID, recordID v3.UUID) (*v3.DNSDomainRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSDomainRecord", ctx, domainID, recordID)
	ret0, _ := ret[0].(*v3.DNSDomainRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSDomainRecord indicates an expected call of GetDNSDomainRecord.
func (mr *MockClientMockRecorder) GetDNSDomainRecord(ctx, domainID, recordID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSDomainRecord", reflect.TypeOf((*MockClient)(nil).GetDNSDomainRecord), ctx, domainID, recordID)
}

// GetDNSDomainZoneFile mocks base method.
func (m *MockClient) GetDNSDomainZoneFile(ctx context.Context, id v3.UUID) (*v3.GetDNSDomainZoneFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDNSDomainZoneFile", ctx, id)
	ret0, _ := ret[0].(*v3.GetDNSDomainZoneFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDNSDomainZoneFile indicates an expected call of GetDNSDomainZoneFile.
func (mr *MockClientMockRecorder) GetDNSDomainZoneFile(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDNSDomainZoneFile", reflect.TypeOf((*MockClient)(nil).GetDNSDomainZoneFile), ctx, id)
}

// GetDeployTarget mocks base method.
func (m *MockClient) GetDeployTarget(ctx context.Context, id v3.UUID) (*v3.DeployTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployTarget", ctx, id)
	ret0, _ := ret[0].(*v3.DeployTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployTarget indicates an expected call of GetDeployTarget.
func (mr *MockClientMockRecorder) GetDeployTarget(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployTarget", reflect.TypeOf((*MockClient)(nil).GetDeployTarget), ctx, id)
}

// GetElasticIP mocks base method.
func (m *MockClient) GetElasticIP(ctx context.Context, id v3.UUID) (*v3.ElasticIP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetElasticIP", ctx, id)
	ret0, _ := ret[0].(*v3.ElasticIP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetElasticIP indicates an expected call of GetElasticIP.
func (mr *MockClientMockRecorder) GetElasticIP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetElasticIP", reflect.TypeOf((*MockClient)(nil).GetElasticIP), ctx, id)
}

// GetIAMOrganizationPolicy mocks base method.
func (m *MockClient) GetIAMOrganizationPolicy(ctx context.Context) (*v3.IAMPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIAMOrganizationPolicy", ctx)
	ret0, _ := ret[0].(*v3.IAMPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIAMOrganizationPolicy indicates an expected call of GetIAMOrganizationPolicy.
func (mr *MockClientMockRecorder) GetIAMOrganizationPolicy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIAMOrganizationPolicy", reflect.TypeOf((*MockClient)(nil).GetIAMOrganizationPolicy), ctx)
}

// GetIAMRole mocks base method.
func (m *MockClient) GetIAMRole(ctx context.Context, id v3.UUID) (*v3.IAMRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIAMRole", ctx, id)
	ret0, _ := ret[0].(*v3.IAMRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIAMRole indicates an expected call of GetIAMRole.
func (mr *MockClientMockRecorder) GetIAMRole(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIAMRole", reflect.TypeOf((*MockClient)(nil).GetIAMRole), ctx, id)
}

// GetInstance mocks base method.
func (m *MockClient) GetInstance(ctx context.Context, id v3.UUID) (*v3.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", ctx, id)
	ret0, _ := ret[0].(*v3.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockClientMockRecorder) GetInstance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockClient)(nil).GetInstance), ctx, id)
}

// GetInstancePool mocks base method.
func (m *MockClient) GetInstancePool(ctx context.Context, id v3.UUID) (*v3.InstancePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancePool", ctx, id)
	ret0, _ := ret[0].(*v3.InstancePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancePool indicates an expected call of GetInstancePool.
func (mr *MockClientMockRecorder) GetInstancePool(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancePool", reflect.TypeOf((*MockClient)(nil).GetInstancePool), ctx, id)
}

// GetInstanceType mocks base method.
func (m *MockClient) GetInstanceType(ctx context.Context, id v3.UUID) (*v3.InstanceType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceType", ctx, id)
	ret0, _ := ret[0].(*v3.InstanceType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceType indicates an expected call of GetInstanceType.
func (mr *MockClientMockRecorder) GetInstanceType(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceType", reflect.TypeOf((*MockClient)(nil).GetInstanceType), ctx, id)
}

// GetLoadBalancer mocks base method.
func (m *MockClient) GetLoadBalancer(ctx context.Context, id v3.UUID) (*v3.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", ctx, id)
	ret0, _ := ret[0].(*v3.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockClientMockRecorder) GetLoadBalancer(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockClient)(nil).GetLoadBalancer), ctx, id)
}

// GetLoadBalancerService mocks base method.
func (m *MockClient) GetLoadBalancerService(ctx context.Context, id, serviceID v3.UUID) (*v3.LoadBalancerService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerService", ctx, id, serviceID)
	ret0, _ := ret[0].(*v3.LoadBalancerService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerService indicates an expected call of GetLoadBalancerService.
func (mr *MockClientMockRecorder) GetLoadBalancerService(ctx, id, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerService", reflect.TypeOf((*MockClient)(nil).GetLoadBalancerService), ctx, id, serviceID)
}

// GetOperation mocks base method.
func (m *MockClient) GetOperation(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockClientMockRecorder) GetOperation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockClient)(nil).GetOperation), ctx, id)
}

// GetPrivateNetwork mocks base method.
func (m *MockClient) GetPrivateNetwork(ctx context.Context, id v3.UUID) (*v3.PrivateNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateNetwork", ctx, id)
	ret0, _ := ret[0].(*v3.PrivateNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateNetwork indicates an expected call of GetPrivateNetwork.
func (mr *MockClientMockRecorder) GetPrivateNetwork(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateNetwork", reflect.TypeOf((*MockClient)(nil).GetPrivateNetwork), ctx, id)
}

// GetQuota mocks base method.
func (m *MockClient) GetQuota(ctx context.Context, entity string) (*v3.Quota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", ctx, entity)
	ret0, _ := ret[0].(*v3.Quota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuota indicates an expected call of GetQuota.
func (mr *MockClientMockRecorder) GetQuota(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockClient)(nil).GetQuota), ctx, entity)
}

// GetReverseDNSElasticIP mocks base method.
func (m *MockClient) GetReverseDNSElasticIP(ctx context.Context, id v3.UUID) (*v3.ReverseDNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReverseDNSElasticIP", ctx, id)
	ret0, _ := ret[0].(*v3.ReverseDNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReverseDNSElasticIP indicates an expected call of GetReverseDNSElasticIP.
func (mr *MockClientMockRecorder) GetReverseDNSElasticIP(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReverseDNSElasticIP", reflect.TypeOf((*MockClient)(nil).GetReverseDNSElasticIP), ctx, id)
}

// GetReverseDNSInstance mocks base method.
func (m *MockClient) GetReverseDNSInstance(ctx context.Context, id v3.UUID) (*v3.ReverseDNSRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReverseDNSInstance", ctx, id)
	ret0, _ := ret[0].(*v3.ReverseDNSRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReverseDNSInstance indicates an expected call of GetReverseDNSInstance.
func (mr *MockClientMockRecorder) GetReverseDNSInstance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReverseDNSInstance", reflect.TypeOf((*MockClient)(nil).GetReverseDNSInstance), ctx, id)
}

// GetSKSCluster mocks base method.
func (m *MockClient) GetSKSCluster(ctx context.Context, id v3.UUID) (*v3.SKSCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSKSCluster", ctx, id)
	ret0, _ := ret[0].(*v3.SKSCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSKSCluster indicates an expected call of GetSKSCluster.
func (mr *MockClientMockRecorder) GetSKSCluster(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSKSCluster", reflect.TypeOf((*MockClient)(nil).GetSKSCluster), ctx, id)
}

// GetSKSClusterAuthorityCert mocks base method.
func (m *MockClient) GetSKSClusterAuthorityCert(ctx context.Context, id v3.UUID, authority v3.GetSKSClusterAuthorityCertAuthority) (*v3.GetSKSClusterAuthorityCertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSKSClusterAuthorityCert", ctx, id, authority)
	ret0, _ := ret[0].(*v3.GetSKSClusterAuthorityCertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSKSClusterAuthorityCert indicates an expected call of GetSKSClusterAuthorityCert.
func (mr *MockClientMockRecorder) GetSKSClusterAuthorityCert(ctx, id, authority any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSKSClusterAuthorityCert", reflect.TypeOf((*MockClient)(nil).GetSKSClusterAuthorityCert), ctx, id, authority)
}

// GetSKSClusterInspection mocks base method.
func (m *MockClient) GetSKSClusterInspection(ctx context.Context, id v3.UUID) (*v3.GetSKSClusterInspectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSKSClusterInspection", ctx, id)
	ret0, _ := ret[0].(*v3.GetSKSClusterInspectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSKSClusterInspection indicates an expected call of GetSKSClusterInspection.
func (mr *MockClientMockRecorder) GetSKSClusterInspection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSKSClusterInspection", reflect.TypeOf((*MockClient)(nil).GetSKSClusterInspection), ctx, id)
}

// GetSKSNodepool mocks base method.
func (m *MockClient) GetSKSNodepool(ctx context.Context, id, sksNodepoolID v3.UUID) (*v3.SKSNodepool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSKSNodepool", ctx, id, sksNodepoolID)
	ret0, _ := ret[0].(*v3.SKSNodepool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSKSNodepool indicates an expected call of GetSKSNodepool.
func (mr *MockClientMockRecorder) GetSKSNodepool(ctx, id, sksNodepoolID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSKSNodepool", reflect.TypeOf((*MockClient)(nil).GetSKSNodepool), ctx, id, sksNodepoolID)
}

// GetSOSPresignedURL mocks base method.
func (m *MockClient) GetSOSPresignedURL(ctx context.Context, bucket string, opts ...v3.GetSOSPresignedURLOpt) (*v3.GetSOSPresignedURLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, bucket}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSOSPresignedURL", varargs...)
	ret0, _ := ret[0].(*v3.GetSOSPresignedURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSOSPresignedURL indicates an expected call of GetSOSPresignedURL.
func (mr *MockClientMockRecorder) GetSOSPresignedURL(ctx, bucket any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, bucket}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSOSPresignedURL", reflect.TypeOf((*MockClient)(nil).GetSOSPresignedURL), varargs...)
}

// GetSSHKey mocks base method.
func (m *MockClient) GetSSHKey(ctx context.Context, name string) (*v3.SSHKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHKey", ctx, name)
	ret0, _ := ret[0].(*v3.SSHKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHKey indicates an expected call of GetSSHKey.
func (mr *MockClientMockRecorder) GetSSHKey(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHKey", reflect.TypeOf((*MockClient)(nil).GetSSHKey), ctx, name)
}

// GetSecurityGroup mocks base method.
func (m *MockClient) GetSecurityGroup(ctx context.Context, id v3.UUID) (*v3.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", ctx, id)
	ret0, _ := ret[0].(*v3.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockClientMockRecorder) GetSecurityGroup(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockClient)(nil).GetSecurityGroup), ctx, id)
}

// GetSnapshot mocks base method.
func (m *MockClient) GetSnapshot(ctx context.Context, id v3.UUID) (*v3.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, id)
	ret0, _ := ret[0].(*v3.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockClientMockRecorder) GetSnapshot(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockClient)(nil).GetSnapshot), ctx, id)
}

// GetTemplate mocks base method.
func (m *MockClient) GetTemplate(ctx context.Context, id v3.UUID) (*v3.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", ctx, id)
	ret0, _ := ret[0].(*v3.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockClientMockRecorder) GetTemplate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockClient)(nil).GetTemplate), ctx, id)
}

// ListAPIKeys mocks base method.
func (m *MockClient) ListAPIKeys(ctx context.Context) (*v3.ListAPIKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAPIKeys", ctx)
	ret0, _ := ret[0].(*v3.ListAPIKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIKeys indicates an expected call of ListAPIKeys.
func (mr *MockClientMockRecorder) ListAPIKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIKeys", reflect.TypeOf((*MockClient)(nil).ListAPIKeys), ctx)
}

// ListAccessKeyKnownOperations mocks base method.
func (m *MockClient) ListAccessKeyKnownOperations(ctx context.Context) (*v3.ListAccessKeyKnownOperationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessKeyKnownOperations", ctx)
	ret0, _ := ret[0].(*v3.ListAccessKeyKnownOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessKeyKnownOperations indicates an expected call of ListAccessKeyKnownOperations.
func (mr *MockClientMockRecorder) ListAccessKeyKnownOperations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessKeyKnownOperations", reflect.TypeOf((*MockClient)(nil).ListAccessKeyKnownOperations), ctx)
}

// ListAccessKeyOperations mocks base method.
func (m *MockClient) ListAccessKeyOperations(ctx context.Context) (*v3.ListAccessKeyOperationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessKeyOperations", ctx)
	ret0, _ := ret[0].(*v3.ListAccessKeyOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessKeyOperations indicates an expected call of ListAccessKeyOperations.
func (mr *MockClientMockRecorder) ListAccessKeyOperations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessKeyOperations", reflect.TypeOf((*MockClient)(nil).ListAccessKeyOperations), ctx)
}

// ListAccessKeys mocks base method.
func (m *MockClient) ListAccessKeys(ctx context.Context) (*v3.ListAccessKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccessKeys", ctx)
	ret0, _ := ret[0].(*v3.ListAccessKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccessKeys indicates an expected call of ListAccessKeys.
func (mr *MockClientMockRecorder) ListAccessKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccessKeys", reflect.TypeOf((*MockClient)(nil).ListAccessKeys), ctx)
}

// ListAntiAffinityGroups mocks base method.
func (m *MockClient) ListAntiAffinityGroups(ctx context.Context) (*v3.ListAntiAffinityGroupsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAntiAffinityGroups", ctx)
	ret0, _ := ret[0].(*v3.ListAntiAffinityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAntiAffinityGroups indicates an expected call of ListAntiAffinityGroups.
func (mr *MockClientMockRecorder) ListAntiAffinityGroups(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAntiAffinityGroups", reflect.TypeOf((*MockClient)(nil).ListAntiAffinityGroups), ctx)
}

// ListDBAASIntegrationSettings mocks base method.
func (m *MockClient) ListDBAASIntegrationSettings(ctx context.Context, integrationType, sourceType, destType string) (*v3.ListDBAASIntegrationSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDBAASIntegrationSettings", ctx, integrationType, sourceType, destType)
	ret0, _ := ret[0].(*v3.ListDBAASIntegrationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDBAASIntegrationSettings indicates an expected call of ListDBAASIntegrationSettings.
func (mr *MockClientMockRecorder) ListDBAASIntegrationSettings(ctx, integrationType, sourceType, destType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDBAASIntegrationSettings", reflect.TypeOf((*MockClient)(nil).ListDBAASIntegrationSettings), ctx, integrationType, sourceType, destType)
}

// ListDBAASIntegrationTypes mocks base method.
func (m *MockClient) ListDBAASIntegrationTypes(ctx context.Context) (*v3.ListDBAASIntegrationTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDBAASIntegrationTypes", ctx)
	ret0, _ := ret[0].(*v3.ListDBAASIntegrationTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDBAASIntegrationTypes indicates an expected call of ListDBAASIntegrationTypes.
func (mr *MockClientMockRecorder) ListDBAASIntegrationTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDBAASIntegrationTypes", reflect.TypeOf((*MockClient)(nil).ListDBAASIntegrationTypes), ctx)
}

// ListDBAASServiceTypes mocks base method.
func (m *MockClient) ListDBAASServiceTypes(ctx context.Context) (*v3.ListDBAASServiceTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDBAASServiceTypes", ctx)
	ret0, _ := ret[0].(*v3.ListDBAASServiceTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDBAASServiceTypes indicates an expected call of ListDBAASServiceTypes.
func (mr *MockClientMockRecorder) ListDBAASServiceTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDBAASServiceTypes", reflect.TypeOf((*MockClient)(nil).ListDBAASServiceTypes), ctx)
}

// ListDBAASServices mocks base method.
func (m *MockClient) ListDBAASServices(ctx context.Context) (*v3.ListDBAASServicesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDBAASServices", ctx)
	ret0, _ := ret[0].(*v3.ListDBAASServicesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDBAASServices indicates an expected call of ListDBAASServices.
func (mr *MockClientMockRecorder) ListDBAASServices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDBAASServices", reflect.TypeOf((*MockClient)(nil).ListDBAASServices), ctx)
}

// ListDNSDomainRecords mocks base method.
func (m *MockClient) ListDNSDomainRecords(ctx context.Context, domainID v3.UUID) (*v3.ListDNSDomainRecordsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDNSDomainRecords", ctx, domainID)
	ret0, _ := ret[0].(*v3.ListDNSDomainRecordsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDNSDomainRecords indicates an expected call of ListDNSDomainRecords.
func (mr *MockClientMockRecorder) ListDNSDomainRecords(ctx, domainID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDNSDomainRecords", reflect.TypeOf((*MockClient)(nil).ListDNSDomainRecords), ctx, domainID)
}

// ListDNSDomains mocks base method.
func (m *MockClient) ListDNSDomains(ctx context.Context) (*v3.ListDNSDomainsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDNSDomains", ctx)
	ret0, _ := ret[0].(*v3.ListDNSDomainsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDNSDomains indicates an expected call of ListDNSDomains.
func (mr *MockClientMockRecorder) ListDNSDomains(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDNSDomains", reflect.TypeOf((*MockClient)(nil).ListDNSDomains), ctx)
}

// ListDeployTargets mocks base method.
func (m *MockClient) ListDeployTargets(ctx context.Context) (*v3.ListDeployTargetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployTargets", ctx)
	ret0, _ := ret[0].(*v3.ListDeployTargetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployTargets indicates an expected call of ListDeployTargets.
func (mr *MockClientMockRecorder) ListDeployTargets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployTargets", reflect.TypeOf((*MockClient)(nil).ListDeployTargets), ctx)
}

// ListElasticIPS mocks base method.
func (m *MockClient) ListElasticIPS(ctx context.Context) (*v3.ListElasticIPSResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListElasticIPS", ctx)
	ret0, _ := ret[0].(*v3.ListElasticIPSResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListElasticIPS indicates an expected call of ListElasticIPS.
func (mr *MockClientMockRecorder) ListElasticIPS(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListElasticIPS", reflect.TypeOf((*MockClient)(nil).ListElasticIPS), ctx)
}

// ListEvents mocks base method.
func (m *MockClient) ListEvents(ctx context.Context, opts ...v3.ListEventsOpt) ([]v3.Event, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEvents", varargs...)
	ret0, _ := ret[0].([]v3.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockClientMockRecorder) ListEvents(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockClient)(nil).ListEvents), varargs...)
}

// ListIAMRoles mocks base method.
func (m *MockClient) ListIAMRoles(ctx context.Context) (*v3.ListIAMRolesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIAMRoles", ctx)
	ret0, _ := ret[0].(*v3.ListIAMRolesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIAMRoles indicates an expected call of ListIAMRoles.
func (mr *MockClientMockRecorder) ListIAMRoles(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIAMRoles", reflect.TypeOf((*MockClient)(nil).ListIAMRoles), ctx)
}

// ListInstancePools mocks base method.
func (m *MockClient) ListInstancePools(ctx context.Context) (*v3.ListInstancePoolsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstancePools", ctx)
	ret0, _ := ret[0].(*v3.ListInstancePoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstancePools indicates an expected call of ListInstancePools.
func (mr *MockClientMockRecorder) ListInstancePools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstancePools", reflect.TypeOf((*MockClient)(nil).ListInstancePools), ctx)
}

// ListInstanceTypes mocks base method.
func (m *MockClient) ListInstanceTypes(ctx context.Context) (*v3.ListInstanceTypesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstanceTypes", ctx)
	ret0, _ := ret[0].(*v3.ListInstanceTypesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstanceTypes indicates an expected call of ListInstanceTypes.
func (mr *MockClientMockRecorder) ListInstanceTypes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstanceTypes", reflect.TypeOf((*MockClient)(nil).ListInstanceTypes), ctx)
}

// ListInstances mocks base method.
func (m *MockClient) ListInstances(ctx context.Context, opts ...v3.ListInstancesOpt) (*v3.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInstances", varargs...)
	ret0, _ := ret[0].(*v3.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockClientMockRecorder) ListInstances(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockClient)(nil).ListInstances), varargs...)
}

// ListLoadBalancers mocks base method.
func (m *MockClient) ListLoadBalancers(ctx context.Context) (*v3.ListLoadBalancersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancers", ctx)
	ret0, _ := ret[0].(*v3.ListLoadBalancersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers.
func (mr *MockClientMockRecorder) ListLoadBalancers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockClient)(nil).ListLoadBalancers), ctx)
}

// ListPrivateNetworks mocks base method.
func (m *MockClient) ListPrivateNetworks(ctx context.Context) (*v3.ListPrivateNetworksResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrivateNetworks", ctx)
	ret0, _ := ret[0].(*v3.ListPrivateNetworksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPrivateNetworks indicates an expected call of ListPrivateNetworks.
func (mr *MockClientMockRecorder) ListPrivateNetworks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrivateNetworks", reflect.TypeOf((*MockClient)(nil).ListPrivateNetworks), ctx)
}

// ListQuotas mocks base method.
func (m *MockClient) ListQuotas(ctx context.Context) (*v3.ListQuotasResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotas", ctx)
	ret0, _ := ret[0].(*v3.ListQuotasResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotas indicates an expected call of ListQuotas.
func (mr *MockClientMockRecorder) ListQuotas(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotas", reflect.TypeOf((*MockClient)(nil).ListQuotas), ctx)
}

// ListSKSClusterDeprecatedResources mocks base method.
func (m *MockClient) ListSKSClusterDeprecatedResources(ctx context.Context, id v3.UUID) ([]v3.SKSClusterDeprecatedResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSKSClusterDeprecatedResources", ctx, id)
	ret0, _ := ret[0].([]v3.SKSClusterDeprecatedResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSKSClusterDeprecatedResources indicates an expected call of ListSKSClusterDeprecatedResources.
func (mr *MockClientMockRecorder) ListSKSClusterDeprecatedResources(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSKSClusterDeprecatedResources", reflect.TypeOf((*MockClient)(nil).ListSKSClusterDeprecatedResources), ctx, id)
}

// ListSKSClusterVersions mocks base method.
func (m *MockClient) ListSKSClusterVersions(ctx context.Context, opts ...v3.ListSKSClusterVersionsOpt) (*v3.ListSKSClusterVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSKSClusterVersions", varargs...)
	ret0, _ := ret[0].(*v3.ListSKSClusterVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSKSClusterVersions indicates an expected call of ListSKSClusterVersions.
func (mr *MockClientMockRecorder) ListSKSClusterVersions(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSKSClusterVersions", reflect.TypeOf((*MockClient)(nil).ListSKSClusterVersions), varargs...)
}

// ListSKSClusters mocks base method.
func (m *MockClient) ListSKSClusters(ctx context.Context) (*v3.ListSKSClustersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSKSClusters", ctx)
	ret0, _ := ret[0].(*v3.ListSKSClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSKSClusters indicates an expected call of ListSKSClusters.
func (mr *MockClientMockRecorder) ListSKSClusters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSKSClusters", reflect.TypeOf((*MockClient)(nil).ListSKSClusters), ctx)
}

// ListSOSBucketsUsage mocks base method.
func (m *MockClient) ListSOSBucketsUsage(ctx context.Context) (*v3.ListSOSBucketsUsageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSOSBucketsUsage", ctx)
	ret0, _ := ret[0].(*v3.ListSOSBucketsUsageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSOSBucketsUsage indicates an expected call of ListSOSBucketsUsage.
func (mr *MockClientMockRecorder) ListSOSBucketsUsage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSOSBucketsUsage", reflect.TypeOf((*MockClient)(nil).ListSOSBucketsUsage), ctx)
}

// ListSSHKeys mocks base method.
func (m *MockClient) ListSSHKeys(ctx context.Context) (*v3.ListSSHKeysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSSHKeys", ctx)
	ret0, _ := ret[0].(*v3.ListSSHKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSSHKeys indicates an expected call of ListSSHKeys.
func (mr *MockClientMockRecorder) ListSSHKeys(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSSHKeys", reflect.TypeOf((*MockClient)(nil).ListSSHKeys), ctx)
}

// ListSecurityGroups mocks base method.
func (m *MockClient) ListSecurityGroups(ctx context.Context, opts ...v3.ListSecurityGroupsOpt) (*v3.ListSecurityGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSecurityGroups", varargs...)
	ret0, _ := ret[0].(*v3.ListSecurityGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroups indicates an expected call of ListSecurityGroups.
func (mr *MockClientMockRecorder) ListSecurityGroups(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroups", reflect.TypeOf((*MockClient)(nil).ListSecurityGroups), varargs...)
}

// ListSnapshots mocks base method.
func (m *MockClient) ListSnapshots(ctx context.Context) (*v3.ListSnapshotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", ctx)
	ret0, _ := ret[0].(*v3.ListSnapshotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockClientMockRecorder) ListSnapshots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockClient)(nil).ListSnapshots), ctx)
}

// ListTemplates mocks base method.
func (m *MockClient) ListTemplates(ctx context.Context, opts ...v3.ListTemplatesOpt) (*v3.ListTemplatesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTemplates", varargs...)
	ret0, _ := ret[0].(*v3.ListTemplatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTemplates indicates an expected call of ListTemplates.
func (mr *MockClientMockRecorder) ListTemplates(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplates", reflect.TypeOf((*MockClient)(nil).ListTemplates), varargs...)
}

// ListZones mocks base method.
func (m *MockClient) ListZones(ctx context.Context) (*v3.ListZonesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZones", ctx)
	ret0, _ := ret[0].(*v3.ListZonesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZones indicates an expected call of ListZones.
func (mr *MockClientMockRecorder) ListZones(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZones", reflect.TypeOf((*MockClient)(nil).ListZones), ctx)
}

// PromoteSnapshotToTemplate mocks base method.
func (m *MockClient) PromoteSnapshotToTemplate(ctx context.Context, id v3.UUID, req v3.PromoteSnapshotToTemplateRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteSnapshotToTemplate", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteSnapshotToTemplate indicates an expected call of PromoteSnapshotToTemplate.
func (mr *MockClientMockRecorder) PromoteSnapshotToTemplate(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteSnapshotToTemplate", reflect.TypeOf((*MockClient)(nil).PromoteSnapshotToTemplate), ctx, id, req)
}

// RebootInstance mocks base method.
func (m *MockClient) RebootInstance(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootInstance", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebootInstance indicates an expected call of RebootInstance.
func (mr *MockClientMockRecorder) RebootInstance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootInstance", reflect.TypeOf((*MockClient)(nil).RebootInstance), ctx, id)
}

// RegisterSSHKey mocks base method.
func (m *MockClient) RegisterSSHKey(ctx context.Context, req v3.RegisterSSHKeyRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSSHKey", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterSSHKey indicates an expected call of RegisterSSHKey.
func (mr *MockClientMockRecorder) RegisterSSHKey(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSSHKey", reflect.TypeOf((*MockClient)(nil).RegisterSSHKey), ctx, req)
}

// RegisterTemplate mocks base method.
func (m *MockClient) RegisterTemplate(ctx context.Context, req v3.RegisterTemplateRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTemplate", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTemplate indicates an expected call of RegisterTemplate.
func (mr *MockClientMockRecorder) RegisterTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTemplate", reflect.TypeOf((*MockClient)(nil).RegisterTemplate), ctx, req)
}

// RemoveExternalSourceFromSecurityGroup mocks base method.
func (m *MockClient) RemoveExternalSourceFromSecurityGroup(ctx context.Context, id v3.UUID, req v3.RemoveExternalSourceFromSecurityGroupRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveExternalSourceFromSecurityGroup", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveExternalSourceFromSecurityGroup indicates an expected call of RemoveExternalSourceFromSecurityGroup.
func (mr *MockClientMockRecorder) RemoveExternalSourceFromSecurityGroup(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExternalSourceFromSecurityGroup", reflect.TypeOf((*MockClient)(nil).RemoveExternalSourceFromSecurityGroup), ctx, id, req)
}

// RemoveInstanceProtection mocks base method.
func (m *MockClient) RemoveInstanceProtection(ctx context.Context, id v3.UUID) (*v3.RemoveInstanceProtectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInstanceProtection", ctx, id)
	ret0, _ := ret[0].(*v3.RemoveInstanceProtectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInstanceProtection indicates an expected call of RemoveInstanceProtection.
func (mr *MockClientMockRecorder) RemoveInstanceProtection(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInstanceProtection", reflect.TypeOf((*MockClient)(nil).RemoveInstanceProtection), ctx, id)
}

// ResetDBAASKafkaUserPassword mocks base method.
func (m *MockClient) ResetDBAASKafkaUserPassword(ctx context.Context, serviceName, username string, req v3.ResetDBAASKafkaUserPasswordRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBAASKafkaUserPassword", ctx, serviceName, username, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBAASKafkaUserPassword indicates an expected call of ResetDBAASKafkaUserPassword.
func (mr *MockClientMockRecorder) ResetDBAASKafkaUserPassword(ctx, serviceName, username, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBAASKafkaUserPassword", reflect.TypeOf((*MockClient)(nil).ResetDBAASKafkaUserPassword), ctx, serviceName, username, req)
}

// ResetDBAASMysqlUserPassword mocks base method.
func (m *MockClient) ResetDBAASMysqlUserPassword(ctx context.Context, serviceName, username string, req v3.ResetDBAASMysqlUserPasswordRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBAASMysqlUserPassword", ctx, serviceName, username, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBAASMysqlUserPassword indicates an expected call of ResetDBAASMysqlUserPassword.
func (mr *MockClientMockRecorder) ResetDBAASMysqlUserPassword(ctx, serviceName, username, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBAASMysqlUserPassword", reflect.TypeOf((*MockClient)(nil).ResetDBAASMysqlUserPassword), ctx, serviceName, username, req)
}

// ResetDBAASOpensearchUserPassword mocks base method.
func (m *MockClient) ResetDBAASOpensearchUserPassword(ctx context.Context, serviceName, username string, req v3.ResetDBAASOpensearchUserPasswordRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBAASOpensearchUserPassword", ctx, serviceName, username, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBAASOpensearchUserPassword indicates an expected call of ResetDBAASOpensearchUserPassword.
func (mr *MockClientMockRecorder) ResetDBAASOpensearchUserPassword(ctx, serviceName, username, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBAASOpensearchUserPassword", reflect.TypeOf((*MockClient)(nil).ResetDBAASOpensearchUserPassword), ctx, serviceName, username, req)
}

// ResetDBAASPostgresUserPassword mocks base method.
func (m *MockClient) ResetDBAASPostgresUserPassword(ctx context.Context, serviceName, username string, req v3.ResetDBAASPostgresUserPasswordRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetDBAASPostgresUserPassword", ctx, serviceName, username, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetDBAASPostgresUserPassword indicates an expected call of ResetDBAASPostgresUserPassword.
func (mr *MockClientMockRecorder) ResetDBAASPostgresUserPassword(ctx, serviceName, username, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetDBAASPostgresUserPassword", reflect.TypeOf((*MockClient)(nil).ResetDBAASPostgresUserPassword), ctx, serviceName, username, req)
}

// ResetElasticIPField mocks base method.
func (m *MockClient) ResetElasticIPField(ctx context.Context, id v3.UUID, field v3.ResetElasticIPFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetElasticIPField", ctx, id, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetElasticIPField indicates an expected call of ResetElasticIPField.
func (mr *MockClientMockRecorder) ResetElasticIPField(ctx, id, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetElasticIPField", reflect.TypeOf((*MockClient)(nil).ResetElasticIPField), ctx, id, field)
}

// ResetInstance mocks base method.
func (m *MockClient) ResetInstance(ctx context.Context, id v3.UUID, req v3.ResetInstanceRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetInstance", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetInstance indicates an expected call of ResetInstance.
func (mr *MockClientMockRecorder) ResetInstance(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetInstance", reflect.TypeOf((*MockClient)(nil).ResetInstance), ctx, id, req)
}

// ResetInstanceField mocks base method.
func (m *MockClient) ResetInstanceField(ctx context.Context, id v3.UUID, field v3.ResetInstanceFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetInstanceField", ctx, id, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetInstanceField indicates an expected call of ResetInstanceField.
func (mr *MockClientMockRecorder) ResetInstanceField(ctx, id, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetInstanceField", reflect.TypeOf((*MockClient)(nil).ResetInstanceField), ctx, id, field)
}

// ResetInstancePassword mocks base method.
func (m *MockClient) ResetInstancePassword(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetInstancePassword", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetInstancePassword indicates an expected call of ResetInstancePassword.
func (mr *MockClientMockRecorder) ResetInstancePassword(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetInstancePassword", reflect.TypeOf((*MockClient)(nil).ResetInstancePassword), ctx, id)
}

// ResetInstancePoolField mocks base method.
func (m *MockClient) ResetInstancePoolField(ctx context.Context, id v3.UUID, field v3.ResetInstancePoolFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetInstancePoolField", ctx, id, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetInstancePoolField indicates an expected call of ResetInstancePoolField.
func (mr *MockClientMockRecorder) ResetInstancePoolField(ctx, id, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetInstancePoolField", reflect.TypeOf((*MockClient)(nil).ResetInstancePoolField), ctx, id, field)
}

// ResetLoadBalancerField mocks base method.
func (m *MockClient) ResetLoadBalancerField(ctx context.Context, id v3.UUID, field v3.ResetLoadBalancerFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLoadBalancerField", ctx, id, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetLoadBalancerField indicates an expected call of ResetLoadBalancerField.
func (mr *MockClientMockRecorder) ResetLoadBalancerField(ctx, id, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLoadBalancerField", reflect.TypeOf((*MockClient)(nil).ResetLoadBalancerField), ctx, id, field)
}

// ResetLoadBalancerServiceField mocks base method.
func (m *MockClient) ResetLoadBalancerServiceField(ctx context.Context, id, serviceID v3.UUID, field v3.ResetLoadBalancerServiceFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetLoadBalancerServiceField", ctx, id, serviceID, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetLoadBalancerServiceField indicates an expected call of ResetLoadBalancerServiceField.
func (mr *MockClientMockRecorder) ResetLoadBalancerServiceField(ctx, id, serviceID, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLoadBalancerServiceField", reflect.TypeOf((*MockClient)(nil).ResetLoadBalancerServiceField), ctx, id, serviceID, field)
}

// ResetPrivateNetworkField mocks base method.
func (m *MockClient) ResetPrivateNetworkField(ctx context.Context, id v3.UUID, field v3.ResetPrivateNetworkFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPrivateNetworkField", ctx, id, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetPrivateNetworkField indicates an expected call of ResetPrivateNetworkField.
func (mr *MockClientMockRecorder) ResetPrivateNetworkField(ctx, id, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPrivateNetworkField", reflect.TypeOf((*MockClient)(nil).ResetPrivateNetworkField), ctx, id, field)
}

// ResetSKSClusterField mocks base method.
func (m *MockClient) ResetSKSClusterField(ctx context.Context, id v3.UUID, field v3.ResetSKSClusterFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSKSClusterField", ctx, id, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSKSClusterField indicates an expected call of ResetSKSClusterField.
func (mr *MockClientMockRecorder) ResetSKSClusterField(ctx, id, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSKSClusterField", reflect.TypeOf((*MockClient)(nil).ResetSKSClusterField), ctx, id, field)
}

// ResetSKSNodepoolField mocks base method.
func (m *MockClient) ResetSKSNodepoolField(ctx context.Context, id, sksNodepoolID v3.UUID, field v3.ResetSKSNodepoolFieldField) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetSKSNodepoolField", ctx, id, sksNodepoolID, field)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetSKSNodepoolField indicates an expected call of ResetSKSNodepoolField.
func (mr *MockClientMockRecorder) ResetSKSNodepoolField(ctx, id, sksNodepoolID, field any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetSKSNodepoolField", reflect.TypeOf((*MockClient)(nil).ResetSKSNodepoolField), ctx, id, sksNodepoolID, field)
}

// ResizeInstanceDisk mocks base method.
func (m *MockClient) ResizeInstanceDisk(ctx context.Context, id v3.UUID, req v3.ResizeInstanceDiskRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeInstanceDisk", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeInstanceDisk indicates an expected call of ResizeInstanceDisk.
func (mr *MockClientMockRecorder) ResizeInstanceDisk(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeInstanceDisk", reflect.TypeOf((*MockClient)(nil).ResizeInstanceDisk), ctx, id, req)
}

// RevealInstancePassword mocks base method.
func (m *MockClient) RevealInstancePassword(ctx context.Context, id v3.UUID) (*v3.InstancePassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevealInstancePassword", ctx, id)
	ret0, _ := ret[0].(*v3.InstancePassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevealInstancePassword indicates an expected call of RevealInstancePassword.
func (mr *MockClientMockRecorder) RevealInstancePassword(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevealInstancePassword", reflect.TypeOf((*MockClient)(nil).RevealInstancePassword), ctx, id)
}

// RevertInstanceToSnapshot mocks base method.
func (m *MockClient) RevertInstanceToSnapshot(ctx context.Context, instanceID v3.UUID, req v3.RevertInstanceToSnapshotRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevertInstanceToSnapshot", ctx, instanceID, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevertInstanceToSnapshot indicates an expected call of RevertInstanceToSnapshot.
func (mr *MockClientMockRecorder) RevertInstanceToSnapshot(ctx, instanceID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevertInstanceToSnapshot", reflect.TypeOf((*MockClient)(nil).RevertInstanceToSnapshot), ctx, instanceID, req)
}

// RevokeAccessKey mocks base method.
func (m *MockClient) RevokeAccessKey(ctx context.Context, key string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAccessKey", ctx, key)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAccessKey indicates an expected call of RevokeAccessKey.
func (mr *MockClientMockRecorder) RevokeAccessKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAccessKey", reflect.TypeOf((*MockClient)(nil).RevokeAccessKey), ctx, key)
}

// RotateSKSCcmCredentials mocks base method.
func (m *MockClient) RotateSKSCcmCredentials(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateSKSCcmCredentials", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateSKSCcmCredentials indicates an expected call of RotateSKSCcmCredentials.
func (mr *MockClientMockRecorder) RotateSKSCcmCredentials(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateSKSCcmCredentials", reflect.TypeOf((*MockClient)(nil).RotateSKSCcmCredentials), ctx, id)
}

// RotateSKSOperatorsCA mocks base method.
func (m *MockClient) RotateSKSOperatorsCA(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateSKSOperatorsCA", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotateSKSOperatorsCA indicates an expected call of RotateSKSOperatorsCA.
func (mr *MockClientMockRecorder) RotateSKSOperatorsCA(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateSKSOperatorsCA", reflect.TypeOf((*MockClient)(nil).RotateSKSOperatorsCA), ctx, id)
}

// ScaleInstance mocks base method.
func (m *MockClient) ScaleInstance(ctx context.Context, id v3.UUID, req v3.ScaleInstanceRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleInstance", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleInstance indicates an expected call of ScaleInstance.
func (mr *MockClientMockRecorder) ScaleInstance(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleInstance", reflect.TypeOf((*MockClient)(nil).ScaleInstance), ctx, id, req)
}

// ScaleInstancePool mocks base method.
func (m *MockClient) ScaleInstancePool(ctx context.Context, id v3.UUID, req v3.ScaleInstancePoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleInstancePool", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleInstancePool indicates an expected call of ScaleInstancePool.
func (mr *MockClientMockRecorder) ScaleInstancePool(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleInstancePool", reflect.TypeOf((*MockClient)(nil).ScaleInstancePool), ctx, id, req)
}

// ScaleSKSNodepool mocks base method.
func (m *MockClient) ScaleSKSNodepool(ctx context.Context, id, sksNodepoolID v3.UUID, req v3.ScaleSKSNodepoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScaleSKSNodepool", ctx, id, sksNodepoolID, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScaleSKSNodepool indicates an expected call of ScaleSKSNodepool.
func (mr *MockClientMockRecorder) ScaleSKSNodepool(ctx, id, sksNodepoolID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScaleSKSNodepool", reflect.TypeOf((*MockClient)(nil).ScaleSKSNodepool), ctx, id, sksNodepoolID, req)
}

// StartDBAASGrafanaMaintenance mocks base method.
func (m *MockClient) StartDBAASGrafanaMaintenance(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBAASGrafanaMaintenance", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBAASGrafanaMaintenance indicates an expected call of StartDBAASGrafanaMaintenance.
func (mr *MockClientMockRecorder) StartDBAASGrafanaMaintenance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBAASGrafanaMaintenance", reflect.TypeOf((*MockClient)(nil).StartDBAASGrafanaMaintenance), ctx, name)
}

// StartDBAASKafkaMaintenance mocks base method.
func (m *MockClient) StartDBAASKafkaMaintenance(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBAASKafkaMaintenance", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBAASKafkaMaintenance indicates an expected call of StartDBAASKafkaMaintenance.
func (mr *MockClientMockRecorder) StartDBAASKafkaMaintenance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBAASKafkaMaintenance", reflect.TypeOf((*MockClient)(nil).StartDBAASKafkaMaintenance), ctx, name)
}

// StartDBAASMysqlMaintenance mocks base method.
func (m *MockClient) StartDBAASMysqlMaintenance(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBAASMysqlMaintenance", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBAASMysqlMaintenance indicates an expected call of StartDBAASMysqlMaintenance.
func (mr *MockClientMockRecorder) StartDBAASMysqlMaintenance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBAASMysqlMaintenance", reflect.TypeOf((*MockClient)(nil).StartDBAASMysqlMaintenance), ctx, name)
}

// StartDBAASOpensearchMaintenance mocks base method.
func (m *MockClient) StartDBAASOpensearchMaintenance(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBAASOpensearchMaintenance", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBAASOpensearchMaintenance indicates an expected call of StartDBAASOpensearchMaintenance.
func (mr *MockClientMockRecorder) StartDBAASOpensearchMaintenance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBAASOpensearchMaintenance", reflect.TypeOf((*MockClient)(nil).StartDBAASOpensearchMaintenance), ctx, name)
}

// StartDBAASPGMaintenance mocks base method.
func (m *MockClient) StartDBAASPGMaintenance(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBAASPGMaintenance", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBAASPGMaintenance indicates an expected call of StartDBAASPGMaintenance.
func (mr *MockClientMockRecorder) StartDBAASPGMaintenance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBAASPGMaintenance", reflect.TypeOf((*MockClient)(nil).StartDBAASPGMaintenance), ctx, name)
}

// StartDBAASRedisMaintenance mocks base method.
func (m *MockClient) StartDBAASRedisMaintenance(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartDBAASRedisMaintenance", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartDBAASRedisMaintenance indicates an expected call of StartDBAASRedisMaintenance.
func (mr *MockClientMockRecorder) StartDBAASRedisMaintenance(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDBAASRedisMaintenance", reflect.TypeOf((*MockClient)(nil).StartDBAASRedisMaintenance), ctx, name)
}

// StartInstance mocks base method.
func (m *MockClient) StartInstance(ctx context.Context, id v3.UUID, req v3.StartInstanceRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartInstance", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartInstance indicates an expected call of StartInstance.
func (mr *MockClientMockRecorder) StartInstance(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartInstance", reflect.TypeOf((*MockClient)(nil).StartInstance), ctx, id, req)
}

// StopDBAASMysqlMigration mocks base method.
func (m *MockClient) StopDBAASMysqlMigration(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDBAASMysqlMigration", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBAASMysqlMigration indicates an expected call of StopDBAASMysqlMigration.
func (mr *MockClientMockRecorder) StopDBAASMysqlMigration(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBAASMysqlMigration", reflect.TypeOf((*MockClient)(nil).StopDBAASMysqlMigration), ctx, name)
}

// StopDBAASPGMigration mocks base method.
func (m *MockClient) StopDBAASPGMigration(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDBAASPGMigration", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBAASPGMigration indicates an expected call of StopDBAASPGMigration.
func (mr *MockClientMockRecorder) StopDBAASPGMigration(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBAASPGMigration", reflect.TypeOf((*MockClient)(nil).StopDBAASPGMigration), ctx, name)
}

// StopDBAASRedisMigration mocks base method.
func (m *MockClient) StopDBAASRedisMigration(ctx context.Context, name string) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopDBAASRedisMigration", ctx, name)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopDBAASRedisMigration indicates an expected call of StopDBAASRedisMigration.
func (mr *MockClientMockRecorder) StopDBAASRedisMigration(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopDBAASRedisMigration", reflect.TypeOf((*MockClient)(nil).StopDBAASRedisMigration), ctx, name)
}

// StopInstance mocks base method.
func (m *MockClient) StopInstance(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopInstance", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopInstance indicates an expected call of StopInstance.
func (mr *MockClientMockRecorder) StopInstance(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopInstance", reflect.TypeOf((*MockClient)(nil).StopInstance), ctx, id)
}

// UpdateDBAASIntegration mocks base method.
func (m *MockClient) UpdateDBAASIntegration(ctx context.Context, id v3.UUID, req v3.UpdateDBAASIntegrationRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASIntegration", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASIntegration indicates an expected call of UpdateDBAASIntegration.
func (mr *MockClientMockRecorder) UpdateDBAASIntegration(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASIntegration", reflect.TypeOf((*MockClient)(nil).UpdateDBAASIntegration), ctx, id, req)
}

// UpdateDBAASOpensearchAclConfig mocks base method.
func (m *MockClient) UpdateDBAASOpensearchAclConfig(ctx context.Context, name string, req v3.DBAASOpensearchAclConfig) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASOpensearchAclConfig", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASOpensearchAclConfig indicates an expected call of UpdateDBAASOpensearchAclConfig.
func (mr *MockClientMockRecorder) UpdateDBAASOpensearchAclConfig(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASOpensearchAclConfig", reflect.TypeOf((*MockClient)(nil).UpdateDBAASOpensearchAclConfig), ctx, name, req)
}

// UpdateDBAASPGConnectionPool mocks base method.
func (m *MockClient) UpdateDBAASPGConnectionPool(ctx context.Context, serviceName, connectionPoolName string, req v3.UpdateDBAASPGConnectionPoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASPGConnectionPool", ctx, serviceName, connectionPoolName, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASPGConnectionPool indicates an expected call of UpdateDBAASPGConnectionPool.
func (mr *MockClientMockRecorder) UpdateDBAASPGConnectionPool(ctx, serviceName, connectionPoolName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASPGConnectionPool", reflect.TypeOf((*MockClient)(nil).UpdateDBAASPGConnectionPool), ctx, serviceName, connectionPoolName, req)
}

// UpdateDBAASPostgresAllowReplication mocks base method.
func (m *MockClient) UpdateDBAASPostgresAllowReplication(ctx context.Context, serviceName, username string, req v3.UpdateDBAASPostgresAllowReplicationRequest) (*v3.DBAASPostgresUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASPostgresAllowReplication", ctx, serviceName, username, req)
	ret0, _ := ret[0].(*v3.DBAASPostgresUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASPostgresAllowReplication indicates an expected call of UpdateDBAASPostgresAllowReplication.
func (mr *MockClientMockRecorder) UpdateDBAASPostgresAllowReplication(ctx, serviceName, username, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASPostgresAllowReplication", reflect.TypeOf((*MockClient)(nil).UpdateDBAASPostgresAllowReplication), ctx, serviceName, username, req)
}

// UpdateDBAASServiceGrafana mocks base method.
func (m *MockClient) UpdateDBAASServiceGrafana(ctx context.Context, name string, req v3.UpdateDBAASServiceGrafanaRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASServiceGrafana", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASServiceGrafana indicates an expected call of UpdateDBAASServiceGrafana.
func (mr *MockClientMockRecorder) UpdateDBAASServiceGrafana(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASServiceGrafana", reflect.TypeOf((*MockClient)(nil).UpdateDBAASServiceGrafana), ctx, name, req)
}

// UpdateDBAASServiceKafka mocks base method.
func (m *MockClient) UpdateDBAASServiceKafka(ctx context.Context, name string, req v3.UpdateDBAASServiceKafkaRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASServiceKafka", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASServiceKafka indicates an expected call of UpdateDBAASServiceKafka.
func (mr *MockClientMockRecorder) UpdateDBAASServiceKafka(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASServiceKafka", reflect.TypeOf((*MockClient)(nil).UpdateDBAASServiceKafka), ctx, name, req)
}

// UpdateDBAASServiceMysql mocks base method.
func (m *MockClient) UpdateDBAASServiceMysql(ctx context.Context, name string, req v3.UpdateDBAASServiceMysqlRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASServiceMysql", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASServiceMysql indicates an expected call of UpdateDBAASServiceMysql.
func (mr *MockClientMockRecorder) UpdateDBAASServiceMysql(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASServiceMysql", reflect.TypeOf((*MockClient)(nil).UpdateDBAASServiceMysql), ctx, name, req)
}

// UpdateDBAASServiceOpensearch mocks base method.
func (m *MockClient) UpdateDBAASServiceOpensearch(ctx context.Context, name string, req v3.UpdateDBAASServiceOpensearchRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASServiceOpensearch", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASServiceOpensearch indicates an expected call of UpdateDBAASServiceOpensearch.
func (mr *MockClientMockRecorder) UpdateDBAASServiceOpensearch(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASServiceOpensearch", reflect.TypeOf((*MockClient)(nil).UpdateDBAASServiceOpensearch), ctx, name, req)
}

// UpdateDBAASServicePG mocks base method.
func (m *MockClient) UpdateDBAASServicePG(ctx context.Context, name string, req v3.UpdateDBAASServicePGRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASServicePG", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASServicePG indicates an expected call of UpdateDBAASServicePG.
func (mr *MockClientMockRecorder) UpdateDBAASServicePG(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASServicePG", reflect.TypeOf((*MockClient)(nil).UpdateDBAASServicePG), ctx, name, req)
}

// UpdateDBAASServiceRedis mocks base method.
func (m *MockClient) UpdateDBAASServiceRedis(ctx context.Context, name string, req v3.UpdateDBAASServiceRedisRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDBAASServiceRedis", ctx, name, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDBAASServiceRedis indicates an expected call of UpdateDBAASServiceRedis.
func (mr *MockClientMockRecorder) UpdateDBAASServiceRedis(ctx, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDBAASServiceRedis", reflect.TypeOf((*MockClient)(nil).UpdateDBAASServiceRedis), ctx, name, req)
}

// UpdateDNSDomainRecord mocks base method.
func (m *MockClient) UpdateDNSDomainRecord(ctx context.Context, domainID, recordID v3.UUID, req v3.UpdateDNSDomainRecordRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDNSDomainRecord", ctx, domainID, recordID, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDNSDomainRecord indicates an expected call of UpdateDNSDomainRecord.
func (mr *MockClientMockRecorder) UpdateDNSDomainRecord(ctx, domainID, recordID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDNSDomainRecord", reflect.TypeOf((*MockClient)(nil).UpdateDNSDomainRecord), ctx, domainID, recordID, req)
}

// UpdateElasticIP mocks base method.
func (m *MockClient) UpdateElasticIP(ctx context.Context, id v3.UUID, req v3.UpdateElasticIPRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateElasticIP", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateElasticIP indicates an expected call of UpdateElasticIP.
func (mr *MockClientMockRecorder) UpdateElasticIP(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateElasticIP", reflect.TypeOf((*MockClient)(nil).UpdateElasticIP), ctx, id, req)
}

// UpdateIAMOrganizationPolicy mocks base method.
func (m *MockClient) UpdateIAMOrganizationPolicy(ctx context.Context, req v3.IAMPolicy) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIAMOrganizationPolicy", ctx, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIAMOrganizationPolicy indicates an expected call of UpdateIAMOrganizationPolicy.
func (mr *MockClientMockRecorder) UpdateIAMOrganizationPolicy(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIAMOrganizationPolicy", reflect.TypeOf((*MockClient)(nil).UpdateIAMOrganizationPolicy), ctx, req)
}

// UpdateIAMRole mocks base method.
func (m *MockClient) UpdateIAMRole(ctx context.Context, id v3.UUID, req v3.UpdateIAMRoleRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIAMRole", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIAMRole indicates an expected call of UpdateIAMRole.
func (mr *MockClientMockRecorder) UpdateIAMRole(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIAMRole", reflect.TypeOf((*MockClient)(nil).UpdateIAMRole), ctx, id, req)
}

// UpdateIAMRolePolicy mocks base method.
func (m *MockClient) UpdateIAMRolePolicy(ctx context.Context, id v3.UUID, req v3.IAMPolicy) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIAMRolePolicy", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIAMRolePolicy indicates an expected call of UpdateIAMRolePolicy.
func (mr *MockClientMockRecorder) UpdateIAMRolePolicy(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIAMRolePolicy", reflect.TypeOf((*MockClient)(nil).UpdateIAMRolePolicy), ctx, id, req)
}

// UpdateInstance mocks base method.
func (m *MockClient) UpdateInstance(ctx context.Context, id v3.UUID, req v3.UpdateInstanceRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockClientMockRecorder) UpdateInstance(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockClient)(nil).UpdateInstance), ctx, id, req)
}

// UpdateInstancePool mocks base method.
func (m *MockClient) UpdateInstancePool(ctx context.Context, id v3.UUID, req v3.UpdateInstancePoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstancePool", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstancePool indicates an expected call of UpdateInstancePool.
func (mr *MockClientMockRecorder) UpdateInstancePool(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstancePool", reflect.TypeOf((*MockClient)(nil).UpdateInstancePool), ctx, id, req)
}

// UpdateLoadBalancer mocks base method.
func (m *MockClient) UpdateLoadBalancer(ctx context.Context, id v3.UUID, req v3.UpdateLoadBalancerRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockClientMockRecorder) UpdateLoadBalancer(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancer), ctx, id, req)
}

// UpdateLoadBalancerService mocks base method.
func (m *MockClient) UpdateLoadBalancerService(ctx context.Context, id, serviceID v3.UUID, req v3.UpdateLoadBalancerServiceRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerService", ctx, id, serviceID, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerService indicates an expected call of UpdateLoadBalancerService.
func (mr *MockClientMockRecorder) UpdateLoadBalancerService(ctx, id, serviceID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerService", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancerService), ctx, id, serviceID, req)
}

// UpdatePrivateNetwork mocks base method.
func (m *MockClient) UpdatePrivateNetwork(ctx context.Context, id v3.UUID, req v3.UpdatePrivateNetworkRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivateNetwork", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateNetwork indicates an expected call of UpdatePrivateNetwork.
func (mr *MockClientMockRecorder) UpdatePrivateNetwork(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateNetwork", reflect.TypeOf((*MockClient)(nil).UpdatePrivateNetwork), ctx, id, req)
}

// UpdatePrivateNetworkInstanceIP mocks base method.
func (m *MockClient) UpdatePrivateNetworkInstanceIP(ctx context.Context, id v3.UUID, req v3.UpdatePrivateNetworkInstanceIPRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePrivateNetworkInstanceIP", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateNetworkInstanceIP indicates an expected call of UpdatePrivateNetworkInstanceIP.
func (mr *MockClientMockRecorder) UpdatePrivateNetworkInstanceIP(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateNetworkInstanceIP", reflect.TypeOf((*MockClient)(nil).UpdatePrivateNetworkInstanceIP), ctx, id, req)
}

// UpdateReverseDNSElasticIP mocks base method.
func (m *MockClient) UpdateReverseDNSElasticIP(ctx context.Context, id v3.UUID, req v3.UpdateReverseDNSElasticIPRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReverseDNSElasticIP", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReverseDNSElasticIP indicates an expected call of UpdateReverseDNSElasticIP.
func (mr *MockClientMockRecorder) UpdateReverseDNSElasticIP(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReverseDNSElasticIP", reflect.TypeOf((*MockClient)(nil).UpdateReverseDNSElasticIP), ctx, id, req)
}

// UpdateReverseDNSInstance mocks base method.
func (m *MockClient) UpdateReverseDNSInstance(ctx context.Context, id v3.UUID, req v3.UpdateReverseDNSInstanceRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReverseDNSInstance", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReverseDNSInstance indicates an expected call of UpdateReverseDNSInstance.
func (mr *MockClientMockRecorder) UpdateReverseDNSInstance(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReverseDNSInstance", reflect.TypeOf((*MockClient)(nil).UpdateReverseDNSInstance), ctx, id, req)
}

// UpdateSKSCluster mocks base method.
func (m *MockClient) UpdateSKSCluster(ctx context.Context, id v3.UUID, req v3.UpdateSKSClusterRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSKSCluster", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSKSCluster indicates an expected call of UpdateSKSCluster.
func (mr *MockClientMockRecorder) UpdateSKSCluster(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSKSCluster", reflect.TypeOf((*MockClient)(nil).UpdateSKSCluster), ctx, id, req)
}

// UpdateSKSNodepool mocks base method.
func (m *MockClient) UpdateSKSNodepool(ctx context.Context, id, sksNodepoolID v3.UUID, req v3.UpdateSKSNodepoolRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSKSNodepool", ctx, id, sksNodepoolID, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSKSNodepool indicates an expected call of UpdateSKSNodepool.
func (mr *MockClientMockRecorder) UpdateSKSNodepool(ctx, id, sksNodepoolID, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSKSNodepool", reflect.TypeOf((*MockClient)(nil).UpdateSKSNodepool), ctx, id, sksNodepoolID, req)
}

// UpdateTemplate mocks base method.
func (m *MockClient) UpdateTemplate(ctx context.Context, id v3.UUID, req v3.UpdateTemplateRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTemplate", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTemplate indicates an expected call of UpdateTemplate.
func (mr *MockClientMockRecorder) UpdateTemplate(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTemplate", reflect.TypeOf((*MockClient)(nil).UpdateTemplate), ctx, id, req)
}

// UpgradeSKSCluster mocks base method.
func (m *MockClient) UpgradeSKSCluster(ctx context.Context, id v3.UUID, req v3.UpgradeSKSClusterRequest) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSKSCluster", ctx, id, req)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeSKSCluster indicates an expected call of UpgradeSKSCluster.
func (mr *MockClientMockRecorder) UpgradeSKSCluster(ctx, id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSKSCluster", reflect.TypeOf((*MockClient)(nil).UpgradeSKSCluster), ctx, id, req)
}

// UpgradeSKSClusterServiceLevel mocks base method.
func (m *MockClient) UpgradeSKSClusterServiceLevel(ctx context.Context, id v3.UUID) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSKSClusterServiceLevel", ctx, id)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeSKSClusterServiceLevel indicates an expected call of UpgradeSKSClusterServiceLevel.
func (mr *MockClientMockRecorder) UpgradeSKSClusterServiceLevel(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSKSClusterServiceLevel", reflect.TypeOf((*MockClient)(nil).UpgradeSKSClusterServiceLevel), ctx, id)
}

// Wait mocks base method.
func (m *MockClient) Wait(arg0 context.Context, arg1 *v3.Operation, arg2 ...v3.OperationState) (*v3.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wait", varargs...)
	ret0, _ := ret[0].(*v3.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockClientMockRecorder) Wait(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockClient)(nil).Wait), varargs...)
}

// WithContext mocks base method.
func (m *MockClient) WithContext(arg0 context.Context) v3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", arg0)
	ret0, _ := ret[0].(v3.Client)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockClientMockRecorder) WithContext(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockClient)(nil).WithContext), arg0)
}

// WithHttpClient mocks base method.
func (m *MockClient) WithHttpClient(arg0 *http.Client) v3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithHttpClient", arg0)
	ret0, _ := ret[0].(v3.Client)
	return ret0
}

// WithHttpClient indicates an expected call of WithHttpClient.
func (mr *MockClientMockRecorder) WithHttpClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithHttpClient", reflect.TypeOf((*MockClient)(nil).WithHttpClient), arg0)
}

// WithRequestMiddleware mocks base method.
func (m *MockClient) WithRequestMiddleware(arg0 v3.RequestMiddlewareFn) v3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRequestMiddleware", arg0)
	ret0, _ := ret[0].(v3.Client)
	return ret0
}

// WithRequestMiddleware indicates an expected call of WithRequestMiddleware.
func (mr *MockClientMockRecorder) WithRequestMiddleware(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRequestMiddleware", reflect.TypeOf((*MockClient)(nil).WithRequestMiddleware), arg0)
}

// WithZone mocks base method.
func (m *MockClient) WithZone(arg0 v3.APIZone) v3.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithZone", arg0)
	ret0, _ := ret[0].(v3.Client)
	return ret0
}

// WithZone indicates an expected call of WithZone.
func (mr *MockClientMockRecorder) WithZone(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithZone", reflect.TypeOf((*MockClient)(nil).WithZone), arg0)
}
