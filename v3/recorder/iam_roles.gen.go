// Code generated by v3/generator; DO NOT EDIT.
package recorder

import (
	"context"


	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
v3 "github.com/exoscale/egoscale/v3"
)

type RolesAPI struct {
    Recordee *v3.RolesAPI
}


func (a *RolesAPI) List(ctx context.Context) ([]v3.IamRole, error) {
    req := argsToMap()

    resp, err := a.Recordee.List(ctx, )

    writeErr := WriteTestdata("RolesAPI.List", req, resp, err)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, err
}

func (a *RolesAPI) Get(ctx context.Context, id openapi_types.UUID) (*v3.IamRole, error) {
    req := argsToMap(id)

    resp, err := a.Recordee.Get(ctx, id)

    writeErr := WriteTestdata("RolesAPI.Get", req, resp, err)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, err
}

func (a *RolesAPI) Create(ctx context.Context, body v3.CreateIamRoleJSONRequestBody) (*v3.Operation, error) {
    req := argsToMap(body)

    resp, err := a.Recordee.Create(ctx, body)

    writeErr := WriteTestdata("RolesAPI.Create", req, resp, err)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, err
}

func (a *RolesAPI) Delete(ctx context.Context, id openapi_types.UUID) (*v3.Operation, error) {
    req := argsToMap(id)

    resp, err := a.Recordee.Delete(ctx, id)

    writeErr := WriteTestdata("RolesAPI.Delete", req, resp, err)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, err
}

func (a *RolesAPI) Update(ctx context.Context, id openapi_types.UUID, body v3.UpdateIamRoleJSONRequestBody) (*v3.Operation, error) {
    req := argsToMap(id, body)

    resp, err := a.Recordee.Update(ctx, id, body)

    writeErr := WriteTestdata("RolesAPI.Update", req, resp, err)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, err
}

func (a *RolesAPI) UpdatePolicy(ctx context.Context, id openapi_types.UUID, body v3.UpdateIamRolePolicyJSONRequestBody) (*v3.Operation, error) {
    req := argsToMap(id, body)

    resp, err := a.Recordee.UpdatePolicy(ctx, id, body)

    writeErr := WriteTestdata("RolesAPI.UpdatePolicy", req, resp, err)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, err
}

