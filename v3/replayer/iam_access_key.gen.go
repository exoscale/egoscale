// Code generated by v3/generator; DO NOT EDIT.
package replayer

import (
	"context"

v3 "github.com/exoscale/egoscale/v3"
)

type AccessKeyAPI struct {}


func (a *AccessKeyAPI) List(ctx context.Context) ([]v3.AccessKey, error) {
    resp := InitializeReturnType[[]v3.AccessKey](a.List)

    var returnErr *error
    writeErr := GetTestCall(&resp, returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    if returnErr == nil {
       return resp, nil
    }

    return resp, *returnErr
}

func (a *AccessKeyAPI) ListKnownOperations(ctx context.Context) ([]v3.AccessKeyOperation, error) {
    resp := InitializeReturnType[[]v3.AccessKeyOperation](a.ListKnownOperations)

    var returnErr *error
    writeErr := GetTestCall(&resp, returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    if returnErr == nil {
       return resp, nil
    }

    return resp, *returnErr
}

func (a *AccessKeyAPI) ListOperations(ctx context.Context) ([]v3.AccessKeyOperation, error) {
    resp := InitializeReturnType[[]v3.AccessKeyOperation](a.ListOperations)

    var returnErr *error
    writeErr := GetTestCall(&resp, returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    if returnErr == nil {
       return resp, nil
    }

    return resp, *returnErr
}

func (a *AccessKeyAPI) Get(ctx context.Context, key string) (*v3.AccessKey, error) {
    resp := InitializeReturnType[*v3.AccessKey](a.Get)

    var returnErr *error
    writeErr := GetTestCall(&resp, returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    if returnErr == nil {
       return resp, nil
    }

    return resp, *returnErr
}

func (a *AccessKeyAPI) Create(ctx context.Context, body v3.CreateAccessKeyJSONRequestBody) (*v3.AccessKey, error) {
    resp := InitializeReturnType[*v3.AccessKey](a.Create)

    var returnErr *error
    writeErr := GetTestCall(&resp, returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    if returnErr == nil {
       return resp, nil
    }

    return resp, *returnErr
}

func (a *AccessKeyAPI) Revoke(ctx context.Context, key string) (*v3.Operation, error) {
    resp := InitializeReturnType[*v3.Operation](a.Revoke)

    var returnErr *error
    writeErr := GetTestCall(&resp, returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    if returnErr == nil {
       return resp, nil
    }

    return resp, *returnErr
}

