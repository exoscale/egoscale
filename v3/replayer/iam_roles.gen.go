// Code generated by v3/generator; DO NOT EDIT.
package replayer

import (
	"context"


	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
v3 "github.com/exoscale/egoscale/v3"
)

type RolesAPI struct {}


func (a *RolesAPI) List(ctx context.Context) ([]v3.IamRole, error) {
    resp := InitializeReturnType[[]v3.IamRole](a.List)

    var returnErr error
    writeErr := GetTestCall(&resp, &returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, returnErr
}

func (a *RolesAPI) Get(ctx context.Context, id openapi_types.UUID) (*v3.IamRole, error) {
    resp := InitializeReturnType[*v3.IamRole](a.Get)

    var returnErr error
    writeErr := GetTestCall(&resp, &returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, returnErr
}

func (a *RolesAPI) Create(ctx context.Context, body v3.CreateIamRoleJSONRequestBody) (*v3.Operation, error) {
    resp := InitializeReturnType[*v3.Operation](a.Create)

    var returnErr error
    writeErr := GetTestCall(&resp, &returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, returnErr
}

func (a *RolesAPI) Delete(ctx context.Context, id openapi_types.UUID) (*v3.Operation, error) {
    resp := InitializeReturnType[*v3.Operation](a.Delete)

    var returnErr error
    writeErr := GetTestCall(&resp, &returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, returnErr
}

func (a *RolesAPI) Update(ctx context.Context, id openapi_types.UUID, body v3.UpdateIamRoleJSONRequestBody) (*v3.Operation, error) {
    resp := InitializeReturnType[*v3.Operation](a.Update)

    var returnErr error
    writeErr := GetTestCall(&resp, &returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, returnErr
}

func (a *RolesAPI) UpdatePolicy(ctx context.Context, id openapi_types.UUID, body v3.UpdateIamRolePolicyJSONRequestBody) (*v3.Operation, error) {
    resp := InitializeReturnType[*v3.Operation](a.UpdatePolicy)

    var returnErr error
    writeErr := GetTestCall(&resp, &returnErr)
    if writeErr != nil {
       panic(writeErr)
    }

    return resp, returnErr
}

