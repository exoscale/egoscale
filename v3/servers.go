// Package v3 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/egoscale/v3/generator version v0.0.1 DO NOT EDIT.
package v3

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"runtime"
	"strings"
	"time"

	api "github.com/exoscale/egoscale/v3/api"
	"github.com/exoscale/egoscale/version"
)

type RequestMiddlewareFn func(ctx context.Context, req *http.Request) error

// UserAgent is the "User-Agent" HTTP request header added to outgoing HTTP requests.
var UserAgent = fmt.Sprintf("egoscale/%s (%s; %s/%s)",
	version.Version,
	runtime.Version(),
	runtime.GOOS,
	runtime.GOARCH)

const pollingInterval = 3 * time.Second

type APIZone string

const (
	APIZoneCHGva2 = "ch-gva-2"
	APIZoneCHZrh1 = "ch-zrh-1"
	APIZoneDEFra1 = "de-fra-1"
	APIZoneDEMuc1 = "de-muc-1"
	APIZoneATVie1 = "at-vie-1"
	APIZoneATVie2 = "at-vie-2"
	APIZoneBGSof1 = "bg-sof-1"
)

type ClientAPI struct {
	apiKey          string
	apiSecret       string
	serverURL       string
	rawServerURL    string
	httpClient      *http.Client
	timeout         time.Duration
	pollingInterval time.Duration
	trace           bool
	middlewares     []RequestMiddlewareFn
}

// ClientAPIOpt represents a function setting Exoscale API client option.
type ClientAPIOpt func(*ClientAPI) error

// ClientAPIOptWithTimeout returns a ClientAPIOpt overriding the default client timeout.
func ClientAPIOptWithTimeout(v time.Duration) ClientAPIOpt {
	return func(c *ClientAPI) error {
		if v <= 0 {
			return errors.New("timeout value must be greater than 0")
		}
		c.timeout = v

		return nil
	}
}

// ClientAPIOptWithTrace returns a ClientAPIOpt enabling HTTP request/response tracing.
func ClientAPIOptWithTrace() ClientAPIOpt {
	return func(c *ClientAPI) error {
		c.trace = true
		return nil
	}
}

func ClientAPIOptWithEnvironment(env string) ClientAPIOpt {
	return func(c *ClientAPI) error {
		c.rawServerURL = strings.Replace(c.rawServerURL, "api", env, 1)
		c.serverURL = strings.Replace(c.serverURL, "api", env, 1)
		return nil
	}
}

// ClientAPIOptWithZone returns a ClientAPIOpt With a given zone.
func ClientAPIOptWithZone(zone APIZone) ClientAPIOpt {
	return func(c *ClientAPI) error {
		c.serverURL = strings.Replace(c.rawServerURL, "{zone}", string(zone), 1)
		return nil
	}
}

// ClientAPIOptWithHTTPClient returns a ClientAPIOpt overriding the default http.Client.
// Note: the Exoscale API client will chain additional middleware
// (http.RoundTripper) on the HTTP client internally, which can alter the HTTP
// requests and responses. If you don't want any other middleware than the ones
// currently set to your HTTP client, you should duplicate it and pass a copy
// instead.
func ClientAPIOptWithHTTPClient(v *http.Client) ClientAPIOpt {
	return func(c *ClientAPI) error {
		c.httpClient = v

		return nil
	}
}

func NewClientAPI(apiKey, apiSecret string, opts ...ClientAPIOpt) (Client, error) {
	if apiKey == "" || apiSecret == "" {
		return nil, fmt.Errorf("missing or incomplete API credentials")
	}

	client := &ClientAPI{
		apiKey:          apiKey,
		apiSecret:       apiSecret,
		serverURL:       "https://api-ch-gva-2.exoscale.com/v2",
		rawServerURL:    "https://api-{zone}.exoscale.com/v2",
		httpClient:      http.DefaultClient,
		pollingInterval: pollingInterval,
	}

	for _, opt := range opts {
		if err := opt(client); err != nil {
			return nil, fmt.Errorf("client configuration error: %s", err)
		}
	}

	security, err := api.NewSecurityProvider(apiKey, apiSecret)
	if err != nil {
		return nil, fmt.Errorf("unable to initialize API security provider: %w", err)
	}

	// Tracing must be performed before API error handling in the middleware chain,
	// otherwise the response won't be dumped in case of an API error.
	if client.trace {
		client.httpClient.Transport = api.NewTraceMiddleware(client.httpClient.Transport)
	}

	client.httpClient.Transport = api.NewAPIErrorHandlerMiddleware(client.httpClient.Transport)

	return client.WithRequestMiddleware(security.Intercept), nil
}

func (c *ClientAPI) WithZone(z APIZone) Client {
	return &ClientAPI{
		serverURL:       strings.Replace(c.rawServerURL, "{zone}", string(z), 1),
		rawServerURL:    c.rawServerURL,
		httpClient:      c.httpClient,
		middlewares:     c.middlewares,
		pollingInterval: c.pollingInterval,
	}
}

func (c *ClientAPI) WithContext(ctx context.Context) Client {
	return &ClientAPI{
		serverURL:       c.serverURL,
		rawServerURL:    c.rawServerURL,
		httpClient:      c.httpClient,
		middlewares:     c.middlewares,
		pollingInterval: c.pollingInterval,
	}
}

func (c *ClientAPI) WithHttpClient(client *http.Client) Client {
	return &ClientAPI{
		serverURL:       c.serverURL,
		rawServerURL:    c.rawServerURL,
		httpClient:      client,
		middlewares:     c.middlewares,
		pollingInterval: c.pollingInterval,
	}
}

func (c *ClientAPI) WithRequestMiddleware(f RequestMiddlewareFn) Client {
	return &ClientAPI{
		serverURL:       c.serverURL,
		rawServerURL:    c.rawServerURL,
		httpClient:      c.httpClient,
		middlewares:     append(c.middlewares, f),
		pollingInterval: c.pollingInterval,
	}
}

func registerRequestMiddlewares(c *ClientAPI, ctx context.Context, req *http.Request) error {
	for _, fn := range c.middlewares {
		if err := fn(ctx, req); err != nil {
			return err
		}
	}

	return nil
}
