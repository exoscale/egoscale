// Code generated by v3/generator; DO NOT EDIT.
package replayer

import (
	"context"


	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
v3 "github.com/exoscale/egoscale/v3"
	"github.com/exoscale/egoscale/v3/testing/recorder"
)

type InstanceTypesAPI struct {
    Replayer *Replayer

    ListHook func(ctx context.Context) error

    GetHook func(ctx context.Context, id openapi_types.UUID) error

}


func (a *InstanceTypesAPI) List(ctx context.Context) ([]v3.InstanceType, error) {
    resp := InitializeReturnType[[]v3.InstanceType](a.List)

    expectedArgs := make(recorder.CallParameters)
    var returnErr error
    err := a.Replayer.GetTestCall(&resp, &expectedArgs, &returnErr)
    if err != nil {
        panic(err)
    }

    if a.ListHook == nil {
        
    } else {
        if err := a.ListHook(ctx); err != nil {
            panic(err)
        }
    }

    return resp, returnErr
}

func (a *InstanceTypesAPI) Get(ctx context.Context, id openapi_types.UUID) (*v3.InstanceType, error) {
    resp := InitializeReturnType[*v3.InstanceType](a.Get)

    expectedArgs := make(recorder.CallParameters)
    var returnErr error
    err := a.Replayer.GetTestCall(&resp, &expectedArgs, &returnErr)
    if err != nil {
        panic(err)
    }

    if a.GetHook == nil {
        
             a.Replayer.AssertArgs(expectedArgs, id)
        
    } else {
        if err := a.GetHook(ctx, id); err != nil {
            panic(err)
        }
    }

    return resp, returnErr
}

